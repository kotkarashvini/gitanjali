<?php

App::uses('Sanitize', 'Utility');

class MastersController extends AppController {

    public $components = array('Security', 'RequestHandler', 'Captcha', 'Cookie');
    public $helpers = array('Js', 'Html', 'Form', 'Paginator');

    public function beforeFilter() {
        $this->loadModel('language');
        $langaugelist = $this->language->find('all', array('conditions' => array('state_id' => array(0, $this->Auth->user('state_id')))));
        $this->set('langaugelist', $langaugelist);

        $this->Security->unlockedActons = array('article_partymapping', 'bank_master', 'bank_branch', 'partytype', 'article_screen_mapping', 'identifire_type', 'identificatontype', 'cast_category', 'salutation', 'Developedlandtype', 'gender', 'formlabel', 'getgraph', 'graph1', 'get_office_name', 'get_selected_data', 'get_employee_name', 'get_designation', 'office_village_linking', 'empjoining', 'document_execution_type', 'behavoiurconfig', 'errorcode', 'emptransfer', 'behavioralpattens', 'behaviouraldetails', 'timeslot', 'reason', 'document_status_description', 'regconfig', 'config_language', 'language', 'officeshift', 'holiday', 'external_interface', 'officehierarchynew', 'extintfielddetails', 'ratefactor', 'officenew', 'employee', 'levelmapping', 'division', 'usagecategory', 'menuuserpermission', 'mastermenu', 'usagelnkitem', 'submenu', 'majorfunction', 'minorfunction', 'unit', 'behaviour', 'roadvicinity', 'user_defined_dependancy1', 'user_defined_dependancy2', 'district', 'circle', 'emoplyeereportlist', 'survey', 'admin_block_level_config', 'gegemapping', 'villagelevelmapping', 'district_new', 'divisionnew', 'taluka', 'village', 'constructiontype', 'depreciation', 'rate', 'damblkdpnd', 'itemlist', 'subsubcategory', 'usagesub', 'subdivision', 'usagemain', 'villagemapping', 'level1', 'level2', 'level3', 'level4', 'levellist1', 'levellist2', 'levellist3', 'levellist4', 'usagelnkcategory', 'formlabel', 'form_field_linkage', 'article', 'document', 'tokenstatus', 'office', 'officehierarchy', 'fieldmaster', 'feemaster', 'usagelnkitemlist', 'Usagesub', 'Constructiontype', 'propertylist', 'itemrate', 'operator', 'employee_office_incharge_link', 'delete_office_emplink', 'get_officeid', 'statelogoupload', 'statelogo', 'conf_reg_info', 'savelevel1', 'savelevellist1', 'savelevel2', 'savelevellist2', 'savelevel3', 'savelevellist3', 'savelevel4', 'savelevellist4', 'local_governing_body', 'ratesearch', 'configlistitems', 'locgovbodylist', 'upload_format', 'proprodts', 'conc_jurisdiction', 'searchrate', 'articledepndfeild_master', 'gettaluka', 'behavioural', 'document_disposal', 'party_category_feild');
        $this->Auth->allow('english_lables', 'localgovgrid', 'login', 'Disclaimer', 'willexecution', 'index', 'index1', 'index2', 'registration', 'checkuser', 'viewsingle', 'ViewRegisteruser', 'get_district_name', 'get_captcha', 'aboutus', 'contactus', 'insertuser', 'checkorg', 'sponsordetail_pdf', 'checkcaptcha', 'checkemail', 'send_sms', 'empregistration', 'get_taluka_name', 'get_village_name', 'get_data', 'statelogo', 'language_main_menu', 'itemlst');

        if (isset($this->Security)) { //&& isset($this->Auth)) {
            $this->Security->validatePost = false;
            $this->Security->enabled = false;
            $this->Security->csrfCheck = false;
        }
    }

    function checkofficename() {
        // echo 'hi';exit;
        try {
            $this->loadModel('office');
            $c = Sanitize::html($_POST['username']);

            $this->citizenuserreg->findbyecitiuser($c);
            exit;
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function activity_count() {
        try {
            $this->loadModel('damblkdpnd');
            $data = array();
            if ($_POST['flag'] == 'S') {
                $frmdate = $_POST['from'];
                $todate = $_POST['to'];
                $frmdate = "'" . date('Y-m-d', strtotime($frmdate)) . "'";
                $todate = "'" . date('Y-m-d', strtotime($todate)) . "'";
                $data = $this->damblkdpnd->query("select count(distinct data) as total  From ngdrstab_mst_sessions 
                 where DATE(created)>= ? and DATE(created)<=?", array($frmdate, $todate));
            } else {
                $data = $this->damblkdpnd->query("select count(*) as total from pg_stat_activity");
            }
            if ($data[0][0]['total'] == null) {
                $total = 0;
            } else {
                $total = $data[0][0]['total'];
            }
            echo $total;
            exit;

//           echo json_encode($total); exit;
        } catch (Exception $e) {
            pr($e);
            exit;
        }
    }

    function activity() {
        
    }

    //done by shrishail
//      function sro_approve_deedwriter_all($office_id = NULL) {
//        try {
////             pr($_SESSION);exit;
////            if ($this->referer() != '') {
////                if (strpos($this->referer(), $this->webroot) == false) {
////                    header('Location:../cterror.html');
////                    exit;
////                }
////            }
//            $lang = $this->Session->read("sess_langauge");
//            $this->loadModel('office');
//            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_' . $lang),'conditions' => array('state_manager_dis_flag' => 'Y')));
//            if (is_numeric($office_id)) {
//                //$office_id = $this->Auth->User('office_id');
//                $this->loadModel('empregistration');
//                $s = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where deed_writer='Y' and office_id=$office_id");
//                $advocate = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where is_advocate='Y' and office_id=$office_id");
//            } else {
//                $s = NULL;
//                $advocate = NULL;
//            }
//            $this->set('usrdata', $s);
//            $this->set('advocate', $advocate);
//            $this->set('office', $office);
//            $this->set('office_id',$office_id);
//        } catch (Exception $e) {
//      pr($e);exit;
//            $this->redirect(array('action' => 'error404'));
//        }
//    }


    function sro_approve_deedwriter_all($office_id = NULL) {
        try {
//             pr($_SESSION);exit;
//            if ($this->referer() != '') {
//                if (strpos($this->referer(), $this->webroot) == false) {
//                    header('Location:../cterror.html');
//                    exit;
//                }
//            }
            $lang = $this->Session->read("sess_langauge");
            $this->loadModel('office');
            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_' . $lang), 'conditions' => array('state_manager_dis_flag' => 'Y')));
            if (is_numeric($office_id)) {
                //$office_id = $this->Auth->User('office_id');
                $this->loadModel('empregistration');
                $s = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where deed_writer='Y' and office_id=$office_id");
//                pr("select * from ngdrstab_mst_user_citizen where deed_writer='Y' and office_id=$office_id");
//                exit;
                $advocate = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where is_advocate='Y' and office_id=$office_id");
            } else {
                $s = NULL;
                $advocate = NULL;
            }
            $this->set('usrdata', $s);
            $this->set('advocate', $advocate);
            $this->set('office', $office);
            $this->set('office_id', $office_id);
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //
//    public function sro_approve_deedwriter_all_edit($userid = NULL) {
//        try {
//            $this->loadModel('office');
//            $this->loadModel('empregistration');
//            $this->loadModel('id_type');
//            $this->loadModel('State');
//            $laug = $this->Session->read("sess_langauge");
//            if ($laug == NULL) {
//                $this->Session->write("sess_langauge", 'en');
//            }
//            $this->set('laug', $laug);
//
//            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_' . $laug), 'conditions' => array('filter_flag' => 'I'), 'order' => array('identificationtype_desc_en' => 'ASC')));
//            $this->set('idtype', $idtype);
//            $this->loadModel('State');
//            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_' . $laug), 'order' => array('state_name_en' => 'ASC')));
//            $this->set('State', $State);
//            $this->loadModel('division');
//            $division = $this->division->find('list', array('fields' => array('id', 'division_name_' . $laug), 'order' => array('division_name_en' => 'ASC')));
//            $this->set('division', $division);
//            $this->loadModel('District');
//            $District = $this->District->find('list', array('fields' => array('id', 'district_name_' . $laug), 'order' => array('district_name_en' => 'ASC')));
//            $this->set('District', $District);
//            $this->loadModel('taluka');
//            $this->loadModel('office');
//            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_id' => 'ASC')));
//            $this->set('office', $office);
//            $taluka = $this->taluka->find('list', array('fields' => array('id', 'taluka_name_' . $laug), 'order' => array('taluka_name_en' => 'ASC')));
//            $this->set('taluka', $taluka);
//            $this->loadModel('CitizenUser');
//            $this->loadModel('NGDRSErrorCode');
//            $result_codes = $this->NGDRSErrorCode->find("all");
//            $this->set('result_codes', $result_codes);
//            $allrule = $this->NGDRSErrorCode->query('select e.error_code ,e.pattern_rule_client ,e.error_messages_' . $laug . ' from ngdrstab_mst_errorcodes e, ngdrstab_mst_identificationtype i where e.error_code_id=i.error_code_id ');
//            $this->set('allrule', $allrule);
//            $fieldlist['citizen_type']['radio'] = 'is_i_n';
//            $fieldlist['contact_fname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
//            $fieldlist['contact_mname']['text'] = 'is_alphaspace,is_minmaxlength100';
//            $fieldlist['contact_lname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
//            $fieldlist['building']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
//            $fieldlist['street']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
//            $fieldlist['city']['text'] = 'is_alphaspace,is_minmaxlength100';
//            $fieldlist['pincode']['text'] = 'is_pincode_empty';
//            $fieldlist['state_id']['text'] = 'is_select_req';
//            $fieldlist['district_id']['text'] = 'is_select_req';
//            $fieldlist['taluka_id']['text'] = 'is_select_req';
//            $fieldlist['office_id']['text'] = 'is_select_req';
//            $fieldlist['email_id']['text'] = 'is_email';
//            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
//            $fieldlist['id_type']['select'] = 'is_select_req';
//            $fieldlist['uid']['text'] = 'is_required,is_uidnum';
//            $fieldlist['address']['text'] = 'is_required,is_alphanumspace';
//            $this->set('fieldlist', $fieldlist);
//            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
//            if ($this->request->is('post') || $this->request->is('put')) {
//                $this->request->data['citizenregistration'] = $this->istrim($this->request->data['citizenregistration']);
//                $fieldlistnew = $this->modifycitizenregfieldlist($fieldlist, $this->request->data['citizenregistration']);
//                $errarr = $this->validatedata($this->request->data['citizenregistration'], $fieldlistnew);
//                if ($this->ValidationError($errarr)) {
//                    $demoupdate = $this->request->data['citizenregistration'];
//                    $reg_id = $demoupdate['reg_id'];
//                    $user_id = $demoupdate['user_id'];
//                    $contact_fname = $demoupdate['contact_fname'];
//                    $contact_mname = $demoupdate['contact_mname'];
//                    $contact_lname = $demoupdate['contact_lname'];
//                    $building = $demoupdate['building'];
//                    $street = $demoupdate['street'];
//                    $city = $demoupdate['city'];
//                    $pincode = $demoupdate['pincode'];
//                    $state_id = $demoupdate['state_id'];
//                    $district_id = $demoupdate['district_id'];
//                    $taluka_id = $demoupdate['taluka_id'];
//                    $office_id = $demoupdate['office_id'];
//                    $address = $demoupdate['address'];
//                    $email_id = $demoupdate['email_id'];
//                    $mobile_no = $demoupdate['mobile_no'];
//                    $id_type = $demoupdate['id_type'];
//                    $pan_no = $demoupdate['pan_no'];
//                    $uid = $demoupdate['uid'];
//                    $this->loadModel('citizenuserreg');
//                     $decuid= base64_encode($uid);
//                    $this->citizenuserreg->query("UPDATE ngdrstab_trn_usercitizen_registartion
//                            SET contact_fname = '$contact_fname', contact_mname = '$contact_mname', contact_lname = '$contact_lname',
//                            building = '$building',street = '$street',city ='$city' ,pincode = '$pincode',
//                            state_id =$state_id ,district_id =$district_id,taluka_id =$taluka_id ,office_id =$office_id ,
//                            address ='$address' ,email_id = '$email_id',mobile_no = '$mobile_no',id_type= $id_type,pan_no= '$pan_no',uid ='$decuid'
//                            WHERE reg_id =$reg_id");
//                    $full_name = $contact_fname . " " . $contact_mname . " " . $contact_lname;
//                    $this->CitizenUser->query("UPDATE ngdrstab_mst_user_citizen
//                            SET full_name = '$full_name',office_id =$office_id,mobile_no = '$mobile_no',email_id = '$email_id', state_id =$state_id where
//                            user_id =$user_id");
//                    
//                    
//                    
//                    $this->Session->setFlash(__('updated succesfully'));
//                    return $this->redirect(array('controller' => 'Masters', 'action' => 'sro_approve_deedwriter_all'));
//                }
//            }
//            if (!is_null($userid) && is_numeric($userid)) {
//                $demo = $this->CitizenUser->query("select ur.*,uc.*  from  ngdrstab_mst_user_citizen as uc,ngdrstab_trn_usercitizen_registartion 
//                                            as ur where uc.username=ur.user_name and uc.id=$userid");
//                
//                
//                $uid=$demo[0][0]['uid'];
//               $decuid= base64_decode($uid);
//                //$decuid=$this->dec($uid);
//              // pr($decuid);exit;
//              $demo[0][0]['uid']= $decuid;
//                $this->request->data['citizenregistration'] = $demo[0][0];
//                $demo1 = $demo[0][0];
//               // pr($demo1);exit;
//                $this->set('demo1', $demo1);
//            }
//        } catch (Exception $ex) {
//            pr($ex);exit;
//            $this->Session->setFlash(
//                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
//            );
//            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
//        }
//    }
//  public function sro_approve_deedwriter_all_edit($userid = NULL) {
//        try {
//            $this->loadModel('office');
//            $this->loadModel('empregistration');
//            $this->loadModel('id_type');
//            $this->loadModel('State');
//            $laug = $this->Session->read("sess_langauge");
//            if ($laug == NULL) {
//                $this->Session->write("sess_langauge", 'en');
//            }
//            $this->set('laug', $laug);
//
//            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_' . $laug), 'conditions' => array('filter_flag' => 'I'), 'order' => array('identificationtype_desc_en' => 'ASC')));
//            $this->set('idtype', $idtype);
//            $this->loadModel('State');
//            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_' . $laug), 'order' => array('state_name_en' => 'ASC')));
//            $this->set('State', $State);
//            $this->loadModel('division');
//
//            $division = $this->division->find('list', array('fields' => array('state_id', 'division_name_' . $laug), 'order' => array('division_name_en' => 'ASC')));
//            $this->set('division', $division);
//            $this->loadModel('District');
//            $this->set('district_id', NULL);
//
//
//            $this->loadModel('taluka');
//            $this->loadModel('office');
//            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_id' => 'ASC')));
//            $this->set('office', $office);
//            $this->set('taluka_id', NULL);
//
//
//            $this->loadModel('CitizenUser');
//            $this->loadModel('NGDRSErrorCode');
//            $result_codes = $this->NGDRSErrorCode->find("all");
//            $this->set('result_codes', $result_codes);
//            $allrule = $this->NGDRSErrorCode->query('select e.error_code ,e.pattern_rule_client ,e.error_messages_' . $laug . ' from ngdrstab_mst_errorcodes e, ngdrstab_mst_identificationtype i where e.error_code_id=i.error_code_id ');
//            $this->set('allrule', $allrule);
//            $fieldlist['citizen_type']['radio'] = 'is_i_n';
//            $fieldlist['contact_fname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
//            $fieldlist['contact_mname']['text'] = 'is_alphaspace,is_minmaxlength100';
//            $fieldlist['contact_lname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
//            $fieldlist['building']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
//            $fieldlist['street']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
//            $fieldlist['city']['text'] = 'is_alphaspace,is_minmaxlength100';
//            $fieldlist['pincode']['text'] = 'is_pincode_empty';
//            $fieldlist['state_id']['text'] = 'is_select_req';
//            $fieldlist['district_id']['text'] = 'is_select_req';
//            $fieldlist['taluka_id']['text'] = 'is_select_req';
//            $fieldlist['office_id']['text'] = 'is_select_req';
//            $fieldlist['email_id']['text'] = 'is_email';
//            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
//            $fieldlist['id_type']['select'] = 'is_select_req';
//            $fieldlist['uid']['text'] = 'is_required,is_uidnum';
//            $fieldlist['address']['text'] = 'is_required,is_alphanumspace';
//            $this->set('fieldlist', $fieldlist);
//            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
//            if ($this->request->is('post') || $this->request->is('put')) {
//
//
//                $this->request->data['citizenregistration'] = $this->istrim($this->request->data['citizenregistration']);
//                $fieldlistnew = $this->modifycitizenregfieldlist($fieldlist, $this->request->data['citizenregistration']);
//                $errarr = $this->validatedata($this->request->data['citizenregistration'], $fieldlistnew);
//                if ($this->ValidationError($errarr)) {
//                    $demoupdate = $this->request->data['citizenregistration'];
//                    $reg_id = $demoupdate['reg_id'];
//                    $user_id = $demoupdate['user_id'];
//                    $contact_fname = $demoupdate['contact_fname'];
//                    $contact_mname = $demoupdate['contact_mname'];
//                    $contact_lname = $demoupdate['contact_lname'];
//                    $building = $demoupdate['building'];
//                    $street = $demoupdate['street'];
//                    $city = $demoupdate['city'];
//                    $pincode = $demoupdate['pincode'];
//                    $state_id = $demoupdate['state_id'];
//                    $district_id = $demoupdate['district_id'];
//                    $taluka_id = $demoupdate['taluka_id'];
//                    $office_id = $demoupdate['office_id'];
//                    $address = $demoupdate['address'];
//                    $email_id = $demoupdate['email_id'];
//                    $mobile_no = $demoupdate['mobile_no'];
//                    $id_type = $demoupdate['id_type'];
//                    $pan_no = $demoupdate['pan_no'];
//                    $uid = $demoupdate['uid'];
//                    $this->loadModel('citizenuserreg');
//                    $this->citizenuserreg->query("UPDATE ngdrstab_trn_usercitizen_registartion
//                            SET contact_fname = '$contact_fname', contact_mname = '$contact_mname', contact_lname = '$contact_lname',
//                            building = '$building',street = '$street',city ='$city' ,pincode = '$pincode',
//                            state_id ='$state_id' ,district_id ='$district_id',taluka_id ='$taluka_id' ,office_id ='$office_id' ,
//                            address ='$address' ,email_id = '$email_id',mobile_no = '$mobile_no',id_type= '$id_type',pan_no= '$pan_no',uid ='$uid'
//                            WHERE reg_id =$reg_id");
//                    $full_name = $contact_fname . " " . $contact_mname . " " . $contact_lname;
//                    $this->CitizenUser->query("UPDATE ngdrstab_mst_user_citizen
//                            SET full_name = '$full_name',office_id =$office_id,mobile_no = '$mobile_no',email_id = '$email_id', state_id =$state_id where
//                            user_id =$user_id");
//                    $this->Session->setFlash(__('updated succesfully'));
//                    return $this->redirect(array('controller' => 'Masters', 'action' => 'sro_approve_deedwriter_all'));
//                }
//            }
//            if (!is_null($userid) && is_numeric($userid)) {
//                $demo = $this->CitizenUser->query("select ur.*,uc.*  from  ngdrstab_mst_user_citizen as uc,ngdrstab_trn_usercitizen_registartion 
//                                            as ur where uc.username=ur.user_name and uc.user_id=$userid");
//                $this->request->data['citizenregistration'] = $demo[0][0];
//                $demo1 = $demo[0][0];
//                $this->set('demo1', $demo1);
//                $state_id = $demo[0][0]['state_id'];
//                $district_id = $demo[0][0]['district_id'];
//                $District = $this->District->find('list', array('fields' => array('District.district_id', 'District.district_name_' . $laug), 'conditions' => array('state_id' => $state_id), 'order' => 'district_name_' . $laug));
//                $taluka = $this->taluka->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_' . $laug), 'conditions' => array('district_id' => $district_id), 'order' => 'taluka_name_' . $laug));
//            }
//            $this->set('taluka', $taluka);
//            $this->set('District', $District);
//        } catch (Exception $ex) {
////            pr($ex);
////            exit;
//            $this->Session->setFlash(
//                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
//            );
//            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
//        }
//    }
    public function sro_approve_deedwriter_all_edit($userid = NULL) {
        try {
            $this->loadModel('office');
            $this->loadModel('empregistration');
            $this->loadModel('id_type');
            $this->loadModel('State');
            $this->loadModel('citizenuserreg');
            $laug = $this->Session->read("sess_langauge");
            if ($laug == NULL) {
                $this->Session->write("sess_langauge", 'en');
            }
            $this->set('laug', $laug);

            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_' . $laug), 'conditions' => array('filter_flag' => 'I'), 'order' => array('identificationtype_desc_en' => 'ASC')));
            $this->set('idtype', $idtype);
            $this->loadModel('State');
            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_' . $laug), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);
            $this->loadModel('division');

            $division = $this->division->find('list', array('fields' => array('state_id', 'division_name_' . $laug), 'order' => array('division_name_en' => 'ASC')));
            $this->set('division', $division);
            $this->loadModel('District');
            $this->set('district_id', NULL);
            $this->loadModel('reg_type');
            $reg_type = $this->reg_type->find('list', array('fields' => array('id', 'type_name_' . $laug), 'order' => array('id' => 'ASC')));
            $this->set('reg_type', $reg_type);

            $this->loadModel('taluka');
            $this->loadModel('office');
            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_id' => 'ASC')));
            $this->set('office', $office);
            $this->set('taluka_id', NULL);


            $this->loadModel('CitizenUser');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $allrule = $this->NGDRSErrorCode->query('select e.error_code ,e.pattern_rule_client ,e.error_messages_' . $laug . ' from ngdrstab_mst_errorcodes e, ngdrstab_mst_identificationtype i where e.error_code_id=i.error_code_id ');
            $this->set('allrule', $allrule);
            $fieldlist['citizen_type']['radio'] = 'is_i_n';
            $fieldlist['contact_fname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
            $fieldlist['contact_mname']['text'] = 'is_alphaspace,is_minmaxlength100';
            $fieldlist['contact_lname']['text'] = 'is_required,is_alphaspace,is_maxlength100';
            $fieldlist['building']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
            $fieldlist['street']['text'] = 'is_alphanumspacecommaroundbrackets,is_minmaxlength100';
            $fieldlist['city']['text'] = 'is_alphaspace,is_minmaxlength100';
            $fieldlist['pincode']['text'] = 'is_pincode_empty';
            $fieldlist['state_id']['text'] = 'is_select_req';
            $fieldlist['district_id']['text'] = 'is_select_req';
            $fieldlist['taluka_id']['text'] = 'is_select_req';
            $fieldlist['office_id']['text'] = 'is_select_req';
            $fieldlist['email_id']['text'] = 'is_email';
            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
            $fieldlist['id_type']['select'] = 'is_select_req';
            $fieldlist['uid']['text'] = 'is_required,is_uidnum';
            $fieldlist['address']['text'] = 'is_required,is_alphanumspace';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post') || $this->request->is('put')) {


                $this->request->data['citizenregistration'] = $this->istrim($this->request->data['citizenregistration']);
                $fieldlistnew = $this->modifycitizenregfieldlist($fieldlist, $this->request->data['citizenregistration']);
                $errarr = $this->validatedata($this->request->data['citizenregistration'], $fieldlistnew);
                if ($this->ValidationError($errarr)) {
                    $demoupdate = $this->request->data['citizenregistration'];
                    $reg_id = $demoupdate['reg_id'];
                    $user_id = $demoupdate['user_id'];
                    $contact_fname = $demoupdate['contact_fname'];
                    $contact_mname = $demoupdate['contact_mname'];
                    $contact_lname = $demoupdate['contact_lname'];
                    $building = $demoupdate['building'];
                    $street = $demoupdate['street'];
                    $city = $demoupdate['city'];
                    $pincode = $demoupdate['pincode'];
                    $state_id = $demoupdate['state_id'];
                    $district_id = $demoupdate['district_id'];
                    $taluka_id = $demoupdate['taluka_id'];
                    $office_id = $demoupdate['office_id'];
                    $address = $demoupdate['address'];
                    $email_id = $demoupdate['email_id'];
                    $mobile_no = $demoupdate['mobile_no'];
                    $id_type = $demoupdate['id_type'];
                    $pan_no = $demoupdate['pan_no'];
                    $uid = $demoupdate['uid'];
                    $this->loadModel('citizenuserreg');
                    $decuid = base64_encode($uid);

                    if ($this->request->data['citizenregistration']['reg_type'] == 3) {
                        $is_advocate = 'Y';
                    } else {
                        $is_advocate = 'N';
                    }

                    if ($this->request->data['citizenregistration']['reg_type'] == 2) {
                        $deed_writer = 'Y';
                    } else {
                        $deed_writer = 'N';
                    }
                    if ($this->request->data['citizenregistration']['reg_type'] == 1) {
                        $deed_writer = 'N';
                        $is_advocate = 'N';
                    }
                    $this->citizenuserreg->query("UPDATE ngdrstab_trn_usercitizen_registartion
                            SET contact_fname = '$contact_fname', contact_mname = '$contact_mname', contact_lname = '$contact_lname',
                            building = '$building',street = '$street',city ='$city' ,pincode = '$pincode',
                            state_id ='$state_id' ,district_id ='$district_id',taluka_id ='$taluka_id' ,office_id ='$office_id' ,
                            address ='$address' ,email_id = '$email_id',mobile_no = '$mobile_no',id_type= '$id_type',pan_no= '$pan_no',uid ='$decuid',deed_writer  = '$deed_writer',
                            is_advocate = '$is_advocate'
                            WHERE reg_id =$reg_id");
                    $full_name = $contact_fname . " " . $contact_mname . " " . $contact_lname;
                    $this->CitizenUser->query("UPDATE ngdrstab_mst_user_citizen
                            SET full_name = '$full_name',office_id =$office_id,mobile_no = '$mobile_no',email_id = '$email_id', state_id =$state_id,
                              is_advocate = '$is_advocate',
                                is_advocate_accept_flag='$is_advocate',deed_writer='$deed_writer', deed_write_accept_flag = '$deed_writer'  
where
                            user_id =$user_id");
                    $this->Session->setFlash(__('lbleditmsg'));
                    return $this->redirect(array('controller' => 'Masters', 'action' => 'sro_approve_deedwriter_all'));
                }
            }
            if (!is_null($userid) && is_numeric($userid)) {
                $demo = $this->CitizenUser->query("select ur.*,uc.*  from  ngdrstab_mst_user_citizen as uc,ngdrstab_trn_usercitizen_registartion 
                                            as ur where uc.username=ur.user_name and uc.user_id=$userid");
                $uid = $demo[0][0]['uid'];
                $decuid = base64_decode($uid);
                $demo[0][0]['uid'] = $decuid;
                $is_advocate = $demo[0][0]['is_advocate'];
                $deed_writer = $demo[0][0]['deed_writer'];
                if ($is_advocate == 'Y') {
                    $demo[0][0]['reg_type'] = 3;
                }
                if ($deed_writer == 'Y') {
                    $demo[0][0]['reg_type'] = 2;
                }
                if ($is_advocate == 'Y' && $deed_writer == 'Y') {
                    $demo[0][0]['reg_type'] = 1;
                }
                $this->request->data['citizenregistration'] = $demo[0][0];
                $demo1 = $demo[0][0];
                $this->set('demo1', $demo1);
                $state_id = $demo[0][0]['state_id'];
                $district_id = $demo[0][0]['district_id'];
                $District = $this->District->find('list', array('fields' => array('District.district_id', 'District.district_name_' . $laug), 'conditions' => array('state_id' => $state_id), 'order' => 'district_name_' . $laug));
                $taluka = $this->taluka->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_' . $laug), 'conditions' => array('district_id' => $district_id), 'order' => 'taluka_name_' . $laug));
            }
            $this->set('taluka', $taluka);
            $this->set('District', $District);
        } catch (Exception $ex) {

            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function modifycitizenregfieldlist($fieldlist, $data) {
        if ($data['reg_type'] == 1) {
            unset($fieldlist['office_id']);
            unset($fieldlist['licence_no']);
            unset($fieldlist['name_of_bar']);
        }
        if ($data['reg_type'] == 2) {
            unset($fieldlist['name_of_bar']);
        }


        if (isset($data['citizen_type']) && $data['citizen_type'] == 'I') {
            unset($fieldlist['address']);
            // unset($fieldlist['office_id']);
        } elseif (isset($data['citizen_type']) && $data['citizen_type'] == 'N') {
            unset($fieldlist['building']);
            unset($fieldlist['street']);
            unset($fieldlist['city']);
            unset($fieldlist['state_id']);
            unset($fieldlist['office_id']);
            unset($fieldlist['district_id']);
            unset($fieldlist['taluka_id']);
            unset($fieldlist['uid']);
        }
        return $fieldlist;
    }

    public function regconfig() {
        try {
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('regconfig');
            $this->loadModel('mainlanguage');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $local_langauge = $this->mainlanguage->find('all', array('conditions' => array('state_id' => $stateid), 'order' => array('id' => 'ASC')));
            $this->set('language2', $local_langauge);

            $regconfig = $this->regconfig->query("select * from ngdrstab_conf_reg_bool_info where delete_flag='N'");
            $this->set('regconfig', $regconfig);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['regconfig']['csrftoken']);

                $this->request->data['regconfig']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['regconfig']['user_id'] = $this->Auth->User('user_id');
                //$this->request->data['regconfig']['created_date'] = date('Y/m/d H:i:s');
                $this->request->data['regconfig']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $this->request->data['regconfig']['is_boolean'] = $_POST['is_boolean'];
                $this->request->data['regconfig']['conf_bool_value'] = $_POST['conf_bool_value'];

                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
                if ($_POST['actiontype'] == '1') {
                    $check = $this->regconfig->query("SELECT MAX(reginfo_id) FROM ngdrstab_conf_reg_bool_info");
                    $reginfo_id = $check[0][0]['max'];
                    if ($reginfo_id != Null) {
                        $reginfo_id = $reginfo_id + 1;
                    } else {
                        $reginfo_id = 1;
                    }

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['regconfig']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $this->request->data['regconfig']['reginfo_id'] = $reginfo_id;
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->regconfig->save($this->request->data)) {
                        $this->Session->setFlash(__($actionvalue));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'regconfig'));
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'regconfig'));
                }
                if ($_POST['actiontype'] == '3') {
                    if ($_POST['hfid'] != NULL) {
                        $this->regconfig->id = $_POST['hfid'];
                        if ($this->regconfig->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'regconfig'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }

            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function english_lables() {

        try {
//            $path = WWW_ROOT . 'files/auth_let/' .'sdfg' . ".pdf";
            $this->autoRender = false;
            $path = APP . 'files/' . 'english_formlabels' . '.xls';

            if (file_exists($path)) {

                $this->response->file($path, array('download' => true, 'name' => 'code'));
                return $this->response->download('english_formlabels.xls');
            } else {
                echo $path . "<br>";
                echo 'file not find';
                exit;
            }

            return $this->response;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }

        //pr($file);//exit;

        /* $file='Formlables.csv';
          array_map(array($this, 'loadModel'), array('file_config', 'genernalinfoentry', 'office'));
          $pathbbb = $this->file_config->find('first', array('fields' => array('filepath')));
          $path = $pathbbb['file_config']['filepath'] . 'labels' . '/' .$file;
          if (isset($file) and $file != '') {
          if (file_exists($path)) {
          //echo $path;exit;
          $this->response->file($path, array('download' => true, 'name' => $file));
          return $this->response->download($file);
          }
          else{
          //echo '3';exit;
          return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
          }
          } */
    }

    public function delete_lables_list($nm = NULL) {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('State');
        $this->loadModel('currentstate');
        $this->loadModel('StateLanguage');
        $path = APP . 'files/' . $nm;
        $temp = explode(".", $nm);
        //pr($temp);
        $temp2 = explode("_", $temp[0]);
        $idd = $temp2[1];
        //pr($idd);
        //exit;   
        if (unlink($path)) {

            $this->mainlanguage->query("update ngdrstab_mst_language set labellist_name=null where id='$idd'");
            $this->Session->setFlash(
                    __('lbldeletemsg')
            );
            $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
        }
    }

    public function download_lables_list($nm = NULL) {
        //pr($nm);
        try {

            $this->autoRender = false;
            $path = APP . 'files/' . $nm;

            if (file_exists($path)) {

                $this->response->file($path, array('download' => true, 'name' => 'code'));
                return $this->response->download($nm);
            } else {
                echo $path . "<br>";
                echo 'file not find';
                exit;
            }

            return $this->response;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function config_language_OLD() {
        try {
            $this->check_role_escalation();
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $this->loadModel('State');
            $this->loadModel('currentstate');
            $this->loadModel('StateLanguage');

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            // pr($languagelist);


            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);


            // $statename = $this->State->find('list', array('fields' => array('State.state_id', 'State.state_name_en'), 'order' => array('State.state_name_en' => 'ASC')));
            // $this->set('statename', $statename);

            $curst = $this->currentstate->query('select s.state_id,s.state_name_en from ngdrs_current_state cs inner join ngdrstab_conf_admblock1_state s on s.state_id=cs.state_id');
            //pr($curst);
            $arrst = array();
            $sstid = $curst[0][0]['state_id'];
            $sstnm = $curst[0][0]['state_name_en'];
            $arrst[$sstid] = $sstnm;
            //pr($arrst);
            $this->set('statename', $arrst);
            //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'), 'order' => array('mainlanguage.language_name' => 'ASC')));
            //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'),'condition'=> array ('NOT' => array('mainlanguage.id' => array($cntarr))) ,'order' => array('mainlanguage.language_name' => 'ASC')));
            // $language = $this->mainlanguage->query('select mainlanguage.id,mainlanguage.language_name from ngdrstab_mst_language mainlanguage where mainlanguage.id not in (select language_id from ngdrstab_conf_language)');
            $language = $this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id!=1 and ml.id not in (select language_id from ngdrstab_conf_language)');
            //pr($language);
            $cntarr = array();
            for ($e = 0; $e < sizeof($language); $e++) {
                $iddd = $language[$e][0]['id'];
                $cntarr[$iddd] = $language[$e][0]['language_name'];
            }
            //pr($cntarr);

            $this->set('language', $cntarr);


            $Config_language = $this->language->query("select distinct a.state_id,a.language_id,a.id, b.state_name_en,c.language_name from ngdrstab_conf_language a
                                                               left outer join ngdrstab_conf_admblock1_state b on b.state_id=a.state_id
                                                               left outer join ngdrstab_mst_language c on c.id=a.language_id");
//            pr($Config_language);exit;

            $this->set('Config_language', $Config_language);

            $state_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
            $fieldlist = array();
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['language_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            //setting the error message to empty as it shows error at first time
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                //pr($this->request->data);exit;
                $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
                //pr($languagecount);exit;
                $cntcnt = $languagecount[0]['mainlanguage']['lang_count'];

                $conflanguagecount = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
                //pr($conflanguagecount);
                $confcntcnt = $conflanguagecount[0][0]['count'];
                //pr($confcntcnt);
                $addrec = $confcntcnt + 1;
                if ($addrec > $cntcnt) {
                    $this->Session->setFlash(
                            __('You have allowed to add only upto ' . $cntcnt . ' number of languages.')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                }
                //exit;

                $this->check_csrf_token($this->request->data['config_language']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['language']['req_ip'] = $this->request->clientIp();
                    $this->request->data['language']['user_id'] = $user_id;
                    // $this->request->data['language']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['language']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($state_count[0][0]['count'] == 6) {
                        $this->Session->setFlash(__('Maximum 6 Language are allowed.'));
                    } else {
                        $count = $this->language->query("select count(language_id) from ngdrstab_conf_language");
                        if ($count > 1) {
                            $this->Session->setFlash(__('Record already exist.'));
                        }
                        $this->request->data['config_language'] = $this->istrim($this->request->data['config_language']);
                        $errarr = $this->validatedata($this->request->data['config_language'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $a = $this->request->data['config_language']['language_id'];
                            $stateid = $this->Auth->User("state_id");
                            $up_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
                            $l_data = $this->language->find('list', array('fields' => array('id')));

                            if ($up_count[0][0]['count'] == 0) {
                                if ($a != 1) {
                                    $this->Session->setFlash(__("Please select English Language first."));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                } else {

                                    // $this->language->query("update ngdrstab_mst_language set language_code= 'en' where id=$a ");
                                }
                            }
                            /*
                              elseif ($up_count[0][0]['count'] == 1) {
                              $this->language->query("update ngdrstab_mst_language set language_code= 'll' where id=$a");
                              } elseif ($up_count[0][0]['count'] == 2) {
                              $this->language->query("update ngdrstab_mst_language set language_code= 'll1' where id=$a");
                              } elseif ($up_count[0][0]['count'] == 3) {
                              $this->language->query("update ngdrstab_mst_language set language_code= 'll2' where id=$a");
                              } elseif ($up_count[0][0]['count'] == 4) {
                              $this->language->query("update ngdrstab_mst_language set language_code= 'll3' where id=$a");
                              } elseif ($up_count[0][0]['count'] == 5) {
                              $this->language->query("update ngdrstab_mst_language set language_code= 'll4' where id=$a");
                              }
                             */
//                            pr($up_count);exit;
                            //  update mst lang - language code
                            $conflanguagecount_cnt = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
                            //pr($conflanguagecount);
                            $confcntcnt_cnt = $conflanguagecount_cnt[0][0]['count'];
                            //pr($confcntcnt_cnt);
                            if ($confcntcnt_cnt == 0) {
                                $uplang = 'll';
                                $upid = $this->request->data['config_language']['language_id'];
                                $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
                            } else if ($confcntcnt_cnt > 0) {

                                $uplang = 'll' . $confcntcnt_cnt;
                                // pr($uplang);
                                $upid = $this->request->data['config_language']['language_id'];
                                $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
                            }


                            $d_count = $this->language->query("select count(language_id) from ngdrstab_conf_language where language_id= $a and state_id= $stateid");
//                            pr($d_count);exit;
                            if ($d_count[0][0]['count'] > 0) {
                                $this->Session->setFlash(__('Record already exist.'));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                            } else {

                                if ($this->language->save($this->request->data['config_language'])) {


                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            }
                        }
                    }
                }
            }

            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function config_language() {
        try {

            //$this->check_role_escalation();
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $this->loadModel('State');
            $this->loadModel('currentstate');
            $this->loadModel('StateLanguage');

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $statecount = $this->currentstate->find('all');
            //pr($statecount);exit;
            $st_coun = count($statecount);
            if ($st_coun == 0) {
                $this->set('st_coun', $st_coun);
                //exit;
            } else {
                $this->set('st_coun', $st_coun);


                $statelng = $this->StateLanguage->query("select * from ngdrstab_mst_state_language where state_id='$stateid' and language_id!=1");
                $cntstatelang = count($statelng);


                $languagecount_n = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
                $cntcnt_n = $languagecount_n[0]['mainlanguage']['lang_count'];

                /* if($cntstatelang!=0)
                  {
                  if($cntcnt_n==null || $cntcnt_n==0 || $cntcnt_n==NULL || $cntcnt_n==''){
                  $this->Session->setFlash(
                  __('Please first enter Language count for State first')
                  );
                  $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
                  }
                  } */

                $created_date = date('Y/m/d H:i:s');

                $this->set('actiontypeval', NULL);
                $this->set('hfid', NULL);
                $this->set('hfupdateflag', NULL);
                $this->set('hfactionval', NULL);
                $this->loadModel('NGDRSErrorCode');
                $result_codes = $this->NGDRSErrorCode->find("all");
                $this->set('result_codes', $result_codes);
                $this->loadModel('language');
                $this->loadModel('mainlanguage');
                //languages are loaded firstly from config (from table)
                $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                        array(
                            'table' => 'ngdrstab_conf_language',
                            'alias' => 'conf',
                            'type' => 'inner',
                            'foreignKey' => false,
                            'conditions' => array('conf.language_id = mainlanguage.id')
                        )), 'order' => 'conf.language_id ASC'
                ));
                $this->set('languagelist', $languagelist);
                // pr($languagelist);


                $laug = $this->Session->read("sess_langauge");
                $this->set('laug', $laug);


                // $statename = $this->State->find('list', array('fields' => array('State.state_id', 'State.state_name_en'), 'order' => array('State.state_name_en' => 'ASC')));
                // $this->set('statename', $statename);

                $curst = $this->currentstate->query('select cs.skip_flag,s.state_id,s.state_name_en from ngdrs_current_state cs inner join ngdrstab_conf_admblock1_state s on s.state_id=cs.state_id');
                //pr($curst);
                $arrst = array();
                $sstid = $curst[0][0]['state_id'];
                $sstnm = $curst[0][0]['state_name_en'];
                $skpflag = $curst[0][0]['skip_flag'];
                $arrst[$sstid] = $sstnm;
                //pr($arrst);
                $this->set('statename', $arrst);
                $this->set('skpflag', $skpflag);
                //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'), 'order' => array('mainlanguage.language_name' => 'ASC')));
                //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'),'condition'=> array ('NOT' => array('mainlanguage.id' => array($cntarr))) ,'order' => array('mainlanguage.language_name' => 'ASC')));
                // $language = $this->mainlanguage->query('select mainlanguage.id,mainlanguage.language_name from ngdrstab_mst_language mainlanguage where mainlanguage.id not in (select language_id from ngdrstab_conf_language)');
                //$language=$this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id!=1 and ml.id not in (select language_id from ngdrstab_conf_language)');

                if ($cntcnt_n == null || $cntcnt_n == 0 || $cntcnt_n == NULL || $cntcnt_n == '') {
                    $language = $this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id=0 and ml.id not in (select language_id from ngdrstab_conf_language)');
                } else {
                    $language = $this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id!=1 and ml.id not in (select language_id from ngdrstab_conf_language)');
                }

                //pr($language);
                $cntarr = array();
                for ($e = 0; $e < sizeof($language); $e++) {
                    $iddd = $language[$e][0]['id'];
                    $cntarr[$iddd] = $language[$e][0]['language_name'];
                }
                //pr($cntarr);

                $this->set('language', $cntarr);


                $Config_language = $this->language->query("select distinct a.state_id,a.language_id,a.id, b.state_name_en,c.language_name,labellist_name from ngdrstab_conf_language a
                                                               left outer join ngdrstab_conf_admblock1_state b on b.state_id=a.state_id
                                                               left outer join ngdrstab_mst_language c on c.id=a.language_id order by a.language_id");
//          pr($Config_language);exit;

                $this->set('Config_language', $Config_language);

                $state_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
                $fieldlist = array();
                $fieldlist['language_id']['select'] = 'is_required';
                $this->set('fieldlist', $fieldlist);
                $this->set('result_codes', $this->getvalidationruleset($fieldlist));
                // pr($fieldlist);
                //setting the error message to empty as it shows error at first time



                if ($this->request->is('post')) {
                    //pr($this->request->data);//exit;
                    $lngidd = $this->request->data['config_language']['language_id'];
                    /* if($lngidd==NULL || $lngidd==null || $lngidd==0){
                      $this->Session->setFlash(
                      __('You have not selected any language')
                      );
                      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                      } */
                    //exit;
                    //  pr($Config_language);
                    for ($r = 0; $r < count($Config_language); $r++) {
                        $lngcd = $Config_language[$r][0]['language_id'];
                        if ($lngcd != 1) {
                            $lbl = 'label_' . $lngcd;
                            if (isset($this->request->data['config_language'][$lbl])) {

                                $file = $this->request->data['config_language'][$lbl];

                                $temp = explode(".", $file['name']);

                                $xtn = $temp[1];

                                $arr_ext = array('xls', 'csv'); //set allowed extensions
                                if (in_array($xtn, $arr_ext)) {

                                    //$newfilename=$lbl.'.' . end($temp);
                                    $newfilename = $lbl . '.xls';


                                    if (move_uploaded_file($file['tmp_name'], APP . 'files/' . DS . $newfilename)) {


                                        $path = APP . 'files/' . $newfilename;

                                        ///////////////////////////////////////
                                        $this->mainlanguage->query("update ngdrstab_mst_language set labellist_name='$newfilename' where id='$lngcd'");


                                        $this->Session->setFlash(
                                                __('File Uploaded Successfully.')
                                        );
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                    }
                                } else {
                                    $this->Session->setFlash(
                                            __('File Format not Supported; only xls & csv file formats are allowed.')
                                    );
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                }
                            }
                        }
                    }


                    if ($lngidd == NULL || $lngidd == null || $lngidd == 0) {
                        $this->Session->setFlash(
                                __('You have not selected any language')
                        );
                        $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                    }

                    $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
                    //pr($languagecount);exit;
                    $cntcnt = $languagecount[0]['mainlanguage']['lang_count'];

                    $conflanguagecount = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
                    //pr($conflanguagecount);
                    $confcntcnt = $conflanguagecount[0][0]['count'];
                    //pr($confcntcnt);
                    $addrec = $confcntcnt + 1;
                    if ($addrec > $cntcnt) {
                        $this->Session->setFlash(
                                __('You have allowed to add only upto ' . $cntcnt . ' number of languages.')
                        );
                        $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                    }
                    //exit;

                    $this->check_csrf_token($this->request->data['config_language']['csrftoken']);
                    $actiontype = $_POST['actiontype'];
                    $hfactionval = $_POST['hfaction'];
                    $hfid = $_POST['hfid'];
                    $this->set('hfid', $hfid);
                    if ($actiontype == '1') {
                        $this->set('actiontypeval', $actiontype);
                        $this->set('hfactionval', $hfactionval);
                    }
                    if ($hfactionval == 'S') {
                        $this->request->data['language']['req_ip'] = $this->request->clientIp();
                        $this->request->data['language']['user_id'] = $user_id;
                        // $this->request->data['language']['created_date'] = $created_date;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['language']['id'] = $this->request->data['hfid'];

                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($state_count[0][0]['count'] == 6) {
                            $this->Session->setFlash(__('Maximum 6 Language are allowed.'));
                        } else {
                            $count = $this->language->query("select count(language_id) from ngdrstab_conf_language");
                            if ($count > 1) {
                                $this->Session->setFlash(__('Record already exist.'));
                            }
                            $this->request->data['config_language'] = $this->istrim($this->request->data['config_language']);
                            $errarr = $this->validatedata($this->request->data['config_language'], $fieldlist);
                            // pr($errarr);exit;
                            $flag = 0;
                            foreach ($errarr as $dd) {
                                if ($dd != "") {
                                    $flag = 1;
                                }
                            }
                            if ($flag == 1) {
                                $this->set("errarr", $errarr);
                            } else {
                                $a = $this->request->data['config_language']['language_id'];
                                $stateid = $this->Auth->User("state_id");
                                $up_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
                                $l_data = $this->language->find('list', array('fields' => array('id')));

                                if ($up_count[0][0]['count'] == 0) {
                                    if ($a != 1) {
                                        $this->Session->setFlash(__("Please select English Language first."));
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                    } else {

                                        // $this->language->query("update ngdrstab_mst_language set language_code= 'en' where id=$a ");
                                    }
                                }
                                /*
                                  elseif ($up_count[0][0]['count'] == 1) {
                                  $this->language->query("update ngdrstab_mst_language set language_code= 'll' where id=$a");
                                  } elseif ($up_count[0][0]['count'] == 2) {
                                  $this->language->query("update ngdrstab_mst_language set language_code= 'll1' where id=$a");
                                  } elseif ($up_count[0][0]['count'] == 3) {
                                  $this->language->query("update ngdrstab_mst_language set language_code= 'll2' where id=$a");
                                  } elseif ($up_count[0][0]['count'] == 4) {
                                  $this->language->query("update ngdrstab_mst_language set language_code= 'll3' where id=$a");
                                  } elseif ($up_count[0][0]['count'] == 5) {
                                  $this->language->query("update ngdrstab_mst_language set language_code= 'll4' where id=$a");
                                  }
                                 */
//                            pr($up_count);exit;
                                //  update mst lang - language code
                                $conflanguagecount_cnt = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
                                //pr($conflanguagecount);
                                $confcntcnt_cnt = $conflanguagecount_cnt[0][0]['count'];
                                //pr($confcntcnt_cnt);
                                if ($confcntcnt_cnt == 0) {
                                    $uplang = 'll';
                                    $upid = $this->request->data['config_language']['language_id'];
                                    $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
                                } else if ($confcntcnt_cnt > 0) {

                                    $uplang = 'll' . $confcntcnt_cnt;
                                    // pr($uplang);
                                    $upid = $this->request->data['config_language']['language_id'];
                                    $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
                                }


                                $d_count = $this->language->query("select count(language_id) from ngdrstab_conf_language where language_id= $a and state_id= $stateid");
//                            pr($d_count);exit;
                                if ($d_count[0][0]['count'] > 0) {
                                    $this->Session->setFlash(__('Record already exist.'));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                } else {

                                    if ($this->language->save($this->request->data['config_language'])) {


                                        $this->Session->setFlash(__($actionvalue));
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                                    } else {
                                        $this->Session->setFlash(__('lblnotsavemsg'));
                                    }
                                }
                            }
                        }
                    }
                }

                $this->set_unicode_regex();
                $this->set_csrf_token();
                $this->Session->write("randamkey", rand(111111, 999999));
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function config_language_count() {
        $this->loadModel('language');
        $Config_language = $this->language->query("select distinct a.state_id,a.language_id,a.id, b.state_name_en,c.language_name,labellist_name from ngdrstab_conf_language a
                                                               left outer join ngdrstab_conf_admblock1_state b on b.state_id=a.state_id
                                                               left outer join ngdrstab_mst_language c on c.id=a.language_id order by a.language_id");
        return count($Config_language);
    }

    //commented on 27 jan
    /*
      public function config_language() {
      try {

      $this->check_role_escalation();
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('State');
      $this->loadModel('currentstate');
      $this->loadModel('StateLanguage');



      $languagecount_n = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
      $cntcnt_n=$languagecount_n[0]['mainlanguage']['lang_count'];
      //pr($cntcnt_n);


      $user_id = $this->Auth->User("user_id");
      $stateid = $this->Auth->User("state_id");
      $created_date = date('Y/m/d H:i:s');

      $this->set('actiontypeval', NULL);
      $this->set('hfid', NULL);
      $this->set('hfupdateflag', NULL);
      $this->set('hfactionval', NULL);
      $this->loadModel('NGDRSErrorCode');
      $result_codes = $this->NGDRSErrorCode->find("all");
      $this->set('result_codes', $result_codes);
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      //languages are loaded firstly from config (from table)

      $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
      array(
      'table' => 'ngdrstab_conf_language',
      'alias' => 'conf',
      'type' => 'inner',
      'foreignKey' => false,
      'conditions' => array('conf.language_id = mainlanguage.id')
      )), 'order' => 'conf.language_id ASC'
      ));

      $this->set('languagelist', $languagelist);
      // pr($languagelist);


      $laug = $this->Session->read("sess_langauge");
      $this->set('laug', $laug);


      // $statename = $this->State->find('list', array('fields' => array('State.state_id', 'State.state_name_en'), 'order' => array('State.state_name_en' => 'ASC')));
      // $this->set('statename', $statename);

      $curst=$this->currentstate->query('select cs.skip_flag,s.state_id,s.state_name_en from ngdrs_current_state cs inner join ngdrstab_conf_admblock1_state s on s.state_id=cs.state_id');
      //pr($curst);
      $arrst=array();
      $sstid=$curst[0][0]['state_id'];
      $sstnm=$curst[0][0]['state_name_en'];
      $skpflag=$curst[0][0]['skip_flag'];
      $arrst[$sstid]=$sstnm;
      //pr($arrst);
      $this->set('statename', $arrst);
      $this->set('skpflag', $skpflag);

      //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'), 'order' => array('mainlanguage.language_name' => 'ASC')));
      //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'),'condition'=> array ('NOT' => array('mainlanguage.id' => array($cntarr))) ,'order' => array('mainlanguage.language_name' => 'ASC')));
      // $language = $this->mainlanguage->query('select mainlanguage.id,mainlanguage.language_name from ngdrstab_mst_language mainlanguage where mainlanguage.id not in (select language_id from ngdrstab_conf_language)');
      if($cntcnt_n==null || $cntcnt_n==0 || $cntcnt_n==NULL || $cntcnt_n==''){
      $language=$this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id=0 and ml.id not in (select language_id from ngdrstab_conf_language)');
      }
      else{
      $language=$this->mainlanguage->query('select ml.id,ml.language_name from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrs_current_state cs on sl.state_id=cs.state_id where ml.id!=1 and ml.id not in (select language_id from ngdrstab_conf_language)');
      }
      //pr($language);
      $cntarr=array();
      for($e=0;$e<sizeof($language);$e++){
      $iddd=$language[$e][0]['id'];
      $cntarr[$iddd]=$language[$e][0]['language_name'];
      }
      //pr($cntarr);

      $this->set('language', $cntarr);


      $Config_language = $this->language->query("select distinct a.state_id,a.language_id,a.id, b.state_name_en,c.language_name,labellist_name from ngdrstab_conf_language a
      left outer join ngdrstab_conf_admblock1_state b on b.state_id=a.state_id
      left outer join ngdrstab_mst_language c on c.id=a.language_id order by a.language_id");
      //          pr($Config_language);exit;

      $this->set('Config_language', $Config_language);

      $state_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
      $fieldlist = array();
      $fieldlist['state_id']['select'] = 'is_select_req';
      //$fieldlist['language_id']['select'] = 'is_select_req';
      $this->set('fieldlist', $fieldlist);
      //setting the error message to empty as it shows error at first time
      foreach ($fieldlist as $key => $valrule) {
      $errarr[$key . '_error'] = "";
      }
      $this->set("errarr", $errarr);
      if ($this->request->is('post')) {
      // pr($this->request->data);



      //  pr($Config_language);
      for($r=0;$r<count($Config_language);$r++){
      $lngcd=$Config_language[$r][0]['language_id'];
      if($lngcd!=1){
      $lbl='label_'.$lngcd;
      if(isset($this->request->data['config_language'][$lbl])){
      //pr($lbl);

      //exit;
      $file=$this->request->data['config_language'][$lbl];
      $temp = explode(".", $file['name']);
      //$newfilename=$lbl.'.' . end($temp);
      $newfilename=$lbl.'.xls';
      if (move_uploaded_file($file['tmp_name'], APP . 'files/' . DS . $newfilename)) {

      // $file['name'] = 'state_logos_img/' . $newfilename;
      //prepare the filename for database entry
      // $this->request->data['config_state']['logo_path'] = $file['name'];
      // $filenm=$file['name'];


      //$newfilename='temp.xls';

      $path = APP . 'files/' . $newfilename;
      pr($path);

      // code - import data
      /*
      $excel = new Spreadsheet_Excel_Reader();

      $excel->setOutputEncoding('CP1251');
      $excel->read($path);
      echo "Number of sheets: " . sizeof($excel->sheets) . "\n";
      $sheet1_no = $excel->sheets[0]["numRows"];
      echo 'rows:'.$sheet1_no;
      $sheet1_no_cols = $excel->sheets[0]["numCols"];
      echo 'cols:'.$sheet1_no_cols;

      for ($i = 2; $i <= $sheet1_no; $i++) {
      // pr($excel->sheets[0]['cells'][$i]);
      $id = $excel->sheets[0]['cells'][$i][1];
      $lblname = $excel->sheets[0]['cells'][$i][2];
      if(isset($excel->sheets[0]['cells'][$i][3]))
      $lblstname = $excel->sheets[0]['cells'][$i][3];
      else
      $lblstname='';
      echo '<br>';
      echo $id.'---'.$lblname.'---'.$lblstname;
      }

      exit;

     */
    ///////////////////////////////////////
    /*  $this->mainlanguage->query("update ngdrstab_mst_language set labellist_name='$newfilename' where id='$lngcd'");


      $this->Session->setFlash(
      __('File Uploaded Successfully.')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));


      }

      }
      }
      }
      //exit;
      $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
      //pr($languagecount);exit;
      $cntcnt=$languagecount[0]['mainlanguage']['lang_count'];

      $conflanguagecount = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
      //pr($conflanguagecount);
      $confcntcnt=$conflanguagecount[0][0]['count'];
      //pr($confcntcnt);
      $addrec=$confcntcnt+1;
      if($addrec>$cntcnt){
      $this->Session->setFlash(
      __('You have allowed to add only upto '.$cntcnt.' number of languages.')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      }
      //exit;

      $this->check_csrf_token($this->request->data['config_language']['csrftoken']);
      $actiontype = $_POST['actiontype'];
      $hfactionval = $_POST['hfaction'];
      $hfid = $_POST['hfid'];
      $this->set('hfid', $hfid);
      if ($actiontype == '1') {
      $this->set('actiontypeval', $actiontype);
      $this->set('hfactionval', $hfactionval);
      }
      if ($hfactionval == 'S') {
      $this->request->data['language']['req_ip'] = $this->request->clientIp();
      $this->request->data['language']['user_id'] = $user_id;
      // $this->request->data['language']['created_date'] = $created_date;
      if ($this->request->data['hfupdateflag'] == 'Y') {
      $this->request->data['language']['id'] = $this->request->data['hfid'];

      $actionvalue = "lbleditmsg";
      } else {
      $actionvalue = "lblsavemsg";
      }
      if ($state_count[0][0]['count'] == 6) {
      $this->Session->setFlash(__('Maximum 6 Language are allowed.'));
      } else {
      $count = $this->language->query("select count(language_id) from ngdrstab_conf_language");
      if ($count > 1) {
      $this->Session->setFlash(__('Record already exist.'));
      }
      $this->request->data['config_language'] = $this->istrim($this->request->data['config_language']);
      $errarr = $this->validatedata($this->request->data['config_language'], $fieldlist);
      $flag = 0;
      foreach ($errarr as $dd) {
      if ($dd != "") {
      $flag = 1;
      }
      }
      if ($flag == 1) {
      $this->set("errarr", $errarr);
      } else {
      $a = $this->request->data['config_language']['language_id'];
      $stateid = $this->Auth->User("state_id");
      $up_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
      $l_data = $this->language->find('list', array('fields' => array('id')));

      if ($up_count[0][0]['count'] == 0) {
      if ($a != 1) {
      $this->Session->setFlash(__("Please select English Language first."));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {

      // $this->language->query("update ngdrstab_mst_language set language_code= 'en' where id=$a ");
      }
      }
      /*
      elseif ($up_count[0][0]['count'] == 1) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll' where id=$a");
      } elseif ($up_count[0][0]['count'] == 2) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll1' where id=$a");
      } elseif ($up_count[0][0]['count'] == 3) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll2' where id=$a");
      } elseif ($up_count[0][0]['count'] == 4) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll3' where id=$a");
      } elseif ($up_count[0][0]['count'] == 5) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll4' where id=$a");
      }
     */
//                            pr($up_count);exit;
    //  update mst lang - language code
    /* $conflanguagecount_cnt = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
      //pr($conflanguagecount);
      $confcntcnt_cnt=$conflanguagecount_cnt[0][0]['count'];
      //pr($confcntcnt_cnt);
      if($confcntcnt_cnt==0)
      {
      $uplang='ll';
      $upid=$this->request->data['config_language']['language_id'];
      $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
      }
      else if($confcntcnt_cnt>0){

      $uplang='ll'.$confcntcnt_cnt;
      // pr($uplang);
      $upid=$this->request->data['config_language']['language_id'];
      $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
      }


      $d_count = $this->language->query("select count(language_id) from ngdrstab_conf_language where language_id= $a and state_id= $stateid");
      //                            pr($d_count);exit;
      if ($d_count[0][0]['count'] > 0) {
      $this->Session->setFlash(__('Record already exist.'));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {

      if ($this->language->save($this->request->data['config_language'])) {


      $this->Session->setFlash(__($actionvalue));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {
      $this->Session->setFlash(__('lblnotsavemsg'));
      }

      }
      }
      }
      }
      }

      $this->set_csrf_token();
      $this->Session->write("randamkey", rand(111111, 999999));
      } catch (Exception $ex) {
      $this->Session->setFlash(
      __('Record Cannot be displayed. Error :' . $ex->getMessage())
      );
      return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
      }
      }
     */
    /* public function config_language() {
      try {
      $this->check_role_escalation();
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('State');

      $user_id = $this->Auth->User("user_id");
      $stateid = $this->Auth->User("state_id");
      $created_date = date('Y/m/d H:i:s');

      $this->set('actiontypeval', NULL);
      $this->set('hfid', NULL);
      $this->set('hfupdateflag', NULL);
      $this->set('hfactionval', NULL);
      $this->loadModel('NGDRSErrorCode');
      $result_codes = $this->NGDRSErrorCode->find("all");
      $this->set('result_codes', $result_codes);
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      //languages are loaded firstly from config (from table)
      $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
      array(
      'table' => 'ngdrstab_conf_language',
      'alias' => 'conf',
      'type' => 'inner',
      'foreignKey' => false,
      'conditions' => array('conf.language_id = mainlanguage.id')
      )), 'order' => 'conf.language_id ASC'
      ));
      $this->set('languagelist', $languagelist);
      // pr($languagelist);


      $laug = $this->Session->read("sess_langauge");
      $this->set('laug', $laug);


      $statename = $this->State->find('list', array('fields' => array('State.state_id', 'State.state_name_en'), 'order' => array('State.state_name_en' => 'ASC')));
      $this->set('statename', $statename);

      //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'), 'order' => array('mainlanguage.language_name' => 'ASC')));
      //$language = $this->mainlanguage->find('list', array('fields' => array('mainlanguage.id', 'mainlanguage.language_name'),'condition'=> array ('NOT' => array('mainlanguage.id' => array($cntarr))) ,'order' => array('mainlanguage.language_name' => 'ASC')));
      $language = $this->mainlanguage->query('select mainlanguage.id,mainlanguage.language_name from ngdrstab_mst_language mainlanguage where mainlanguage.id not in (select language_id from ngdrstab_conf_language)');
      $cntarr=array();
      for($e=0;$e<sizeof($language);$e++){
      $iddd=$language[$e][0]['id'];
      $cntarr[$iddd]=$language[$e][0]['language_name'];
      }
      //pr($cntarr);

      $this->set('language', $cntarr);


      $Config_language = $this->language->query("select distinct a.state_id,a.language_id,a.id, b.state_name_en,c.language_name from ngdrstab_conf_language a
      left outer join ngdrstab_conf_admblock1_state b on b.state_id=a.state_id
      left outer join ngdrstab_mst_language c on c.id=a.language_id");
      //            pr($Config_language);exit;

      $this->set('Config_language', $Config_language);

      $state_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
      $fieldlist = array();
      $fieldlist['state_id']['select'] = 'is_select_req';
      $fieldlist['language_id']['select'] = 'is_select_req';
      $this->set('fieldlist', $fieldlist);
      //setting the error message to empty as it shows error at first time
      foreach ($fieldlist as $key => $valrule) {
      $errarr[$key . '_error'] = "";
      }
      $this->set("errarr", $errarr);
      if ($this->request->is('post')) {
      //pr($this->request->data);exit;
      $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
      //pr($languagecount);exit;
      $cntcnt=$languagecount[0]['mainlanguage']['lang_count'];

      $conflanguagecount = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
      //pr($conflanguagecount);
      $confcntcnt=$conflanguagecount[0][0]['count'];
      //pr($confcntcnt);
      $addrec=$confcntcnt+1;
      if($addrec>$cntcnt){
      $this->Session->setFlash(
      __('You have allowed to add only upto '.$cntcnt.' number of languages.')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      }
      //exit;

      $this->check_csrf_token($this->request->data['config_language']['csrftoken']);
      $actiontype = $_POST['actiontype'];
      $hfactionval = $_POST['hfaction'];
      $hfid = $_POST['hfid'];
      $this->set('hfid', $hfid);
      if ($actiontype == '1') {
      $this->set('actiontypeval', $actiontype);
      $this->set('hfactionval', $hfactionval);
      }
      if ($hfactionval == 'S') {
      $this->request->data['language']['req_ip'] = $this->request->clientIp();
      $this->request->data['language']['user_id'] = $user_id;
      // $this->request->data['language']['created_date'] = $created_date;
      if ($this->request->data['hfupdateflag'] == 'Y') {
      $this->request->data['language']['id'] = $this->request->data['hfid'];

      $actionvalue = "lbleditmsg";
      } else {
      $actionvalue = "lblsavemsg";
      }
      if ($state_count[0][0]['count'] == 6) {
      $this->Session->setFlash(__('Maximum 6 Language are allowed.'));
      } else {
      $count = $this->language->query("select count(language_id) from ngdrstab_conf_language");
      if ($count > 1) {
      $this->Session->setFlash(__('Record already exist.'));
      }
      $this->request->data['config_language'] = $this->istrim($this->request->data['config_language']);
      $errarr = $this->validatedata($this->request->data['config_language'], $fieldlist);
      $flag = 0;
      foreach ($errarr as $dd) {
      if ($dd != "") {
      $flag = 1;
      }
      }
      if ($flag == 1) {
      $this->set("errarr", $errarr);
      } else {
      $a = $this->request->data['config_language']['language_id'];
      $stateid = $this->Auth->User("state_id");
      $up_count = $this->language->query("select count(state_id) from ngdrstab_conf_language");
      $l_data = $this->language->find('list', array('fields' => array('id')));

      if ($up_count[0][0]['count'] == 0) {
      if ($a != 1) {
      $this->Session->setFlash(__("Please select English Language first."));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {

      // $this->language->query("update ngdrstab_mst_language set language_code= 'en' where id=$a ");
      }
      }
      /*
      elseif ($up_count[0][0]['count'] == 1) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll' where id=$a");
      } elseif ($up_count[0][0]['count'] == 2) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll1' where id=$a");
      } elseif ($up_count[0][0]['count'] == 3) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll2' where id=$a");
      } elseif ($up_count[0][0]['count'] == 4) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll3' where id=$a");
      } elseif ($up_count[0][0]['count'] == 5) {
      $this->language->query("update ngdrstab_mst_language set language_code= 'll4' where id=$a");
      }
     */
//                            pr($up_count);exit;
    //  update mst lang - language code
    /*
      $conflanguagecount_cnt = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
      //pr($conflanguagecount);
      $confcntcnt_cnt=$conflanguagecount_cnt[0][0]['count'];
      //pr($confcntcnt_cnt);
      if($confcntcnt_cnt==0)
      {
      $uplang='ll';
      $upid=$this->request->data['config_language']['language_id'];
      $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
      }
      else if($confcntcnt_cnt>0){

      $uplang='ll'.$confcntcnt_cnt;
      // pr($uplang);
      $upid=$this->request->data['config_language']['language_id'];
      $this->language->query("update ngdrstab_mst_language set language_code= '$uplang' where id=$upid");
      }


      $d_count = $this->language->query("select count(language_id) from ngdrstab_conf_language where language_id= $a and state_id= $stateid");
      //                            pr($d_count);exit;
      if ($d_count[0][0]['count'] > 0) {
      $this->Session->setFlash(__('Record already exist.'));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {

      if ($this->language->save($this->request->data['config_language'])) {


      $this->Session->setFlash(__($actionvalue));
      $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
      } else {
      $this->Session->setFlash(__('lblnotsavemsg'));
      }

      }
      }
      }
      }
      }

      $this->set_csrf_token();
      $this->Session->write("randamkey", rand(111111, 999999));
      } catch (Exception $ex) {
      $this->Session->setFlash(
      __('Record Cannot be displayed. Error :' . $ex->getMessage())
      );
      return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
      }
      } */

    public function config_language_delete($id = null, $lang_id = null) {
        $this->autoRender = false;
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                $this->language()->id = $id;

                if ($this->language->delete($id)) {

                    $this->mainlanguage->query("update ngdrstab_mst_language set language_code=NULL where id=$lang_id");
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'config_language'));
                }
            }
        } catch (exception $ex) {
            
        }
    }

    public function language() {
        try {
            $this->loadModel('mainlanguage');
            $this->loadModel('User');
            $this->loadModel('state');
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $ip = $_SERVER['REMOTE_ADDR'];
            //  $created_date = date('Y/m/d H:i:s');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);

            $language = $this->mainlanguage->query("select a.id, a.language_name,a.lang_code from ngdrstab_mst_language a");
            $this->set('language', $language);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['mainlanguage']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $duplicateflag = 'S';
                    $this->request->data['mainlanguage']['req_ip'] = $ip;
                    $this->request->data['mainlanguage']['user_id'] = $user_id;
                    //  $this->request->data['mainlanguage']['created_date'] = $created_date;
                    $this->request->data['mainlanguage']['state_id'] = $stateid;

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['mainlanguage']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $duplicate['Table'] = 'ngdrstab_mst_language';
                    $duplicate['Fields'] = array('language_name', 'lang_code');
                    $duplicate['Action'] = $duplicateflag; //U    
                    $duplicate['PrimaryKey'] = 'id';
                    $checkd = $this->check_duplicate($duplicate, $this->request->data['mainlanguage']);
                    if ($checkd) {
                        if ($this->mainlanguage->save($this->request->data['mainlanguage'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'language'));
                            $this->set('unitrecord', $this->mainlanguage->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    } else {
                        $this->Session->setFlash(__('lblduplicatemsg'));
                    }
                }
                if ($actiontype == '3') {
                    if ($_POST['hfid'] != NULL) {
                        $this->mainlanguage->id = $_POST['hfid'];
                        if ($this->mainlanguage->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'language'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function officeshift() {
        try {

            $this->loadModel('officeshift');
            $this->loadModel('State');
            $this->loadModel('User');
            $user_id = $this->Auth->User("user_id");
            $this->set('hfupdateflag', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $created_date = date('Y/m/d H:i:s');
            $stateid = $this->Auth->User("state_id");
            $ip = $_SERVER['REMOTE_ADDR'];
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $officeshift = $this->officeshift->find("all");
            $this->set('officeshift', $officeshift);
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));

            $this->set('languagelist', $languagelist);
            $fieldlist = array();

            $fieldlist['from_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['to_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['lunch_from_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['lunch_to_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['tatkal_from_time']['text'] = 'is_required,is_numbercolon';

            $fieldlist['tatkal_from_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['tatkal_to_time']['text'] = 'is_required,is_numbercolon';

            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }

            $fieldlist['tatkal_days']['text'] = 'is_required,is_integer';
            $fieldlist['appnt_from_time']['text'] = 'is_required,is_numbercolon';
            $fieldlist['appnt_to_time']['text'] = 'is_required,is_numbercolon';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.

            if ($this->request->is('post')) {
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $check = $this->officeshift->query("SELECT MAX(shift_id) FROM ngdrstab_mst_officeshifttime");
                    $shift_id = $check[0][0]['max'];
                    if ($shift_id != Null) {
                        $shift_id = $shift_id + 1;
                    } else {
                        $shift_id = 1;
                    }
                    if ($hfactionval == 'S') {
                        $this->request->data['officeshift']['req_ip'] = $ip;
                        $this->request->data['officeshift']['user_id'] = $user_id;
                        //  $this->request->data['mainlanguage']['created_date'] = $created_date;
                        $this->request->data['officeshift']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['officeshift']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['officeshift']['shift_id'] = $shift_id;
                            $actionvalue = "lblsavemsg";
                        }

                        $errarr = $this->validatedata($this->request->data['officeshift'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->officeshift->save($this->request->data['officeshift'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'officeshift'));
//                            $holidayrecord = $this->holiday->find('all');
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function delete_officeshift($id = null) {
        $this->autoRender = false;
        $this->loadModel('officeshift');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->officeshift->id = $id;
                if ($this->officeshift->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'officeshift'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function holiday_old() {
        try {
            $this->loadModel('holiday');
            $this->loadModel('State');
            $this->loadModel('User');

            $this->set('selectoffice', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', 'S');
            $this->set('holidayrecord', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');

            $holidayrecord = $this->holiday->find('all');
            $this->set('holidayrecord', $holidayrecord);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);


            $this->request->data['holiday']['req_ip'] = $req_ip;
            $this->request->data['holiday']['user_id'] = $user_id;
            //$this->request->data['holiday']['created_date'] = $created_date;
            $this->request->data['holiday']['state_id'] = $stateid;
            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['holiday_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha';
                } else {
                    //list for all unicode fields
                    $fieldlist['holiday_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['holiday_fdate']['text'] = 'is_required';
            $fieldlist['holiday_tdate']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist)); //this array of error is set here to display those correspondent fields error  in the ctp.


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['holiday']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['holiday']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->holiday->save($this->request->data['holiday'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'holiday_old'));
                            $holidayrecord = $this->holiday->find('all');
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }

                if ($actiontype == 3) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '4') {

                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->holiday->id = $hfid;
                        if ($this->holiday->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'holiday_old'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $holidayrecord = $this->holiday->find('all');
                }
                if ($actiontype == '2') {
                    $this->set('actiontypeval', $actiontype);
                    $holidayrecord = $this->holiday->find('all');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function holiday() {
        try {
            $this->loadModel('holiday');

            $this->set('action', NULL);
            $this->set('hfaction', 'S');
            $this->set('hfid', NULL);
            $this->set('holidayrecord', NULL);
            $this->set('appointment', NULL);

            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $this->loadModel('appointment');

            $holidayrecord = $this->holiday->find('all');
            $this->set('holidayrecord', $holidayrecord);

            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);



            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);


//adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
//list for english single fields
                    $fieldlist['holiday_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha';
                } else {
//list for all unicode fields
                    $fieldlist['holiday_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['holiday_fdate']['text'] = 'is_required';
            $fieldlist['holiday_tdate']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist)); //this array of error is set here to display those correspondent fields error  in the ctp.


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['holiday']['csrftoken']);
                $user_id = $this->Auth->User("user_id");
                $stateid = $this->Auth->User("state_id");
                $created_date = date('Y/m/d H:i:s');
                $req_ip = $_SERVER['REMOTE_ADDR'];
                $this->request->data['holiday']['req_ip'] = $req_ip;
                $this->request->data['holiday']['user_id'] = $user_id;
                $this->request->data['holiday']['state_id'] = $stateid;

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                $this->set('action', $actiontype);
                $this->set('hfaction', $hfactionval);


                if ($actiontype == '1') {
                    $fdate = $this->request->data['holiday']['holiday_fdate'];

                    $d1 = date("Y-m-d", strtotime($fdate));
                    $this->request->data['holiday']['holiday_fdate'] = $d1;
                    $this->request->data['holiday']['holiday_tdate'] = $d1;

//                    $tdate = $this->request->data['holiday']['holiday_tdate'];
//                    $d2 = date("Y-m-d", strtotime($tdate));
//                    $this->request->data['holiday']['holiday_tdate']=$d2;
//                    pr($d1);
//                   
//                    $appointment = $this->appointment->query("select token_no,appointment_date,sheduled_time from ngdrstab_trn_appointment_details
//                                                         where appointment_date >= '$d1' and appointment_date <= '$d2'");

                    $appointment = $this->appointment->query("select token_no,appointment_date,sheduled_time from ngdrstab_trn_appointment_details
                                                         where appointment_date >= '$d1'");

                    if ($appointment != null) {
                        $this->set('holidayrecord', NULL);
                        $this->set('appointment', $appointment);
                        $this->Session->setFlash(__("Appointments had already booked for this dates, it is possible only after shifting appointment date...!!!!"));
                    } else {

                        if ($hfactionval == 'S') {
                            $actionvalue = "lblsavemsg";
                        } else {
                            $actionvalue = "lbleditmsg";
                            $this->request->data['holiday']['id'] = $hfid;
                        }
                        if ($this->holiday->save($this->request->data['holiday'])) {
//                            pr($this->request->data);
//                            exit;
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'holiday'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_holiday($id = null) {
        $this->autoRender = false;
        $this->loadModel('holiday');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->holiday->id = $id;
                if ($this->holiday->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'holiday'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function external_interface() {
        try {

            $this->loadModel('external_interface');
            $this->loadModel('State');
            $this->loadModel('User');

            $created_date = date('Y/m/d H:i:s');
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', 'S');
            $this->set('holidayrecord', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $this->set('externalrecord', $this->external_interface->find('all'));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->request->data['external_interface']['req_ip'] = $req_ip;
            $this->request->data['external_interface']['user_id'] = $user_id;
            // $this->request->data['external_interface']['created_date'] = $created_date;
            $this->request->data['external_interface']['state_id'] = $stateid;
            //adding field list dynamically from language list
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['interface_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['interface_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $fieldlist['interface_url']['text'] = 'is_required,is_maxlength255';
            $fieldlist['remark']['text'] = 'is_required,is_alphaspace,is_maxlength255';
            $fieldlist['execution_date']['text'] = 'is_required';
            $fieldlist['interface_user_id']['text'] = 'is_required,is_numeric';
            $fieldlist['interface_password']['text'] = 'is_required,is_maxlength100';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));



            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['external_interface']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                if ($actiontype == '1') {

                    $check = $this->external_interface->query("SELECT MAX(interface_id) FROM ngdrstab_mst_external_interface");
                    $interface_id = $check[0][0]['max'];
                    if ($interface_id != Null) {
                        $interface_id = $interface_id + 1;
                    } else {
                        $interface_id = 1;
                    }
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['external_interface']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['external_interface']['interface_id'] = $interface_id;
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['external_interface'] = $this->istrim($this->request->data['external_interface']);
                        $errarr = $this->validatedata($this->request->data['external_interface'], $fieldlist);
                        if ($this->ValidationError($errarr)) {
                            if ($this->external_interface->save($this->request->data['external_interface'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'external_interface'));

                                $this->set('externalrecord', $this->external_interface->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }

                if ($actiontype == 3) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '4') {

                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->external_interface->id = $hfid;
                        if ($this->external_interface->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'external_interface'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('externalrecord', $this->external_interface->find('all'));
                }
                if ($actiontype == '2') {
                    $this->set('actiontypeval', $actiontype);
                    $holidayrecord = $this->holiday->find('all');
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }

        $this->set_csrf_token();
    }

    public function delete_external_interface($id = null) {
        $this->autoRender = false;
        $this->loadModel('external_interface');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->external_interface->id = $id;
                if ($this->external_interface->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'external_interface'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function propertylist() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'minorfunction', 'mainlanguage'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('propertylist', $this->minorfunction->find('all'));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();
            $fieldlist['mf_serial']['text'] = 'is_required,is_numeric';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['propertylist']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['propertylist']['req_ip'] = $this->request->clientIp();
                    $this->request->data['propertylist']['user_id'] = $user_id;
                    $this->request->data['propertylist']['created_date'] = $created_date;
                    $this->request->data['propertylist']['state_id'] = $stateid;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['propertylist']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {

                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['propertylist'] = $this->istrim($this->request->data['propertylist']);
                    $errarr = $this->validatedata($this->request->data['propertylist'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {


                        if ($this->minorfunction->save($this->request->data['propertylist'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'propertylist'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'propertylist'));
                }
            }
        } catch (Exception $ex) {
            pr($ex);
            exit;
        }
    }

    public function delete_propertylist($id = null) {
        $this->autoRender = false;
        $this->loadModel('minorfunction');
        try {

            if (isset($id) && is_numeric($id)) {
                $this->minorfunction()->id = $id;
                if ($this->minorfunction->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'propertylist'));
                }
            }
        } catch (exception $ex) {
            
        }
    }

//------query parametrised and integrated on 5dec by kalyani of all four funtions like getdist,subdiv,talukaname,and circle------
    public function getdist() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['div']) && is_numeric($_GET['div'])) {
                $div = $_GET['div'];
                $configure = $this->damblkdpnd->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
                if ($configure[0][0]['is_dist'] == 1) {
                    $distid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.state_id'), 'conditions' => array('division_id' => array($div))));
                    $divdata = ClassRegistry::init('District')->find('list', array('fields' => array('District.id', 'District.district_name_en'), 'conditions' => array('id' => $distid)));
                } else if ($configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 1) {
                    $subdivid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.subdivision_id'), 'conditions' => array('division_id' => array($div))));
                    $divdata = ClassRegistry::init('subdivision')->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_en'), 'conditions' => array('id' => $subdivid)));
                } else if ($configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 1) {
                    $talukaid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.taluka_id'), 'conditions' => array('division_id' => array($div))));
                    $divdata = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_en'), 'conditions' => array('id' => $talukaid)));
                } else if ($configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 0 && $configure[0][0]['is_block'] == 1) {
                    $circleid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.circle_id'), 'conditions' => array('division_id' => array($div))));
                    $divdata = ClassRegistry::init('circle')->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'conditions' => array('id' => $circleid)));
                } else {
                    $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.ulb_type_id'), 'conditions' => array('division_id' => array($div))));
                    $divdata = ClassRegistry::init('corporationclass')->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'conditions' => array('ulb_type_id' => $ulbid)));
                }
                echo json_encode($divdata);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function getsubdiv() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['dist']) && is_numeric($_GET['dist'])) {
                $dist = $_GET['dist'];
                $configure = $this->damblkdpnd->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
                if ($configure[0][0]['is_zp'] == 1) {
                    $subdivid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.subdivision_id'), 'conditions' => array('state_id' => array($dist))));
                    $distdata = ClassRegistry::init('subdivision')->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_en'), 'conditions' => array('id' => $subdivid)));
                } else if ($configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 1) {
                    $talukaid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.taluka_id'), 'conditions' => array('state_id' => array($dist))));
                    $distdata = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_en'), 'conditions' => array('id' => $talukaid)));
                } else if ($configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 0 && $configure[0][0]['is_block'] == 1) {
                    $circleid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.circle_id'), 'conditions' => array('state_id' => array($dist))));
                    $distdata = ClassRegistry::init('circle')->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'conditions' => array('id' => $circleid)));
                } else {
                    $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.ulb_type_id'), 'conditions' => array('state_id' => array($dist))));
                    $distdata = ClassRegistry::init('corporationclass')->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'conditions' => array('ulb_type_id' => $ulbid)));
                }
                echo json_encode($distdata);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function gettalukaname() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['subdiv']) && is_numeric(($_GET['subdiv']))) {
                $subdivid = $_GET['subdiv'];
                $configure = $this->damblkdpnd->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
                if ($configure[0][0]['is_taluka'] == 1) {
                    $talukaid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.taluka_id'), 'conditions' => array('subdivision_id' => array($subdivid))));
                    $subdivdata = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_en'), 'conditions' => array('id' => $talukaid)));
                } else if ($configure[0][0]['is_taluka'] == 0 && $configure[0][0]['is_block'] == 1) {
                    $circleid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.circle_id'), 'conditions' => array('subdivision_id' => array($subdivid))));
                    $subdivdata = ClassRegistry::init('circle')->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'conditions' => array('id' => $circleid)));
                } else {
                    $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.ulb_type_id'), 'conditions' => array('subdivision_id' => array($subdivid))));
                    $subdivdata = ClassRegistry::init('corporationclass')->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'conditions' => array('ulb_type_id' => $ulbid)));
                }
                echo json_encode($subdivdata);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function getcircle() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['tal']) && is_numeric($_GET['tal'])) {
                $taluka = $_GET['tal'];
                $configure = $this->damblkdpnd->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
                if ($configure[0][0]['is_block'] == 1) {
                    $circleid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.circle_id'), 'conditions' => array('taluka_id' => array($taluka))));
                    $talukadata = ClassRegistry::init('circle')->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'conditions' => array('id' => $circleid)));
                } else {
                    $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.ulb_type_id'), 'conditions' => array('taluka_id' => array($taluka))));
                    $talukadata = ClassRegistry::init('corporationclass')->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'conditions' => array('ulb_type_id' => $ulbid)));
                }
                echo json_encode($talukadata);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function getulb() {
        try {
            $this->loadModel('damblkdpnd');
            if (isset($_GET['ulb'])) {
                $circle = $_GET['ulb'];
                $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.ulb_type_id'), 'conditions' => array('circle_id' => array($circle))));
                $ulbname = ClassRegistry::init('corporationclass')->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'conditions' => array('ulb_type_id' => $ulbid)));
                echo json_encode($ulbname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getcorp() {
        try {
            $this->loadModel('damblkdpnd');
            if (isset($_GET['ulb'])) {
                $ulb = $_GET['ulb'];
                $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.corp_id'), 'conditions' => array('ulb_type_id' => array($ulb))));
                $corpname = ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_en'), 'conditions' => array('id' => $ulbid)));
                echo json_encode($corpname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getvillage() {
        try {
            $this->loadModel('damblkdpnd');
            if (isset($_GET['corp'])) {
                $ulb = $_GET['corp'];
                $ulbid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id'), 'conditions' => array('ulb_type_id' => array($ulb))));
                $villagename = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.id', 'damblkdpnd.village_name_en'), 'conditions' => array('id' => $ulbid)));
                echo json_encode($villagename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function damblkdpnd() {
        try {
            $this->loadModel('damblkdpnd');
            $this->loadModel('village_mapping');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('District');
            $this->loadModel('division');
            $this->loadModel('subdivision');
            $this->loadModel('circle');
            $this->loadModel('corporationclass');

            $this->set('actiontypeval', NULL);
            $this->set('divisiondata', NULL);
            $this->set('districtdata', NULL);
            $this->set('subdivdata', NULL);
            $this->set('talukadata', NULL);
            $this->set('circledata', NULL);
            $this->set('ulbdata', NULL);
            $this->set('corpclasslist', NULL);

            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $language = $this->Session->read("sess_langauge");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            //------------QP on date 2dec by kalyani--------------------------------------
            $configure = $this->damblkdpnd->query("select * from ngdrstab_conf_state_district_div_level where state_id= ? ", array($stateid));
            $this->set('configure', $configure);
            if ($language == 'en') {
                if ($configure[0][0]['is_div'] == 1) {
                    $divisionname = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.division_id', 'grp.division_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock2_division',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('damblkdpnd.division_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('divisiondata', $divisionname);
                } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 1) {
                    $districtname = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.state_id', 'grp.district_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock3_district',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('damblkdpnd.state_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('districtdata', $districtname);
                } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 1) {
                    $subdivname = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.subdivision_id', 'grp.subdivision_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock4_subdivision',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('damblkdpnd.subdivision_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('subdivdata', $subdivname);
                } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 1) {
                    $talukaname = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.taluka_id', 'grp.taluka_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock5_taluka',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array(' grp.id = damblkdpnd.taluka_id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('talukadata', $talukaname);
                } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 0 && $configure[0][0]['is_block'] == 1) {
                    $circlename = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.circle_id', 'grp.circle_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock6_circle',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array(' grp.id = damblkdpnd.circle_id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('circledata', $circlename);
                } else {
                    $ulbname = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.ulb_type_id', 'grp.class_description_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock_local_governingbody',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array(' grp.id = damblkdpnd.ulb_type_id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('ulbdata', $ulbname);

                    $corpclasslist = $this->damblkdpnd->find('list', array(
                        'fields' => array('damblkdpnd.corp_id', 'grp.governingbody_name_en'),
                        'joins' => array(array('table' => 'ngdrstab_conf_admblock_local_governingbody_list',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array(' grp.corp_id = damblkdpnd.corp_id', 'damblkdpnd.state_id= grp.state_id')
                            ))
                            )
                    );
                    $this->set('corpclasslist', $corpclasslist);
                }
                $this->set('state', $state[0]['State']['state_name_en']);
            } else if ($language == 'mh') {
                $this->set('state', $state[0]['State']['state_name_ll']);
            } else {
                $this->set('state', $state[0]['State']['state_name_en_hn']);
            }
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['damblkdpnd']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $this->request->data['damblkdpnd']['state_id'] = $stateid;
                if ($actiontype == '1') {
                    if ($this->village_mapping->Save($this->request->data['damblkdpnd'])) {
                        $this->Session->setFlash(__('lblsavemsg'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'damblkdpnd'));
                    } else {
                        $this->Session->setFlash(__('lblnotsavemsg'));
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
            exit;
        }
    }

    public function rate() {
        try {
            array_map([$this, 'loadModel'], ['rate', 'surveynorate', 'State', 'User', 'levelconfig', 'Usagemain']);
            $actiontypeval = $rdbsort = $hfid = $villagenname = $level1propertydata = $level2propertydata = $level3propertydata = $hfvillage = NULL;
            $level4propertydata = $hfupdateflag = $saveflag = $selectflag = $surveyno = $raterecord = $gridrecord = $searchvillage = NULL;

            $user_id = $this->Auth->User("user_id");
            $language = $this->Session->read("sess_langauge");
//             $lang = $this->Session->read("sess_langauge");
//             $this->set('lang',$lang);
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_en' => 'ASC'))));
            $this->set('villagenname', ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('village_id', 'village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_en' => 'ASC'))));
//            $this->set('Developedland', ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('developed_land_types_id', 'developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $language), 'order' => array('taluka_name_en' => 'ASC'))));
            $this->set('level1propertydata', ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $language), 'order' => array('level_1_desc_en' => 'ASC'))));
            $this->set('level2propertydata', ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $language), 'order' => array('level_2_desc_en' => 'ASC'))));
            $this->set('level3propertydata', ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $language), 'order' => array('level_3_desc_en' => 'ASC'))));
            $this->set('level4propertydata', ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $language), 'order' => array('level_4_desc_en' => 'ASC'))));
            $this->set('level1propertylist', ClassRegistry::init('Level1')->find('list', array('fields' => array('prop_level1_list_id', 'list_1_desc_' . $language), 'order' => array('list_1_desc_en' => 'ASC'))));
            $this->set('level2propertylist', ClassRegistry::init('Level2')->find('list', array('fields' => array('prop_level2_list_id', 'list_2_desc_' . $language), 'order' => array('list_2_desc_en' => 'ASC'))));
            $this->set('level3propertylist', ClassRegistry::init('Level3')->find('list', array('fields' => array('prop_leve3_list_id', 'list_3_desc_' . $language), 'order' => array('list_3_desc_en' => 'ASC'))));
            $this->set('level4propertylist', ClassRegistry::init('Level4')->find('list', array('fields' => array('prop_level4_list_id', 'list_4_desc_' . $language), 'order' => array('list_4_desc_en' => 'ASC'))));
            $this->set('usagesub', ClassRegistry::init('Usagesub')->find('list', array('fields' => array('usage_sub_catg_id', 'usage_sub_catg_desc_' . $language), 'order' => array('usage_sub_catg_desc_en' => 'ASC'))));
            $this->set('usagesubsub', ClassRegistry::init('Usagesubsub')->find('list', array('fields' => array('usage_sub_sub_catg_id', 'usage_sub_sub_catg_desc_' . $language), 'order' => array('usage_sub_sub_catg_desc_en' => 'ASC'))));
            $this->set('constuctiontype', ClassRegistry::init('constructiontype')->find('list', array('fields' => array('construction_type_id', 'construction_type_desc_' . $language), 'order' => array('construction_type_desc_en' => 'ASC'))));
            $this->set('roadvicinity', ClassRegistry::init('roadvicinity')->find('list', array('fields' => array('road_vicinity_id', 'road_vicinity_desc_' . $language), 'order' => array('road_vicinity_desc_en' => 'ASC'))));
            $this->set('userdependency1', ClassRegistry::init('user_defined_dependancy1')->find('list', array('fields' => array('user_defined_dependency1_id', 'user_defined_dependency1_desc_' . $language), 'order' => array('user_defined_dependency1_desc_en' => 'ASC'))));
            $this->set('userdependency2', ClassRegistry::init('user_defined_dependancy2')->find('list', array('fields' => array('user_defined_dependency2_id', 'user_defined_dependency2_desc_' . $language), 'order' => array('user_defined_dependency2_desc_en' => 'ASC'))));
            $this->set('finyear', ClassRegistry::init('finyear')->find('list', array('fields' => array('finyear_id', 'finyear_desc'), 'order' => array('finyear.current_year' => 'desc'))));
            $this->set('ratetypedata', ClassRegistry::init('ratetype')->find('list', array('fields' => array('ratetype_id', 'ratetype_desc_' . $language), 'order' => array('ratetype_desc_en' => 'ASC'))));
            $this->set('propunit', ClassRegistry::init('Propertyunit')->find('list', array('fields' => array('unit_id', 'unit_desc_' . $language), 'order' => array('unit_desc_' . $language => 'ASC'))));
            $this->set('valuationzone', ClassRegistry::init('valuationzone')->find('list', array('fields' => array('valutation_zone_id', 'valuation_zone_desc_' . $language), 'order' => array('valuation_zone_desc_en' => 'ASC'))));
            $this->set('valuationsubzone', ClassRegistry::init('valuationsubzone')->find('list', array('fields' => array('valutation_subzone_id', 'name'), 'order' => array('name' => 'ASC'))));
            $configure = $this->levelconfig->find('all', array('Conditions', array('state_id' => $stateid)));
            $usagemain = $this->Usagemain->find('list', array(
                'fields' => array('Usagemain.usage_main_catg_id', 'grp.usage_main_catg_desc_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_usage_main_category',
                        'alias' => 'grp',
                        'type' => 'left outer',
                        'conditions' => array('Usagemain.usage_main_catg_id = grp.usage_main_catg_id', 'Usagemain.state_id= grp.state_id')
                    ))
                    )
            );
            if ($configure[0]['levelconfig']['is_level_1_id'] == 1) {
                $this->set('level1propertydata', ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $language))));
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 1)) {
                $this->set('level2propertydata', ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $language))));
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 1)) {
                $this->set('level3propertydata', ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $language))));
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 0 && ($configure[0]['levelconfig']['is_level_4_id'] == 1))) {
                $this->set('level4propertydata', ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $language))));
            }
            $this->set(compact('actiontypeval', 'rdbsort', 'hfid', 'villagenname', 'level1propertydata', 'level2propertydata', 'level3propertydata', 'level4propertydata', 'hfupdateflag', 'saveflag', 'selectflag', 'surveyno', 'raterecord', 'gridrecord', 'searchvillage', 'language', 'configure', 'usagemain', 'hfvillage'));
            $file = new File(WWW_ROOT . 'files/jsonratefile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);
//validations
            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['finyear_id']['select'] = 'is_select_req';
            $fieldlist['ratetype_id']['select'] = 'is_select_req';
            $fieldlist['effective_date']['text'] = 'is_required';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['usage_main_catg_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_emptyornumallow';
            $fieldlist['level1_id']['select'] = 'is_emptyornumallow';
            $fieldlist['prop_rate']['text'] = 'is_required,is_integer';
            $fieldlist['range_from']['text'] = 'is_emptyornumallow';
            $fieldlist['range_to']['text'] = 'is_emptyornumallow';
            $fieldlist['prop_unit']['text'] = 'is_select_req';
            $fieldlist['level1_list_id']['select'] = 'is_emptyornumallow'; //depent
            $fieldlist['level2_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['level2_list_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['level3_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['level3_list_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['level4_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['level4_list_id']['select'] = 'is_emptyornumallow'; //dependent
            $fieldlist['usage_sub_catg_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['usage_sub_sub_catg_id']['select'] = 'is_alphanumeric'; //dependent
            $fieldlist['rdbsort']['text'] = 'is_alphanumeric'; //dependent
            $fieldlist['searchvillage']['text'] = 'is_alphanumeric';
            $fieldlist['road_vicinity_id']['select'] = 'is_emptyornumallow';
            $fieldlist['user_defined_dependency1_id']['select'] = 'is_emptyornumallow';
            $fieldlist['user_defined_dependency2_id']['select'] = 'is_emptyornumallow';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->request->data['rate'] = $this->istrim($this->request->data['rate']);
                $fieldlistnew = $this->modifyfieldlist($fieldlist, $this->request->data['rate']);
                $errarr = $this->validatedata($this->request->data['rate'], $fieldlistnew);
//                 pr($fieldlist);
//                pr($this->request->data['rate']);
//                 pr($fieldlistnew);
//                pr($errarr);exit;
                if ($this->ValidationError($errarr)) {
                    $this->check_csrf_token($this->request->data['rate']['csrftoken']);
                    $actiontype = $_POST['actiontype'];
                    $hfid = $_POST['id1'];
                    $this->set('hfid', $hfid);
                    $rdbsort = $this->request->data['rate']['rdbsort'];
                    $this->request->data['rate']['state_id'] = $stateid;
                    $this->request->data['rate']['req_ip'] = $req_ip;
                    $this->request->data['rate']['user_id'] = $user_id;
                    $this->set('hfvillage', $_POST['hfvillage']);
                    $searchvillageid = $_POST['hfvillage'];
                    if ($actiontype == '1') {
                        $saveflag = $this->request->data['saveflag'];
                        $this->set('saveflag', $saveflag);
                        $this->set('actiontypeval', $actiontype);
                        $villageid = $this->request->data['rate']['village_id'];
                        //------------QP and if condition checking on date 2dec by kalyani--------------------------------------
                        if ($villageid != NULL && isset($villageid) && is_numeric($villageid)) {

                            $villagedata = $this->levelconfig->query("select * from ngdrstab_conf_admblock7_village_mapping where village_id=?", array($villageid));
                            $this->request->data['rate']['state_id'] = $villagedata[0][0]['state_id'];
                            $this->request->data['rate']['division_id'] = $villagedata[0][0]['division_id'];
                            $this->request->data['rate']['district_id'] = $villagedata[0][0]['district_id'];
                            $this->request->data['rate']['taluka_id'] = $villagedata[0][0]['taluka_id'];
                            $this->request->data['rate']['subdivision_id'] = $villagedata[0][0]['subdivision_id'];
                            $this->request->data['rate']['circle_id'] = $villagedata[0][0]['circle_id'];
                            $this->request->data['rate']['ulb_type_id'] = $villagedata[0][0]['ulb_type_id'];
                            $this->request->data['rate']['corp_id'] = $villagedata[0][0]['corp_id'];
                        }
                        $this->request->data['rate']['surveynotype_id'] = $this->request->data['surveyno'];
                        $this->request->data['rate']['land_rate_unit'] = $this->request->data['rate']['prop_unit'];
                        $this->request->data['rate']['construction_rate_unit'] = $this->request->data['rate']['prop_unit'];
                        $this->request->data['rate']['effective_date'] = date('Y-m-d H:i:s', strtotime($this->request->data['rate']['effective_date']));

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['rate']['id'] = $this->request->data['id1'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->request->data['saveflag'] == 'Y') {

                            $model = "surveynorate";
                        } else {
                            $model = "rate";
                        }
                        if ($this->$model->Save($this->request->data['rate'])) {
                            $this->Session->setFlash(__($actionvalue));
                        } else {
                            $this->Session->setFlash(__("lblnotsavemsg"));
                        }
                    }

                    if ($actiontype == '2') {
                        $this->set('actiontypeval', $actiontype);
                    }

                    if ($actiontype == '3') {
                        $this->set('actiontypeval', $actiontype);
                        $this->set('rdbsort', $rdbsort);
//                    $villageid = $this->request->data['rate']['searchvillage'];
                        $searchbtn = $_POST['selectflag'];
                        $this->set('selectflag', $searchbtn);
                        if ($_POST['saveflag'] == 'Y') {
                            $table = 'ngdrstab_mst_surveyno_rate';
                        } else {
                            $table = 'ngdrstab_mst_rate';
                        }
                        if ($searchvillageid != NULL) {

                            //------------QP on date 2dec by kalyani--------------------------------------
                            $raterecord = $this->levelconfig->query("select distinct a.id,b.village_name_$language,c.developed_land_types_desc_$language,d.level_1_desc_$language,h.list_1_desc_$language,
                a.range_from, a.range_to,l.usage_main_catg_desc_$language,m.usage_sub_catg_desc_$language,n.usage_sub_sub_catg_desc_$language,o.unit_desc_$language,a.prop_rate              
                from $table a
                left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id	
                left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id              
                left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id                
                left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
                left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
                left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit                
                where a.village_id = ? ", array($searchvillageid));
                        } else {
                            $raterecord = $this->levelconfig->query("select distinct a.id,b.village_name_$language,c.developed_land_types_desc_$language,d.level_1_desc_$language,h.list_1_desc_$language,
                a.range_from, a.range_to,l.usage_main_catg_desc_$language,m.usage_sub_catg_desc_$language,n.usage_sub_sub_catg_desc_$language,o.unit_desc_$language,a.prop_rate              
                from $table a
                left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id	
                left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id              
                left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id                
                left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
                left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
                left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit limit 100");
                        }

                        if ($_POST['saveflag'] == 'Y') {
                            $this->set('raterecord', $raterecord);
                            $this->set('saveflag', 'Y');
                        } else {
                            $this->set('raterecord', $raterecord);
                            $this->set('saveflag', 'N');
                        }
                        if ($searchbtn == 'Y') {
                            if ($hfid != NULL) {
                                //------------QP on date 2dec by kalyani--------------------------------------
                                $gridrecord = $this->levelconfig->query("select a.*,b.village_name_$language,c.developed_land_types_desc_$language,d.level_1_desc_$language,e.level_2_desc_$language,f.level_3_desc_$language,
                        g.level_4_desc_$language, h.list_1_desc_$language,i.list_2_desc_$language,j.list_3_desc_$language,k.list_4_desc_$language,l.usage_main_catg_desc_$language,
                        m.usage_sub_catg_desc_$language,n.usage_sub_sub_catg_desc_$language,o.unit_desc_$language,p.finyear_desc,q.district_name_$language,
                        r.construction_type_desc_$language,s.road_vicinity_desc_$language,user_defined_dependency1_desc_$language,u.user_defined_dependency2_desc_$language,
                        v.surveynotype_desc_$language,w.ratetype_desc_$language,z.taluka_name_$language
                        from $table a
                        left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id
                        left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                        left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id
                        left outer join ngdrstab_mst_location_levels_2_property e on e.level_2_id = a.level2_id
                        left outer join ngdrstab_mst_location_levels_3_property f on f.level_3_id = a.level3_id 
                        left outer join ngdrstab_mst_location_levels_4_property g on g.level_4_id = a.level4_id
                        left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id 
                        left outer join ngdrstab_mst_loc_level_2_prop_list i on i.prop_level2_list_id = a.level2_list_id
                        left outer join ngdrstab_mst_loc_level_3_prop_list j on j.prop_leve3_list_id = a.level3_list_id 
                        left outer join ngdrstab_mst_loc_level_4_prop_list k on k.prop_level4_list_id = a.level4_list_id
                        left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
                        left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
                        left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                        left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit 
                        left outer join ngdrstab_mst_finyear p on p.finyear_id = a.finyear_id 
                        left outer join ngdrstab_conf_admblock3_district q on q.district_id = a.district_id 
                        left outer join ngdrstab_mst_construction_type r on r.construction_type_id = a.construction_type_id 
                        left outer join ngdrstab_mst_road_vicinity s on s.road_vicinity_id = a.road_vicinity_id 
                        left outer join ngdrstab_mst_user_def_depe1 t on t.user_defined_dependency1_id = a.user_defined_dependency_1 
                        left outer join ngdrstab_mst_user_def_depe2 u on u.user_defined_dependency2_id = a.user_defined_dependency_2
                        left outer join ngdrstab_mst_surveyno_type v on v.surveynotype_id = a.surveynotype_id
                        left outer join ngdrstab_mst_ratetype w on w.ratetype_id = a.ratetype_id
                        left outer join ngdrstab_mst_valuation_zone x on x.valutation_zone_id = a.valutation_zone_id
                        left outer join ngdrstab_mst_valuation_subzone y on y.valutation_subzone_id = a.valutation_subzone_id
                        left outer join ngdrstab_conf_admblock5_taluka z on z.taluka_id = a.taluka_id
                        where a.id=? ", array($hfid));
                                $this->set('gridrecord', $gridrecord);
                            }
                        }
                    }

                    if ($actiontype == '4') {
                        $this->set('actiontypeval', $actiontype);
                        if ($hfid != NULL) {
                            if ($this->request->data['saveflag'] == 'Y') {

                                $model = "surveynorate";
                            } else {
                                $model = "rate";
                            }
                            $this->$model->id = $hfid;
                            if ($this->$model->delete()) {
                                $this->Session->setFlash(__('lbldeletemsg'));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'rate'));
                            } else {
                                $this->Session->setFlash(__('lblnotdeletemsg'));
                            }
                        }
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function modifyfieldlist($fieldlist, $data) {


        if (isset($data['level1_id']) && ($data['level1_id'] == null || $data['level1_id'] == "")) {
            unset($fieldlist['level1_list_id']);
            unset($fieldlist['level2_id']);
            unset($fieldlist['level2_list_id']);
            unset($fieldlist['level3_id']);
            unset($fieldlist['level3_list_id']);
            unset($fieldlist['level4_id']);
            unset($fieldlist['level4_list_id']);
            unset($fieldlist['user_defined_dependency1_id']);
            unset($fieldlist['user_defined_dependency2_id']);
        }
        if (!isset($data['taluka_id']) || ($data['taluka_id'] == null || $data['taluka_id'] == "")) {
            unset($fieldlist['taluka_id']);
        }
        if (!isset($data['village_id']) || ($data['village_id'] == null || $data['village_id'] == "")) {
            unset($fieldlist['village_id']);
        }
        if (!isset($data['level1_id']) || ($data['level1_id'] == null || $data['level1_id'] == "")) {
            unset($fieldlist['level1_id']);
        }
        if (!isset($data['level1_list_id'])) {
            unset($fieldlist['level1_list_id']);
        }
        if (!isset($data['level2_id'])) {
            unset($fieldlist['level2_id']);
        }
        if (!isset($data['level2_list_id'])) {
            unset($fieldlist['level2_list_id']);
        }
        if (!isset($data['level3_id'])) {
            unset($fieldlist['level3_id']);
        }
        if (!isset($data['level3_list_id'])) {
            unset($fieldlist['level3_list_id']);
        }
        if (!isset($data['level4_id'])) {
            unset($fieldlist['level4_id']);
        }
        if (!isset($data['level4_id'])) {
            unset($fieldlist['level4_id']);
        }
        if (!isset($data['level4_list_id'])) {
            unset($fieldlist['level4_list_id']);
        }
        if (!isset($data['range_from'])) {
            unset($fieldlist['range_from']);
        }
        if (!isset($data['range_to'])) {
            unset($fieldlist['range_to']);
        }
        if (isset($data['usage_sub_sub_catg_id']) && ($data['usage_sub_sub_catg_id'] == null || $data['usage_sub_sub_catg_id'] == "")) {
            unset($fieldlist['usage_sub_sub_catg_id']);
            unset($fieldlist['road_vicinity_id']);
            unset($fieldlist['user_defined_dependency1_id']);
            unset($fieldlist['user_defined_dependency2_id']);
        }
        if (!isset($data['usage_sub_sub_catg_id'])) {
            unset($fieldlist['usage_sub_sub_catg_id']);
        }
        if (!isset($data['user_defined_dependency1_id'])) {
            unset($fieldlist['user_defined_dependency1_id']);
        }
        if (!isset($data['road_vicinity_id'])) {
            unset($fieldlist['road_vicinity_id']);
        }
        if (!isset($data['user_defined_dependency2_id'])) {
            unset($fieldlist['user_defined_dependency2_id']);
        }
        return $fieldlist;
    }

    public function getlevel1_list() {
        try {

            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Levels_1_property');
            $this->loadModel('Level1');
            $this->loadModel('levelconfig');

            if (isset($_GET['level1_list']) && isset($_GET['village_id'])) {
                $level1_listid = $_GET['level1_list'];
                $stateid = $this->Auth->User("state_id");
                $configure = $this->levelconfig->find('all', array('Conditions', 'state_id' => $stateid));

                if ($configure[0]['levelconfig']['is_level_2_id'] == 1) {
                    $level1_list = ClassRegistry::init('Levels_1_property')->find('all', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                    //------------QP on date 2dec by kalyani--------------------------------------
                    $check = $this->Level1->query("select * from ngdrstab_mst_loc_level_1_prop_list where level_1_id=?", array($level1_list[0]['Levels_1_property']['level_1_id']));
                    if ($check[0][0]['level_1_from_range'] == '' && $check[0][0]['level_1_to_range'] == '') {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $flag = 'N';
                        $surveynoid = NULL;
                    } else {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.name'), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $surveynoid = ClassRegistry::init('Levels_1_property')->find('all', array('fields' => array('Levels_1_property.surveynotype_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                        $surveynoid = $surveynoid[0]['Levels_1_property']['surveynotype_id'];
                        $flag = 'Y';
                    }
                    $drop2 = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $lang), 'conditions' => array('level_2_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level2_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                } else if ($configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 1) {
                    $level1_list = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                    //------------QP on date 2dec by kalyani--------------------------------------
                    $check = $this->Level1->query("select * from ngdrstab_mst_loc_level_1_prop_list where level_1_id=?", array($level1_list[0]['Levels_1_property']['level_1_id']));
                    if ($check[0][0]['level_1_from_range'] == '' && $check[0][0]['level_1_to_range'] == '') {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $flag = 'N';
                        $surveynoid = NULL;
                    } else {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.name'), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $surveynoid = ClassRegistry::init('Levels_1_property')->find('all', array('fields' => array('Levels_1_property.surveynotype_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                        $surveynoid = $surveynoid[0]['Levels_1_property']['surveynotype_id'];
                        $flag = 'Y';
                    }
                    $drop2 = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $lang), 'conditions' => array('level_3_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level3_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                } else if ($configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 0 && $configure[0]['levelconfig']['is_level_4_id'] == 1) {

                    $level1_list = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                    //------------QP on date 2dec by kalyani--------------------------------------

                    $check = $this->Level1->query("select * from ngdrstab_mst_loc_level_1_prop_list where level_1_id=?", array($level1_list[0]['Levels_1_property']['level_1_id']));
                    if ($check[0][0]['level_1_from_range'] == '' && $check[0][0]['level_1_to_range'] == '') {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $flag = 'N';
                        $surveynoid = NULL;
                    } else {
                        $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.name'), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                        $surveynoid = ClassRegistry::init('Levels_1_property')->find('all', array('fields' => array('Levels_1_property.surveynotype_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                        $surveynoid = $surveynoid[0]['Levels_1_property']['surveynotype_id'];
                        $flag = 'Y';
                    }
                    $drop2 = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $lang), 'conditions' => array('level_4_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level4_id'), 'conditions' => array('level1_id' => $level1_list[0]['Levels_1_property']['level_1_id'], 'village_id' => $_GET['village_id']))))));
                }

                $variable = array('data1' => $drop1,
                    'data2' => $drop2,
                    'surveyno' => $surveynoid,
                    'flag' => $flag
                );

                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel2_list() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Level2_property');
            $this->loadModel('Level2');
            $this->loadModel('levelconfig');
            $stateid = $this->Auth->User("state_id");
            $configure = $this->levelconfig->find('all', array('Conditions', 'state_id' => $stateid));
            if (isset($_GET['level2_list']) && isset($_GET['village_id'])) {
                $level2_listid = $_GET['level2_list'];
                $level1_listid = $_GET['level1_list_id'];

                if ($configure[0]['levelconfig']['is_level_3_id'] == 1) {
                    $level2_list = ClassRegistry::init('Level2_property')->find('all', array('fields' => array('Level2_property.level_2_id'), 'conditions' => array('level_2_id' => $level2_listid)));
                    //------------QP on date 2dec by kalyani--------------------------------------
                    $check = $this->Level2->query("select * from ngdrstab_mst_loc_level_2_prop_list where level_2_id=?", array($level2_list[0]['Level2_property']['level_2_id']));
                    if ($check[0][0]['level_2_from_range'] == '' && $check[0][0]['level_2_to_range'] == '') {
                        $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $lang), 'conditions' => array('prop_level2_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level2_list_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));

                        $flag = 'N';
                        $surveynoid = NULL;
                    } else {
                        $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.name'), 'conditions' => array('prop_level2_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level2_list_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));
                        $surveynoid = ClassRegistry::init('Level2_property')->find('all', array('fields' => array('Level2_property.surveynotype_id'), 'conditions' => array('level_2_id' => $level2_listid)));
                        $surveynoid = $surveynoid[0]['Level2_property']['surveynotype_id'];
                        $flag = 'Y';
                    }
                    $drop2 = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $lang), 'conditions' => array('level_3_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level3_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));
                } else {
                    $level2_list = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id'), 'conditions' => array('level_2_id' => $level2_listid)));
                    //------------QP on date 2dec by kalyani--------------------------------------
                    $check = $this->Level2->query("select * from ngdrstab_mst_loc_level_2_prop_list where level_2_id=?", array($level2_list[0]['Level2_property']['level_2_id']));
                    if ($check[0][0]['level_2_from_range'] == '' && $check[0][0]['level_2_to_range'] == '') {
                        $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $lang), 'conditions' => array('prop_level2_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level2_list_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));
                        $flag = 'N';
                        $surveynoid = NULL;
                    } else {
                        $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.name'), 'conditions' => array('prop_level2_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level2_list_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));
                        $surveynoid = ClassRegistry::init('Level2_property')->find('all', array('fields' => array('Level2_property.surveynotype_id'), 'conditions' => array('level_2_id' => $level2_listid)));
                        $surveynoid = $surveynoid[0]['Level2_property']['surveynotype_id'];
                        $flag = 'Y';
                    }
                    $drop2 = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $lang), 'conditions' => array('level_4_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level4_id'), 'conditions' => array('level2_id' => $level2_list[0]['Level2_property']['level_2_id'], 'village_id' => $_GET['village_id'], 'prop_level1_list_id' => $_GET['level1_list_id']))))));
                }

                $variable = array('data1' => $drop1,
                    'data2' => $drop2,
                    'surveyno' => $surveynoid,
                    'flag' => $flag
                );

                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel3_list() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Level3_property');
            $this->loadModel('Level3');

            if (isset($_GET['level3_list'])) {
                $level3_listid = $_GET['level3_list'];
                $level3_list = ClassRegistry::init('Level3_property')->find('all', array('fields' => array('Level3_property.level_3_id'), 'conditions' => array('level_3_id' => $level3_listid)));
                //------------QP on date 2dec by kalyani--------------------------------------
                $check = $this->Level3->query("select * from ngdrstab_mst_loc_level_3_prop_list where level_3_id=?", array($level3_list[0]['Level3_property']['level_3_id']));
                if ($check[0][0]['level_3_from_range'] == '' && $check[0][0]['level_3_to_range'] == '') {
                    $drop1 = ClassRegistry::init('Level3')->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_' . $lang), 'conditions' => array('prop_leve3_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level3_list_id'), 'conditions' => array('level3_id' => $level3_list[0]['Level3_property']['level_3_id'], 'village_id' => $_GET['village_id'], 'prop_level2_list_id' => $_GET['level2_list_id']))))));
                    $flag = 'N';
                    $surveynoid = NULL;
                } else {
                    $drop1 = ClassRegistry::init('Level3')->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.name'), 'conditions' => array('prop_leve3_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level3_list_id'), 'conditions' => array('level3_id' => $level3_list[0]['Level3_property']['level_3_id'], 'village_id' => $_GET['village_id'], 'prop_level2_list_id' => $_GET['level2_list_id']))))));
                    $surveynoid = ClassRegistry::init('Level3_property')->find('all', array('fields' => array('Level3_property.surveynotype_id'), 'conditions' => array('level_3_id' => $level3_listid)));
                    $surveynoid = $surveynoid[0]['Level3_property']['surveynotype_id'];
                    $flag = 'Y';
                }
                $drop2 = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $lang), 'conditions' => array('level_4_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level4_id'), 'conditions' => array('level3_id' => $level3_list[0]['Level3_property']['level_3_id'], 'village_id' => $_GET['village_id'], 'prop_level2_list_id' => $_GET['level2_list_id']))))));

                $variable = array('data1' => $drop1,
                    'data2' => $drop2,
                    'surveyno' => $surveynoid,
                    'flag' => $flag
                );

                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel4_list() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Level4_property');
            $this->loadModel('Level4');

            if (isset($_GET['level4_list'])) {
                $level4_listid = $_GET['level4_list'];
                $level4_list = ClassRegistry::init('Level4_property')->find('all', array('fields' => array('Level4_property.level_4_id'), 'conditions' => array('level_4_id' => $level4_listid)));
                //------------QP on date 2dec by kalyani--------------------------------------
                $check = $this->Level4->query("select * from ngdrstab_mst_loc_level_4_prop_list where level_4_id=?", array($level4_list[0]['Level4_property']['level_4_id']));
                if ($check[0][0]['level_4_from_range'] == '' && $check[0][0]['level_4_to_range'] == '') {
                    $level4list_name = ClassRegistry::init('Level4')->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_' . $lang), 'conditions' => array('prop_level4_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level4_list_id'), 'conditions' => array('level4_id' => $level4_list[0]['Level4_property']['level_4_id'], 'village_id' => $_GET['village_id'], 'prop_level3_list_id' => $_GET['level3_list_id']))))));
                    $flag = 'N';
                    $surveynoid = NULL;
                } else {
                    $level4list_name = ClassRegistry::init('Level4')->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.name'), 'conditions' => array('level_4_id' => $level4_list[0]['Level4_property']['level_4_id'])));
                    $surveynoid = ClassRegistry::init('Level4_property')->find('all', array('fields' => array('Level4_property.surveynotype_id'), 'conditions' => array('level_4_id' => $level4_listid)));
                    $surveynoid = $surveynoid[0]['Level4_property']['surveynotype_id'];
                    $flag = 'Y';
                }

                $variable = array('data1' => $level4list_name,
                    'surveyno' => $surveynoid,
                    'flag' => $flag,
                );

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['level4list'] = $level4list_name;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));


                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel1surveynoid() {
        try {


            if (isset($_GET['level1_list_id'])) {
                $list1id = $_GET['level1_list_id'];
                $range = ClassRegistry::init('Level1')->find('all', array('fields' => array('Level1.level_1_from_range', 'Level1.level_1_to_range'), 'conditions' => array('prop_level1_list_id' => $list1id)));
                $frange = $range[0]['Level1']['level_1_from_range'];
                $trange = $range[0]['Level1']['level_1_to_range'];

                $variable = array(
                    'frange' => $frange,
                    'trange' => $trange
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel2surveynoid() {
        try {


            if (isset($_GET['level2_list_id'])) {
                $list2id = $_GET['level2_list_id'];
                $range = ClassRegistry::init('Level2')->find('all', array('fields' => array('Level2.level_2_from_range', 'Level2.level_2_to_range'), 'conditions' => array('prop_level2_list_id' => $list2id)));
                $frange = $range[0]['Level2']['level_2_from_range'];
                $trange = $range[0]['Level2']['level_2_to_range'];

                $variable = array(
                    'frange' => $frange,
                    'trange' => $trange
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel3surveynoid() {
        try {


            if (isset($_GET['level3_list_id'])) {
                $list3id = $_GET['level3_list_id'];
                $range = ClassRegistry::init('Level3')->find('all', array('fields' => array('Level3.level_3_from_range', 'Level3.level_3_to_range'), 'conditions' => array('prop_leve3_list_id' => $list3id)));
                $frange = $range[0]['Level3']['level_3_from_range'];
                $trange = $range[0]['Level3']['level_3_to_range'];

                $variable = array(
                    'frange' => $frange,
                    'trange' => $trange
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel4surveynoid() {
        try {


            if (isset($_GET['level4_list_id'])) {
                $list4id = $_GET['level4_list_id'];
                $range = ClassRegistry::init('Level4')->find('all', array('fields' => array('Level4.level_4_from_range', 'Level4.level_4_to_range'), 'conditions' => array('prop_level4_list_id' => $list4id)));
                $frange = $range[0]['Level4']['level_4_from_range'];
                $trange = $range[0]['Level4']['level_4_to_range'];

                $variable = array(
                    'frange' => $frange,
                    'trange' => $trange
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function gettaluka() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['dist'])) {
                $dist = $_GET['dist'];
                $talukaid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.taluka_id'), 'conditions' => array('district_id' => array($dist))));
                $talukalist = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_en'), 'conditions' => array('taluka_id' => $talukaid)));

                $file = new File(WWW_ROOT . 'files/jsonratefile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['taluka'] = $talukalist;
                $file = new File(WWW_ROOT . 'files/jsonratefile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($talukalist);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            // //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getratedropdown() {
        try {
            $searchvillage = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'), 'conditions' => array('village_id' => ClassRegistry::init('rate')->find('list', array('fields' => array('rate.village_id'))))));

            echo json_encode($searchvillage);
            exit;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getsurveyratedropdown() {
        try {
            $searchvillage = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'), 'conditions' => array('village_id' => ClassRegistry::init('surveynorate')->find('list', array('fields' => array('surveynorate.village_id'))))));

            echo json_encode($searchvillage);
            exit;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependancy for usage sub category
    public function getusagesub() {
        try {
            if (isset($_GET['usage_main_catg_id'])) {
                $usage_main_catg_id = $_GET['usage_main_catg_id'];
                $subid = ClassRegistry::init('Usagemain')->find('list', array('fields' => array('Usagemain.usage_sub_catg_id'), 'conditions' => array('usage_main_catg_id' => array($usage_main_catg_id))));
                $usagesubname = ClassRegistry::init('Usagesub')->find('list', array('fields' => array('Usagesub.usage_sub_catg_id', 'Usagesub.usage_sub_catg_desc_en'), 'conditions' => array('usage_sub_catg_id' => $subid)));
                echo json_encode($usagesubname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependancy for usage sub sub category
    public function getusagesubsub() {
        try {
            if (isset($_GET['usage_sub_catg_id'])) {
                $usage_sub_catg_id = $_GET['usage_sub_catg_id'];
                $subsubid = ClassRegistry::init('Usagemain')->find('list', array('fields' => array('Usagemain.usage_sub_sub_catg_id'), 'conditions' => array('usage_sub_catg_id' => array($usage_sub_catg_id))));
                $usagesubsubname = ClassRegistry::init('Usagesubsub')->find('list', array('fields' => array('Usagesubsub.usage_sub_sub_catg_id', 'Usagesubsub.usage_sub_sub_catg_desc_en'), 'conditions' => array('usage_sub_sub_catg_id' => $subsubid)));
                echo json_encode($usagesubsubname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function depreciation() {
        try {

            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('depreciation');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->request->data['depreciation']['req_ip'] = $this->request->clientIp();
            $this->request->data['depreciation']['user_id'] = $user_id;
            // $this->request->data['depreciation']['created_date'] = $created_date;
            $this->set('depreciationrecord', $this->depreciation->find('all'));
            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['deprication_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumericspace,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['deprication_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['depreciation']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $errarr = $this->validatedata($this->request->data['depreciation'], $fieldlist);
                $flag = 0;
                foreach ($errarr as $dd) {
                    if ($dd != "") {
                        $flag = 1;
                    }
                }
                if ($flag == 1) {
                    $this->set("errarr", $errarr);
                } else {
                    if ($actiontype == '1') {

                        $this->set('actiontypeval', $actiontype);
                        if ($this->depreciation->save($this->request->data['depreciation'])) {
                            $this->Session->setFlash(__("lblsavemsg"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'depreciation'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('actiontypeval', $actiontype);
                    }
                    if ($actiontype == '3') {
                        $this->set('actiontypeval', $actiontype);
                        $this->request->data['depreciation']['id'] = $hfid;

                        if ($this->depreciation->Save($this->request->data['depreciation'])) {
                            $this->Session->setFlash(__('lbleditmsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'depreciation'));
                        } else {
                            $this->Session->setFlash(__('lblnoteditmsg '));
                        }
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function deprication_type_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('depreciation');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->depreciation->id = $id;
                if ($this->depreciation->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'depreciation'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function constructiontype() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'constructiontype', 'mainlanguage', 'language'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $actiontypeval = $hfid = $hfupdateflag = NULL;
            $this->set('hfupdateflag', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('Constructiontyperecord', $this->constructiontype->find('all'));
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['construction_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['construction_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['hfupdateflag']['text'] = 'is_flag';
            $fieldlist['hfid']['text'] = 'is_numeric';
            $fieldlist['hfaction']['text'] = 'is_flag';
            $fieldlist['csrftoken']['text'] = 'is_numeric';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['constructiontype']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfid = $_POST['hfid'];
                $hfupdateflag = $_POST['hfupdateflag'];
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['constructiontype']['req_ip'] = $this->request->clientIp();
                        $this->request->data['constructiontype']['user_id'] = $user_id;
                        $this->request->data['constructiontype']['created_date'] = $created_date;
                        $this->request->data['constructiontype']['state_id'] = $stateid;
                        $this->request->data['constructiontype']['actiontype'] = $actiontype;
                        $this->request->data['constructiontype']['hfaction'] = $hfactionval;
                        $this->request->data['constructiontype']['stateid'] = $stateid;
                        $this->request->data['constructiontype']['hfid'] = $hfid;
                        $this->request->data['constructiontype']['hfupdateflag'] = $hfupdateflag;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['constructiontype']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['constructiontype'] = $this->istrim($this->request->data['constructiontype']);
                        $errarr = $this->validatedata($this->request->data['constructiontype'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->constructiontype->save($this->request->data['constructiontype'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'constructiontype'));
                                $this->set('Constructiontyperecord', $this->constructiontype->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function construction_type_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('constructiontype');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->constructiontype->id = $id;
                if ($this->constructiontype->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'constructiontype'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function village() {

        try {
            $this->set('language', NULL);
            $this->loadModel('VillageMapping');
            $this->loadModel('Developedlandtype');
            $this->loadModel('Level1');
            $this->loadModel('Level2');
            $this->loadModel('Level3');
            $this->loadModel('Level4');
            $this->set('actiontypeval', NULL);
            $this->loadModel('levellist');

            $this->loadModel('Levels_1_property');
            $this->loadModel('Level2_property');
            $this->loadModel('Level3_property');
            $this->loadModel('Level4_property');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('District');
            $this->loadModel('levelconfig');
            $user_id = $this->Auth->User("user_id");
            $language = $this->Session->read("sess_langauge");
            $stateid = $this->Auth->User("state_id");
            $this->set('level1propertydata', NULL);
            $this->set('level2propertydata', NULL);
            $this->set('level3propertydata', NULL);
            $this->set('level4propertydata', NULL);

            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $districtnname = $this->District->find('list', array('fields' => array('District.id', 'District.district_name_' . $lang), 'conditions' => array('state_id' => $stateid)));
            $this->set('districtdata', $districtnname);

            $configure = $this->levelconfig->find('all', array('Conditions', array('state_id' => $stateid)));
            $this->set('configure', $configure);


            if ($configure[0]['levelconfig']['is_level_1_id'] == 1) {

                $level1propertyname = $this->Levels_1_property->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $lang)));
                $this->set('level1propertydata', $level1propertyname);
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 1)) {
                $level2propertyname = $this->Level2_property->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $lang)));
                $this->set('level2propertydata', $level2propertyname);
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 1)) {
                $level3propertyname = $this->Level3_property->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_en')));
                $this->set('level3propertydata', $level3propertyname);
            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 0 && ($configure[0]['levelconfig']['is_level_4_id'] == 1))) {
                $level4propertyname = $this->Level4_property->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_5_desc_en')));
                $this->set('level4propertydata', $level4propertyname);
            }
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['village']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);

                    if ($this->levellist->save($this->request->data['village'])) {
                        $this->Session->setFlash(__('lblsavemsg'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'village'));
                    } else {
                        $this->Session->setFlash(__('lblnotsavemsg'));
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    //dependeciees for village
    public function getlandtype_village() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }

            if (isset($_GET['village'])) {
                $distid = $_GET['village'];
                $landid = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('damblkdpnd.developed_land_types_id'), 'conditions' => array('district_id' => $distid)));
                $landtypename = ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
                echo json_encode($landtypename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependeciees for Land Type in Rate Form
    public function getlandtype() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }

            if (isset($_GET['distid'])) {
                $distid = $_GET['distid'];
                $landid = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.developed_land_types_id'), 'conditions' => array('id' => $distid)));
                $landtypename = ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
//                $vname = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('VillageMapping.village_id', 'VillageMapping.village_name_' . $lang), 'conditions' => array('state_id' => $villagename)));
                echo json_encode($landtypename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependeciees for Valuatin Sub Zone in Rate Form
    public function getvalsubzone() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }

            if (isset($_GET['valzone'])) {
                $valzone = $_GET['valzone'];
                $valsubzone = ClassRegistry::init('valuationsubzone')->find('list', array('fields' => array('valutation_subzone_id', 'name'), 'conditions' => array('valutation_zone_id' => $valzone)));
//                $landtypename = ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
//                $vname = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('VillageMapping.village_id', 'VillageMapping.village_name_' . $lang), 'conditions' => array('state_id' => $villagename)));
                echo json_encode($valsubzone);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    // dependancy for village name in village form
    public function getvillagename_village() {
        try {
            $this->loadModel('VillageMapping');
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }

            if (isset($_GET['dist'])) {
                $dist = $_GET['dist'];
//                $villagename = $this->VillageMapping->find('list', array(
//                    'fields' => array('rate.village_id', 'VillageMapping.village_name_' . $lang),
//                    'joins' => array(array('table' => 'ngdrstab_mst_rate',
//                            'alias' => 'rate',
//                            'type' => 'inner',
//                            'conditions' => array('VillageMapping.developed_land_types_id=' . $landid, 'VillageMapping.village_id = rate.village_id')
//                        ))
//                        )
//                );
                $vilagename = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('village_id', 'village_name_' . $lang), 'conditions' => array('district_id' => $dist)));
//                $zonename = ClassRegistry::init('valuationzone')->find('list', array('fields' => array('valutation_zone_id', 'valuation_zone_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
//                $variable = array('data1' => $villagename,
//                    'data2' => $zonename
//                );
                echo json_encode($vilagename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependeciees for Village name and Valuation Zone in Rate Form
    public function getvillagename() {
        try {
            $this->loadModel('VillageMapping');
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }

            if (isset($_GET['taluka'])) {
                $taluka = $_GET['taluka'];
//                $villagename = $this->VillageMapping->find('list', array(
//                    'fields' => array('rate.village_id', 'VillageMapping.village_name_' . $lang),
//                    'joins' => array(array('table' => 'ngdrstab_mst_rate',
//                            'alias' => 'rate',
//                            'type' => 'inner',
//                            'conditions' => array('VillageMapping.developed_land_types_id=' . $landid, 'VillageMapping.village_id = rate.village_id')
//                        ))
//                        )
//                );
//                $zonename = ClassRegistry::init('valuationzone')->find('list', array('fields' => array('valutation_zone_id', 'valuation_zone_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
//                $variable = array('data1' => $villagename,
//                    'data2' => $zonename
//                );
                $villagename = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('village_id', 'village_name_' . $lang), 'conditions' => array('taluka_id' => $taluka)));
                echo json_encode($villagename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependeciees for Level1 in Rate Form
    public function getlevel1() {
        try {

            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('levelconfig');
            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['villagename'])) {
                $villageid = $_GET['villagename'];
                $configure = $this->levelconfig->find('all', array('Conditions', 'state_id' => $stateid));
                $level1id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level1_id'), 'conditions' => array('village_id' => $villageid)));

                if ($configure[0]['levelconfig']['is_level_1_id'] == 1) {
                    $level1id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level1_id'), 'conditions' => array('village_id' => $villageid)));
                    $level = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1id)));
                } else if ($configure[0]['levelconfig']['is_level_1_id'] == 0 && $configure[0]['levelconfig']['is_level_2_id'] == 1) {
                    $level2id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level2_id'), 'conditions' => array('village_id' => $villageid)));
                    $level = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $lang), 'conditions' => array('level_2_id' => $level2id)));
                } else if ($configure[0]['levelconfig']['is_level_1_id'] == 0 && $configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 1) {
                    $level3id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level2_id'), 'conditions' => array('village_id' => $villageid)));
                    $level = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $lang), 'conditions' => array('level_3_id' => $level3id)));
                } else if ($configure[0]['levelconfig']['is_level_1_id'] == 0 && $configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 0 && $configure[0]['levelconfig']['is_level_4_id'] == 1) {
                    $level4id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level2_id'), 'conditions' => array('village_id' => $villageid)));
                    $level = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $lang), 'conditions' => array('level_4_id' => $level4id)));
                }
                $landid = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('developed_land_types_id'), 'conditions' => array('village_id' => $villageid)));
                $zonename = ClassRegistry::init('valuationzone')->find('list', array('fields' => array('valutation_zone_id', 'valuation_zone_desc_' . $lang), 'conditions' => array('developed_land_types_id' => $landid)));
                $variable = array('data1' => $level,
                    'data2' => $zonename
                );
                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getvisibility() {
        try {


            if (isset($_GET['usage_sub_sub_catg_id'])) {
                $usagesubsubid = $_GET['usage_sub_sub_catg_id'];
                $flag = ClassRegistry::init('usage_sub_sub_category')->find('all', array('fields' => array('usage_sub_sub_category.contsruction_type_flag', 'usage_sub_sub_category.road_vicinity_flag', 'usage_sub_sub_category.user_defined_dependency1_flag', 'usage_sub_sub_category.user_defined_dependency2_flag'), 'conditions' => array('usage_sub_sub_catg_id' => $usagesubsubid)));
                $cflag = $flag[0]['usage_sub_sub_category']['contsruction_type_flag'];
                $rflag = $flag[0]['usage_sub_sub_category']['road_vicinity_flag'];
                $ud1flag = $flag[0]['usage_sub_sub_category']['user_defined_dependency1_flag'];
                $ud2flag = $flag[0]['usage_sub_sub_category']['user_defined_dependency2_flag'];

                $variable = array(
                    'cflag' => $cflag,
                    'rflag' => $rflag,
                    'ud1flag' => $ud1flag,
                    'ud2flag' => $ud2flag
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

//    public function itemrate() {
//        try {
//
//            $this->loadModel('itemrate');
//            $this->loadModel('surveynorate');
//            $this->loadModel('State');
//            $this->loadModel('User');
//            $this->loadModel('levelconfig');
//            $this->loadModel('Usagemain');
//
//            $this->set('actiontypeval', NULL);
//            $this->set('hfid', NULL);
//            $this->set('language', NULL);
//            $this->set('villagenname', NULL);
//            $this->set('level1propertydata', NULL);
//            $this->set('level2propertydata', NULL);
//            $this->set('level3propertydata', NULL);
//            $this->set('level4propertydata', NULL);
//            $this->set('hfupdateflag', NULL);
//            $this->set('saveflag', NULL);
//            $this->set('selectflag', NULL);
//            $this->set('surveyno', NULL);
//            $this->set('raterecord', NULL);
//            $this->set('gridrecord', NULL);
//            $this->set('searchvillage', NULL);
//            $this->set('searchvillageid', NULL);
//            $user_id = $this->Auth->User("user_id");
//            $language = $this->Session->read("sess_langauge");
//            $this->set('language', $language);
//            $stateid = $this->Auth->User("state_id");
//            $date = date('Y/m/d H:i:s');
//            $created_date = date('Y/m/d');
//            $req_ip = $_SERVER['REMOTE_ADDR'];
//            $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_en' => 'ASC'))));
//            $this->set('villagenname', ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('village_id', 'village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_en' => 'ASC'))));
//            $this->set('Developedland', ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('developed_land_types_id', 'developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC'))));
//            $this->set('level1propertydata', ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $language), 'order' => array('level_1_desc_en' => 'ASC'))));
//            $this->set('level2propertydata', ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $language), 'order' => array('level_2_desc_en' => 'ASC'))));
//            $this->set('level3propertydata', ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $language), 'order' => array('level_3_desc_en' => 'ASC'))));
//            $this->set('level4propertydata', ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $language), 'order' => array('level_4_desc_en' => 'ASC'))));
//            $this->set('level1propertylist', ClassRegistry::init('Level1')->find('list', array('fields' => array('prop_level1_list_id', 'list_1_desc_' . $language), 'order' => array('list_1_desc_en' => 'ASC'))));
//            $this->set('level2propertylist', ClassRegistry::init('Level2')->find('list', array('fields' => array('prop_level2_list_id', 'list_2_desc_' . $language), 'order' => array('list_2_desc_en' => 'ASC'))));
//            $this->set('level3propertylist', ClassRegistry::init('Level3')->find('list', array('fields' => array('prop_leve3_list_id', 'list_3_desc_' . $language), 'order' => array('list_3_desc_en' => 'ASC'))));
//            $this->set('level4propertylist', ClassRegistry::init('Level4')->find('list', array('fields' => array('prop_level4_list_id', 'list_4_desc_' . $language), 'order' => array('list_4_desc_en' => 'ASC'))));
//            $this->set('usagesub', ClassRegistry::init('Usagesub')->find('list', array('fields' => array('usage_sub_catg_id', 'usage_sub_catg_desc_' . $language), 'order' => array('usage_sub_catg_desc_en' => 'ASC'))));
//            $this->set('usagesubsub', ClassRegistry::init('Usagesubsub')->find('list', array('fields' => array('usage_sub_sub_catg_id', 'usage_sub_sub_catg_desc_' . $language), 'order' => array('usage_sub_sub_catg_desc_en' => 'ASC'))));
//            $this->set('constuctiontype', ClassRegistry::init('constructiontype')->find('list', array('fields' => array('construction_type_id', 'construction_type_desc_' . $language), 'order' => array('construction_type_desc_en' => 'ASC'))));
//            $this->set('roadvicinity', ClassRegistry::init('roadvicinity')->find('list', array('fields' => array('road_vicinity_id', 'road_vicinity_desc_' . $language), 'order' => array('road_vicinity_desc_en' => 'ASC'))));
//            $this->set('userdependency1', ClassRegistry::init('user_defined_dependancy1')->find('list', array('fields' => array('user_defined_dependency1_id', 'user_defined_dependency1_desc_' . $language), 'order' => array('user_defined_dependency1_desc_en' => 'ASC'))));
//            $this->set('userdependency2', ClassRegistry::init('user_defined_dependancy2')->find('list', array('fields' => array('user_defined_dependency2_id', 'user_defined_dependency2_desc_' . $language), 'order' => array('user_defined_dependency2_desc_en' => 'ASC'))));
//            $this->set('finyear', ClassRegistry::init('finyear')->find('list', array('fields' => array('finyear_id', 'finyear_desc'), 'order' => array('finyear.current_year' => 'desc'))));
//            $this->set('ratetypedata', ClassRegistry::init('ratetype')->find('list', array('fields' => array('ratetype_id', 'ratetype_desc_' . $language), 'order' => array('ratetype_desc_en' => 'ASC'))));
//            $this->set('propunit', ClassRegistry::init('Propertyunit')->find('list', array('fields' => array('unit_id', 'unit_desc_' . $language), 'order' => array('unit_desc_' . $language => 'ASC'))));
//            $this->set('itemlist', ClassRegistry::init('usagelnkitemlist')->find('list', array('fields' => array('usage_param_id', 'usage_param_desc_' . $language), 'order' => array('usage_param_desc_en' => 'ASC'))));
//            $configure = $this->levelconfig->find('all', array('Conditions', array('state_id' => $stateid)));
//            $this->set('configure', $configure);
//            $usagemain = $this->Usagemain->find('list', array(
//                'fields' => array('Usagemain.usage_main_catg_id', 'grp.usage_main_catg_desc_en'),
//                'joins' => array(array('table' => 'ngdrstab_mst_usage_main_category',
//                        'alias' => 'grp',
//                        'type' => 'left outer',
//                        'conditions' => array('Usagemain.usage_main_catg_id = grp.usage_main_catg_id', 'Usagemain.state_id= grp.state_id')
//                    ))
//                    )
//            );
//            $this->set('usagemain', $usagemain);
//
//            if ($configure[0]['levelconfig']['is_level_1_id'] == 1) {
//                $this->set('level1propertydata', ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $language))));
//            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 1)) {
//                $this->set('level2propertydata', ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $language))));
//            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 1)) {
//                $this->set('level3propertydata', ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $language))));
//            } else if (($configure[0]['levelconfig']['is_level_1_id'] == 0) && ($configure[0]['levelconfig']['is_level_2_id'] == 0) && ($configure[0]['levelconfig']['is_level_3_id'] == 0 && ($configure[0]['levelconfig']['is_level_4_id'] == 1))) {
//                $this->set('level4propertydata', ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $language))));
//            }
//            if ($this->request->is('post')) {
//                $actiontype = $_POST['actiontype'];
//                $hfid = $_POST['id1'];
//                $this->set('hfid', $hfid);
//                $this->request->data['itemrate']['state_id'] = $stateid;
//                $searchvillageid = $this->request->data['itemrate']['searchvillage'];
//                $this->set('searchvillageid', $searchvillageid);
//                if ($actiontype == '1') {
//                    $saveflag = $this->request->data['saveflag'];
//                    $this->set('saveflag', $saveflag);
//                    $this->set('actiontypeval', $actiontype);
//                    $villageid = $this->request->data['itemrate']['village_id'];
//                    //-------------QP on 2dec by kalyani--------------------------------------
//                    $villagedata = $this->levelconfig->query("select * from ngdrstab_conf_admblock7_village_mapping where village_id=?", array($villageid));
//                    $this->request->data['itemrate']['state_id'] = $villagedata[0][0]['state_id'];
//                    $this->request->data['itemrate']['division_id'] = $villagedata[0][0]['division_id'];
//                    $this->request->data['itemrate']['district_id'] = $villagedata[0][0]['state_id'];
//                    $this->request->data['itemrate']['taluka_id'] = $villagedata[0][0]['taluka_id'];
//                    $this->request->data['itemrate']['subdivision_id'] = $villagedata[0][0]['subdivision_id'];
//                    $this->request->data['itemrate']['circle_id'] = $villagedata[0][0]['circle_id'];
//                    $this->request->data['itemrate']['ulb_type_id'] = $villagedata[0][0]['ulb_type_id'];
//                    $this->request->data['itemrate']['corp_id'] = $villagedata[0][0]['corp_id'];
//                    $this->request->data['itemrate']['surveynotype_id'] = $this->request->data['surveyno'];
//                    $this->request->data['itemrate']['land_rate_unit'] = $this->request->data['itemrate']['prop_unit'];
//                    $this->request->data['itemrate']['construction_rate_unit'] = $this->request->data['itemrate']['prop_unit'];
//                    $this->request->data['itemrate']['req_ip'] = $req_ip;
//                    $this->request->data['itemrate']['user_id'] = $user_id;
//                    // $this->request->data['itemrate']['created_date'] = $created_date;
//                    if ($this->request->data['hfupdateflag'] == 'Y') {
//                        $this->request->data['itemrate']['id'] = $this->request->data['id1'];
//                        $actionvalue = "lbleditmsg";
//                    } else {
//                        $actionvalue = "lblsavemsg";
//                    }
//                    if ($this->itemrate->Save($this->request->data['itemrate'])) {
//                        $this->Session->setFlash(__($actionvalue));
//                    } else {
//                        $this->Session->setFlash(__("lblnotsavemsg"));
//                    }
//                }
//                if ($actiontype == '2') {
//                    $this->set('actiontypeval', $actiontype);
//                }
//                if ($actiontype == '3') {
//                    $this->set('actiontypeval', $actiontype);
//                    $villageid = $this->request->data['itemrate']['searchvillage'];
//                    $this->set('searchvillage', $villageid);
//                    $searchbtn = $_POST['selectflag'];
//                    $this->set('selectflag', $searchbtn);
//                    if ($villageid != NULL && isset($villageid) && is_numeric($villageid)) {
//                        //-------------QP and if condition checking on 2dec by kalyani--------------------------------------
//                        $raterecord = $this->levelconfig->query("select a.district_id,
//                a.village_id , b.village_name_en ,
//                a.developed_land_types_id ,  c.developed_land_types_desc_en,
//                a.level1_id , d.level_1_desc_en,
//                a.level2_id , e.level_2_desc_en,
//                a.level3_id , f.level_3_desc_en,
//                a.level4_id , g.level_4_desc_en,
//                a.level1_list_id , h.list_1_desc_en,
//                a.level2_list_id , i.list_2_desc_en,
//                a.level3_list_id , j.list_3_desc_en,
//                a.level4_list_id , k.list_4_desc_en,
//                a.range_from, a.range_to,
//                a.usage_main_catg_id , l.usage_main_catg_desc_en,l.usage_main_catg_desc_ll,
//                a.usage_sub_catg_id , m.usage_sub_catg_desc_en,m.usage_sub_catg_desc_ll,
//                a.usage_sub_sub_catg_id , n.usage_sub_sub_catg_desc_en,n.usage_sub_sub_catg_desc_ll,
//                a.prop_unit, o.unit_desc_en,
//                a.prop_rate, a.id , 
//                a.construction_rate,a.land_rate,a.slab_rate_flag,
//                a.construction_type_id,
//                a.road_vicinity_id,
//                a.user_defined_dependency_1,
//                a.user_defined_dependency_2,
//                a.rate_financial_year,
//                z.is_developed_land_types_id,z.is_level_1_id,z.is_level_2_id,z.is_level_3_id,z.is_level_4_id
//                from ngdrstab_mst_item_rate a
//                left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id	
//                left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
//                left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id
//                left outer join ngdrstab_mst_location_levels_2_property e on e.level_2_id = a.level2_id
//                left outer join ngdrstab_mst_location_levels_3_property f on f.level_3_id = a.level3_id 
//                left outer join ngdrstab_mst_location_levels_4_property g on g.level_4_id = a.level4_id
//                left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id 
//                left outer join ngdrstab_mst_loc_level_2_prop_list i on i.prop_level2_list_id = a.level2_list_id
//                left outer join ngdrstab_mst_loc_level_3_prop_list j on j.prop_leve3_list_id = a.level3_list_id 
//                left outer join ngdrstab_mst_loc_level_4_prop_list k on k.prop_level4_list_id = a.level4_list_id
//                left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
//                left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
//                left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
//                left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit
//                left outer join ngdrstab_conf_level z on z.state_id = a.state_id
//                where a.village_id = ? ", array($villageid));
//                    } else {
//
//                        $raterecord = $this->levelconfig->query("select a.district_id,
//                a.village_id , b.village_name_en ,
//                a.developed_land_types_id ,  c.developed_land_types_desc_en,
//                a.level1_id , d.level_1_desc_en,
//                a.level2_id , e.level_2_desc_en,
//                a.level3_id , f.level_3_desc_en,
//                a.level4_id , g.level_4_desc_en,
//                a.level1_list_id , h.list_1_desc_en,
//                a.level2_list_id , i.list_2_desc_en,
//                a.level3_list_id , j.list_3_desc_en,
//                a.level4_list_id , k.list_4_desc_en,
//                a.range_from, a.range_to,
//                a.usage_main_catg_id , l.usage_main_catg_desc_en,l.usage_main_catg_desc_ll,
//                a.usage_sub_catg_id , m.usage_sub_catg_desc_en,m.usage_sub_catg_desc_ll,
//                a.usage_sub_sub_catg_id , n.usage_sub_sub_catg_desc_en,n.usage_sub_sub_catg_desc_ll,
//                a.prop_unit, o.unit_desc_en,
//                a.prop_rate, a.id , 
//                a.construction_rate,a.land_rate,a.slab_rate_flag,
//                a.construction_type_id,
//                a.road_vicinity_id,
//                a.user_defined_dependency_1,
//                a.user_defined_dependency_2,
//                a.rate_financial_year,
//                z.is_developed_land_types_id,z.is_level_1_id,z.is_level_2_id,z.is_level_3_id,z.is_level_4_id
//                from ngdrstab_mst_item_rate a
//                left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id	
//                left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
//                left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id
//                left outer join ngdrstab_mst_location_levels_2_property e on e.level_2_id = a.level2_id
//                left outer join ngdrstab_mst_location_levels_3_property f on f.level_3_id = a.level3_id 
//                left outer join ngdrstab_mst_location_levels_4_property g on g.level_4_id = a.level4_id
//                left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id 
//                left outer join ngdrstab_mst_loc_level_2_prop_list i on i.prop_level2_list_id = a.level2_list_id
//                left outer join ngdrstab_mst_loc_level_3_prop_list j on j.prop_leve3_list_id = a.level3_list_id 
//                left outer join ngdrstab_mst_loc_level_4_prop_list k on k.prop_level4_list_id = a.level4_list_id
//                left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
//                left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
//                left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
//                left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit
//                left outer join ngdrstab_conf_level z on z.state_id = a.state_id");
//                    }
//
//                    if ($_POST['saveflag'] == 'Y') {
//                        $this->set('raterecord', $raterecord);
//                        $this->set('saveflag', 'Y');
//                    } else {
//                        $this->set('raterecord', $raterecord);
//                        $this->set('saveflag', 'N');
//                    }
//                    if ($searchbtn == 'Y') {
//                        if ($hfid != NULL && isset($hfid) && is_numeric($hfid)) {
//                            //-------------QP and if condition checking on 2dec by kalyani--------------------------------------
//                            $gridrecord = $this->levelconfig->query("select a.*,b.village_name_en,c.developed_land_types_desc_en,d.level_1_desc_en,e.level_2_desc_en,f.level_3_desc_en,
//                        g.level_4_desc_en, h.list_1_desc_en,i.list_2_desc_en,j.list_3_desc_en,k.list_4_desc_en,l.usage_main_catg_desc_en,
//                        m.usage_sub_catg_desc_en,n.usage_sub_sub_catg_desc_en,o.unit_desc_en,p.finyear_desc,q.district_name_en,
//                        r.construction_type_desc_en,s.road_vicinity_desc_en,user_defined_dependency1_desc_en,u.user_defined_dependency2_desc_en,
//                        v.surveynotype_desc_en,w.ratetype_desc_en,x.usage_param_desc_en
//                        from ngdrstab_mst_item_rate a
//                        left outer join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id
//                        left outer join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
//                        left outer join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id
//                        left outer join ngdrstab_mst_location_levels_2_property e on e.level_2_id = a.level2_id
//                        left outer join ngdrstab_mst_location_levels_3_property f on f.level_3_id = a.level3_id 
//                        left outer join ngdrstab_mst_location_levels_4_property g on g.level_4_id = a.level4_id
//                        left outer join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id 
//                        left outer join ngdrstab_mst_loc_level_2_prop_list i on i.prop_level2_list_id = a.level2_list_id
//                        left outer join ngdrstab_mst_loc_level_3_prop_list j on j.prop_leve3_list_id = a.level3_list_id 
//                        left outer join ngdrstab_mst_loc_level_4_prop_list k on k.prop_level4_list_id = a.level4_list_id
//                        left outer join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
//                        left outer join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
//                        left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
//                        left outer join ngdrstab_mst_unit o on o.unit_id = a.prop_unit 
//                        left outer join ngdrstab_mst_finyear p on p.finyear_id = a.rate_financial_year 
//                        left outer join ngdrstab_conf_admblock3_district q on q.district_id = a.district_id 
//                        left outer join ngdrstab_mst_construction_type r on r.construction_type_id = a.construction_type_id 
//                        left outer join ngdrstab_mst_road_vicinity s on s.road_vicinity_id = a.road_vicinity_id 
//                        left outer join ngdrstab_mst_user_def_depe1 t on t.user_defined_dependency1_id = a.user_defined_dependency_1 
//                        left outer join ngdrstab_mst_user_def_depe2 u on u.user_defined_dependency2_id = a.user_defined_dependency_2
//                        left outer join ngdrstab_mst_surveyno_type v on v.surveynotype_id = a.surveynotype_id
//                        left outer join ngdrstab_mst_ratetype w on w.ratetype_id = a.ratetype_id
//                        left outer join ngdrstab_mst_usage_items_list x on x.usage_param_id = a.usage_param_id
//                        where a.id=? ", array($hfid));
//                            $this->set('gridrecord', $gridrecord);
//                        }
//                    }
//                }
//
//                if ($actiontype == '4') {
//                    $this->set('actiontypeval', $actiontype);
//                    if ($hfid != NULL) {
//                        $this->itemrate->id = $hfid;
//                        if ($this->itemrate->delete()) {
//                            $this->Session->setFlash(__('lbldeletemsg'));
//                            $this->redirect(array('controller' => 'Masters', 'action' => 'itemrate'));
//                        } else {
//                            $this->Session->setFlash(__('lblnotdeletemsg'));
//                        }
//                    }
//                }
//            }
//        } catch (Exception $ex) {
//            pr($ex);
//            exit;
//        }
//    }

    public function itemrate() {
        try {
            $this->loadModel('itemrate');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $this->set('finyear', ClassRegistry::init('finyear')->find('list', array('fields' => array('finyear_id', 'finyear_desc'), 'order' => array('finyear.current_year' => 'desc'))));
            $this->set('divisiondata', ClassRegistry::init('division')->find('list', array('fields' => array('division_id', 'division_name_' . $language), 'order' => array('division_name_en' => 'ASC'))));
            $this->set('Developedland', ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('developed_land_types_id', 'developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC'))));
            $this->set('valuationzone', ClassRegistry::init('valuationzone')->find('list', array('fields' => array('valutation_zone_id', 'valuation_zone_desc_' . $language), 'order' => array('valuation_zone_desc_en' => 'ASC'))));
            $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('taluka_name_' . $language => 'ASC'))));
            $this->set('village', ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('id', 'village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_' . $language => 'ASC'))));
            $this->set('itemlist', ClassRegistry::init('usagelnkitemlist')->find('list', array('fields' => array('usage_param_id', 'usage_param_desc_' . $language), 'order' => array('usage_param_desc_en' => 'ASC'))));

            $itemrate = $this->itemrate->query("select a.id,a.finyear_id,a.district_id,a.division_id,a.taluka_id,a.developed_land_types_id,
                    a.village_id,a.valutation_zone_id,a.finyear_flag,a.district_flag,a.division_flag,a.taluka_flag,a.valutation_zone_flag,
                    a.village_flag,a.developed_land_types_flag,a.item_rate,a.usage_param_id,
                    b.usage_param_desc_$language
                    from ngdrstab_mst_item_rate a
                    inner join ngdrstab_mst_usage_items_list b on b.usage_param_id = a.usage_param_id
                    where b.state_id=?", array($stateid));

            $this->set('itemrate', $itemrate);
            //validations kalyani 10 august 2017
            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['usage_param_id']['select'] = 'is_select_req';
            $fieldlist['item_rate']['text'] = 'is_required,is_integer';
            $fieldlist['finyear_id']['select'] = 'is_select_req';
            $fieldlist['finyear_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['finyear_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['district_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['district_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['taluka_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['taluka_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['developed_land_types_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['developed_land_types_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['division_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['division_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['village_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['village_id']['select'] = 'is_select_req'; //dependent
            $fieldlist['valutation_zone_flag']['radio'] = 'is_yes_no_imp';
            $fieldlist['valutation_zone_id']['select'] = 'is_select_req'; //dependent

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
//                pr($this->request->data);exit;
                $fieldlistnew = $this->modifyfieldlistitemrate($fieldlist, $this->request->data['itemrate']);
                $errarr = $this->validatedata($this->request->data['itemrate'], $fieldlistnew);

                if ($this->ValidationError($errarr)) {
                    $this->check_csrf_token($this->request->data['itemrate']['csrftoken']);
//                    PR($this->request->data);exit;
                    $this->request->data['itemrate']['state_id'] = $this->Auth->User('state_id');
                    $this->request->data['itemrate']['user_id'] = $this->Auth->User('user_id');
                    //$this->request->data['itemrate']['created_date'] = date('Y/m/d H:i:s');
                    $this->request->data['itemrate']['req_ip'] = $_SERVER['REMOTE_ADDR'];
//                    $this->request->data['itemrate']['finyear_flag'] = $_POST['divfinyear'];
//                    $this->request->data['itemrate']['district_flag'] = $_POST['divdist'];
//                    $this->request->data['itemrate']['division_flag'] = $_POST['divdiv'];
//                    $this->request->data['itemrate']['taluka_flag'] = $_POST['divtal'];
//                    $this->request->data['itemrate']['village_flag'] = $_POST['divvil'];
//                    $this->request->data['itemrate']['developed_land_types_flag'] = $_POST['divdevl'];
//                    $this->request->data['itemrate']['valutation_zone_flag'] = $_POST['divvalzone'];
                    $this->set('actiontypeval', $_POST['actiontype']);
                    $this->set('hfid', $_POST['hfid']);
//               pr($this->request->data);exit;
                    if ($_POST['actiontype'] == '1') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['itemrate']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->itemrate->save($this->request->data['itemrate'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'itemrate'));
                        } else {
                            $this->Session->setFlash(__("lblnotsavemsg"));
                        }
                    }

                    if ($_POST['actiontype'] == 2) {
                        $this->redirect(array('controller' => 'Masters', 'action' => 'itemrate'));
                    }

                    if ($_POST['actiontype'] == '3') {
                        if ($_POST['hfid'] != NULL) {
                            $this->itemrate->id = $_POST['hfid'];
                            if ($this->itemrate->delete()) {
                                $this->Session->setFlash(__('lbldeletemsg'));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'itemrate'));
                            } else {
                                $this->Session->setFlash(__('lblnotdeletemsg'));
                            }
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function itemrate_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('itemrate');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'article') {
                $this->itemrate->id = $id;
                if ($this->itemrate->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'itemrate'));
                }
                // }
            }
        } catch (exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getCode())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function modifyfieldlistitemrate($fieldlist, $data) {
        if (isset($data['finyear_flag']) && $data['finyear_flag'] == 'N') {
            unset($fieldlist['finyear_id']);
        }
        if (isset($data['district_flag']) && $data['district_flag'] == 'N') {
            unset($fieldlist['district_id']);
        }
        if (isset($data['taluka_flag']) && $data['taluka_flag'] == 'N') {
            unset($fieldlist['taluka_id']);
        }
        if (isset($data['developed_land_types_flag']) && $data['developed_land_types_flag'] == 'N') {
            unset($fieldlist['developed_land_types_id']);
        }
        if (isset($data['division_flag']) && $data['division_flag'] == 'N') {
            unset($fieldlist['division_id']);
        }
        if (isset($data['village_flag']) && $data['village_flag'] == 'N') {
            unset($fieldlist['village_id']);
        }
        if (isset($data['valutation_zone_flag']) && $data['valutation_zone_flag'] == 'N') {
            unset($fieldlist['valutation_zone_id']);
        }
        return $fieldlist;
    }

    public function getitemratedropdown() {
        try {
            $searchvillage = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'), 'conditions' => array('village_id' => ClassRegistry::init('itemrate')->find('list', array('fields' => array('itemrate.village_id'))))));

            echo json_encode($searchvillage);
            exit;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function villagelevelmapping() {
        try {

            $this->loadModel('villagelevelmapping');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('VillageMapping');
            $this->loadModel('Developedlandtype');
            $this->loadModel('Level1');
            $this->loadModel('Level2');
            $this->loadModel('Level3');
            $this->loadModel('Level4');
            $this->loadModel('Levels_1_property');
            $this->loadModel('Level2_property');
            $this->loadModel('Level3_property');
            $this->loadModel('Level4_property');
            $this->loadModel('levelconfig');
            $this->set('selectvillagelevelmapping', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfname', NULL);
            $this->set('talukarecord', NULL);
            $this->set('taluka_id', NULL);
            $this->set('taluka', NULL);
            $user_id = $this->Session->read("session_user_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_en']);
            $language = $this->Session->read("sess_langauge");
            $this->set('language', $language);
            $configure = $this->levelconfig->find('all', array('Conditions', array('state_id' => $stateid)));
            $this->set('configure', $configure);
            $villagenname = $this->VillageMapping->find('list', array('fields' => array('VillageMapping.village_id', 'VillageMapping.village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_en' => 'ASC')));
            $this->set('villagenname', $villagenname);
            $Developedland = $this->Developedlandtype->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC')));
            $this->set('Developedland', $Developedland);
            $level1propertyname = $this->Levels_1_property->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $language), 'order' => array('Levels_1_property.level_1_desc_en' => 'ASC')));
            $this->set('level1propertydata', $level1propertyname);
            $level2propertyname = $this->Level2_property->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $language), 'order' => array('level_2_desc_en' => 'ASC')));
            $this->set('level2propertydata', $level2propertyname);
            $level3propertyname = $this->Level3_property->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $language), 'order' => array('level_3_desc_en' => 'ASC')));
            $this->set('level3propertydata', $level3propertyname);
            $level4propertyname = $this->Level4_property->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $language), 'order' => array('level_4_desc_en' => 'ASC')));
            $this->set('level4propertydata', $level4propertyname);
            $level1propertylist = $this->Level1->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $language), 'order' => array('list_1_desc_en' => 'ASC')));
            $this->set('level1propertylist', $level1propertylist);
            $level2propertylist = $this->Level2->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $language), 'order' => array('list_2_desc_en' => 'ASC')));
            $this->set('level2propertylist', $level2propertylist);
            $level3propertylist = $this->Level3->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_' . $language), 'order' => array('list_3_desc_en' => 'ASC')));
            $this->set('level3propertylist', $level3propertylist);
            $level4propertylist = $this->Level4->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_' . $language), 'order' => array('list_4_desc_en' => 'ASC')));
            $this->set('level4propertylist', $level4propertylist);


            $raterecord = $this->levelconfig->query("select a.id,a.village_id,b.village_name_$language,a.developed_land_types_id,c.developed_land_types_desc_$language,
			a.level1_id , i.level_1_desc_$language,
			a.level2_id , j.level_2_desc_$language,
			a.level3_id , k.level_3_desc_$language,
			a.level4_id , l.level_4_desc_$language,
			a.prop_level1_list_id,d.list_1_desc_$language,a.prop_level2_list_id,e.list_2_desc_$language,a.prop_level3_list_id,f.list_3_desc_$language,
			a.prop_level4_list_id,g.list_4_desc_$language,a.state_id,
                        h.is_developed_land_types_id,h.is_level_1_id,h.is_level_2_id,h.is_level_3_id,h.is_level_4_id    
                        from ngdrstab_conf_lnk_village_location_mapping a
                        left outer  join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id
                        left outer  join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                        left outer  join ngdrstab_mst_loc_level_1_prop_list d on d.prop_level1_list_id = a.prop_level1_list_id
                        left outer  join ngdrstab_mst_loc_level_2_prop_list e on e.prop_level2_list_id = a.prop_level2_list_id
                        left outer  join ngdrstab_mst_loc_level_3_prop_list f on f.prop_leve3_list_id = a.prop_level3_list_id
                        left outer  join ngdrstab_mst_loc_level_4_prop_list g on g.prop_level4_list_id = a.prop_level4_list_id
			 left outer join ngdrstab_mst_location_levels_1_property i on i.level_1_id = a.level1_id
			 left outer join ngdrstab_mst_location_levels_2_property j on j.level_2_id = a.level2_id
			 left outer join ngdrstab_mst_location_levels_3_property k on k.level_3_id = a.level3_id 
			 left outer join ngdrstab_mst_location_levels_4_property l on l.level_4_id = a.level4_id
			left outer  join ngdrstab_conf_level h on h.state_id = a.state_id where a.village_id=2 and a.developed_land_types_id=1");
            $this->set('raterecord', $raterecord);

            $this->request->data['villagelevelmapping']['req_ip'] = $req_ip;
            $this->request->data['villagelevelmapping']['user_id'] = $user_id;
            // $this->request->data['villagelevelmapping']['created_date'] = $created_date;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['villagelevelmapping']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['id1'];
                $this->set('hfid', $hfid);
                $hfname = $_POST['name1'];
                $this->request->data['villagelevelmapping']['state_id'] = $stateid;
                if ($actiontype == '1') {
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['villagelevelmapping']['id'] = $this->request->data['id1'];

                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->villagelevelmapping->Save($this->request->data['villagelevelmapping'])) {
                        $this->Session->setFlash(__($actionvalue));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'villagelevelmapping'));
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                    }
                }

                if ($actiontype == '2') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfname', $hfname);
                }

                if ($actiontype == '4') {

                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->villagelevelmapping->id = $hfid;
                        if ($this->villagelevelmapping->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'villagelevelmapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
            exit;
        }
    }

    public function villagemapping_old() {

        try {

            $this->loadModel('VillageMapping');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('District');
            $this->loadModel('division');
            $this->loadModel('subdivision');
            $this->loadModel('Developedlandtype');
            $this->loadModel('circle');
            $this->loadModel('corporationclass');
            $this->loadModel('corporationclasslist');
            $this->set('selectvillagemapping', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfid', NULL);
            $this->set('hfname', NULL);
            $this->set('talukarecord', NULL);
            $user_id = $this->Session->read("session_user_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['villagemapping']['req_ip'] = $req_ip;
            $this->request->data['villagemapping']['user_id'] = $user_id;
            // $this->request->data['villagemapping']['created_date'] = $created_date;
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $language = $this->Session->read("sess_langauge");
            $Developedland = $this->Developedlandtype->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC')));
            $this->set('Developedland', $Developedland);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            if ($language == 'en') {
                $districtnname = $this->District->find('list', array('fields' => array('id', 'District.district_name_en'), 'order' => array('district_name_en' => 'ASC')));
                $this->set('districtdata', $districtnname);
                $divisionname = $this->division->find('list', array('fields' => array('division.id', 'division.division_name_en'), 'order' => array('division_name_en' => 'ASC')));
                $this->set('divisiondata', $divisionname);
                $subdivisiondata = $this->subdivision->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_en'), 'order' => array('subdivision_name_en' => 'ASC')));
                $this->set('subdivisiondata', $subdivisiondata);
                $blockname = $this->circle->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'order' => array('circle_name_en' => 'ASC')));
                $this->set('blockdata', $blockname);
                $corpclassname = $this->corporationclass->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'order' => array('class_description_en' => 'ASC')));
                $this->set('corpclassdata', $corpclassname);
                $corpclasslistname = $this->corporationclasslist->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_en'), 'order' => array('governingbody_name_en' => 'ASC')));
                $this->set('corpclasslist', $corpclasslistname);
                $taluka = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
                $this->set('taluka', $taluka);
                $this->set('state', $state[0]['State']['state_name_en']);
                $query = $this->VillageMapping->query("select distinct a.village_id, a.id,a.state_id,a.division_id,f.division_name_en,a.state_id,b.district_name_en,a.taluka_id,c.taluka_name_en,a.subdivision_id,d.subdivision_name_en,a.circle_id,g.circle_name_en,l.developed_land_types_id,l.developed_land_types_desc_en,a.village_name_en,a.ulb_type_id,e.class_description_en,
                        h.is_state,h.is_dist,h.is_div,h.is_taluka,h.is_zp,h.is_block,i.governingbody_name_en,i.corp_id,a.census_code
                        from ngdrstab_conf_admblock7_village_mapping a
			 left outer  join ngdrstab_mst_developed_land_types l on l.id=a.developed_land_types_id	
                        left outer  join ngdrstab_conf_admblock2_division f on f.id = a.division_id
                        left outer  join ngdrstab_conf_admblock3_district b on b.id = a.state_id
                        left outer  join ngdrstab_conf_admblock5_taluka c on c.id = a.taluka_id
                        left outer  join ngdrstab_conf_admblock4_subdivision d on d.id = a.subdivision_id
                        left outer  join ngdrstab_conf_admblock6_circle g on g.id = a.circle_id
                        left outer  join ngdrstab_conf_state_district_div_level h on h.state_id = a.state_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody e on e.ulb_type_id = a.ulb_type_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody_list i on i.corp_id=a.corp_id limit 100 ");
//                 pr($query);exit;
                $this->set('talukarecord', $query);
            } else {
                $districtnname = $this->District->find('list', array('fields' => array('id', 'District.district_name_ll'), 'order' => array('district_name_ll' => 'ASC')));
                $this->set('districtdata', $districtnname);
                $divisionname = $this->division->find('list', array('fields' => array('division.id', 'division.division_name_ll'), 'order' => array('division_name_ll' => 'ASC')));
                $this->set('divisiondata', $divisionname);
                $subdivisiondata = $this->subdivision->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_ll'), 'order' => array('subdivision_name_ll' => 'ASC')));
                $this->set('subdivisiondata', $subdivisiondata);
                $blockname = $this->circle->find('list', array('fields' => array('circle.id', 'circle.circle_name_ll'), 'order' => array('circle_name_ll' => 'ASC')));
                $this->set('blockdata', $blockname);
                $corpclassname = $this->corporationclass->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_ll'), 'order' => array('class_description_ll' => 'ASC')));
                $this->set('corpclassdata', $corpclassname);
                $corpclasslistname = $this->corporationclasslist->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_ll'), 'order' => array('governingbody_name_ll' => 'ASC')));
                $this->set('corpclasslist', $corpclasslistname);
                $taluka = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_ll'), 'order' => array('taluka_name_ll' => 'ASC')));
                $this->set('taluka', $taluka);
                $this->set('state', $state[0]['State']['state_name_ll']);
                $query = $this->VillageMapping->query("select distinct a.village_id, a.id,a.state_id,a.division_id,f.division_name_en,a.state_id,b.district_name_en,a.taluka_id,c.taluka_name_en,a.subdivision_id,d.subdivision_name_en,a.circle_id,g.circle_name_en,l.developed_land_types_id,l.developed_land_types_desc_en,a.village_name_en,a.ulb_type_id,e.class_description_en,
                        h.is_state,h.is_dist,h.is_div,h.is_taluka,h.is_zp,h.is_block,i.governingbody_name_en,i.corp_id,a.census_code
                        from ngdrstab_conf_admblock7_village_mapping a
			 left outer  join ngdrstab_mst_developed_land_types l on l.id=a.developed_land_types_id	
                        left outer  join ngdrstab_conf_admblock2_division f on f.id = a.division_id
                        left outer  join ngdrstab_conf_admblock3_district b on b.id = a.state_id
                        left outer  join ngdrstab_conf_admblock5_taluka c on c.id = a.taluka_id
                        left outer  join ngdrstab_conf_admblock4_subdivision d on d.id = a.subdivision_id
                        left outer  join ngdrstab_conf_admblock6_circle g on g.id = a.circle_id
                        left outer  join ngdrstab_conf_state_district_div_level h on h.state_id = a.state_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody e on e.ulb_type_id = a.ulb_type_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody_list i on i.corp_id=a.corp_id limit 100");

//                pr($query);exit;
                $this->set('talukarecord', $query);
            }
//-----------------------------QP   ON 2DEC BY KALYANI----------------------------------
            $configure = $this->VillageMapping->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
            $this->set('configure', $configure);


            if ($this->request->is('post')) {
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['villagemapping']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['villagemapping']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->VillageMapping->save($this->request->data['villagemapping'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'villagemapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
                if ($actiontype == '4') {
                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->VillageMapping->id = $hfid;
                        if ($this->VillageMapping->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'villagemapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
        } catch (Exception $exc) {
            pr($exc);
            exit;
        }
    }

    public function villagemapping() {

        try {

            $this->loadModel('VillageMapping');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('District');
            $this->loadModel('division');
            $this->loadModel('subdivision');
            $this->loadModel('Developedlandtype');
            $this->loadModel('circle');
            $this->loadModel('corporationclass');
            $this->loadModel('corporationclasslist');
            $this->set('selectvillagemapping', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfid', NULL);
            $this->set('hfname', NULL);
            $this->set('talukarecord', NULL);



            $user_id = $this->Session->read("session_user_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['villagemapping']['req_ip'] = $req_ip;
            $this->request->data['villagemapping']['user_id'] = $user_id;
            // $this->request->data['villagemapping']['created_date'] = $created_date;
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $language = $this->Session->read("sess_langauge");
            $this->set('language', $language);
            $Developedland = $this->Developedlandtype->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC')));
            $this->set('Developedland', $Developedland);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            if ($language == 'en') {
                $districtnname = $this->District->find('list', array('fields' => array('id', 'District.district_name_en'), 'order' => array('district_name_en' => 'ASC')));
                $this->set('districtdata', $districtnname);
                $divisionname = $this->division->find('list', array('fields' => array('division.id', 'division.division_name_en'), 'order' => array('division_name_en' => 'ASC')));
                $this->set('divisiondata', $divisionname);
                $subdivisiondata = $this->subdivision->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_en'), 'order' => array('subdivision_name_en' => 'ASC')));
                $this->set('subdivisiondata', $subdivisiondata);
                $blockname = $this->circle->find('list', array('fields' => array('circle.id', 'circle.circle_name_en'), 'order' => array('circle_name_en' => 'ASC')));
                $this->set('blockdata', $blockname);
                $corpclassname = $this->corporationclass->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'order' => array('class_description_en' => 'ASC')));
                $this->set('corpclassdata', $corpclassname);
                $corpclasslistname = $this->corporationclasslist->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_en'), 'order' => array('governingbody_name_en' => 'ASC')));
                $this->set('corpclasslist', $corpclasslistname);
                $taluka = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
                $this->set('taluka', $taluka);
                $this->set('state', $state[0]['State']['state_name_en']);
                $query = $this->VillageMapping->query("select distinct a.village_id, a.id,a.state_id,a.division_id,f.division_name_en,a.state_id,b.district_name_en,a.taluka_id,c.taluka_name_en,a.subdivision_id,d.subdivision_name_en,a.circle_id,g.circle_name_en,l.developed_land_types_id,l.developed_land_types_desc_en,a.village_name_en,a.ulb_type_id,e.class_description_en,
                        h.is_state,h.is_dist,h.is_div,h.is_taluka,h.is_zp,h.is_block,i.governingbody_name_en,i.corp_id,a.census_code,a.old_census_code,a.census_code_changedate
                        from ngdrstab_conf_admblock7_village_mapping a
			 left outer  join ngdrstab_mst_developed_land_types l on l.id=a.developed_land_types_id	
                        left outer  join ngdrstab_conf_admblock2_division f on f.id = a.division_id
                        left outer  join ngdrstab_conf_admblock3_district b on b.id = a.state_id
                        left outer  join ngdrstab_conf_admblock5_taluka c on c.id = a.taluka_id
                        left outer  join ngdrstab_conf_admblock4_subdivision d on d.id = a.subdivision_id
                        left outer  join ngdrstab_conf_admblock6_circle g on g.id = a.circle_id
                        left outer  join ngdrstab_conf_state_district_div_level h on h.state_id = a.state_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody e on e.ulb_type_id = a.ulb_type_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody_list i on i.corp_id=a.corp_id limit 100 ");
//                 pr($query);exit;
                $this->set('talukarecord', $query);
            } else {
                $districtnname = $this->District->find('list', array('fields' => array('id', 'District.district_name_ll'), 'order' => array('district_name_ll' => 'ASC')));
                $this->set('districtdata', $districtnname);
                $divisionname = $this->division->find('list', array('fields' => array('division.id', 'division.division_name_ll'), 'order' => array('division_name_ll' => 'ASC')));
                $this->set('divisiondata', $divisionname);
                $subdivisiondata = $this->subdivision->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_ll'), 'order' => array('subdivision_name_ll' => 'ASC')));
                $this->set('subdivisiondata', $subdivisiondata);
                $blockname = $this->circle->find('list', array('fields' => array('circle.id', 'circle.circle_name_ll'), 'order' => array('circle_name_ll' => 'ASC')));
                $this->set('blockdata', $blockname);
                $corpclassname = $this->corporationclass->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_ll'), 'order' => array('class_description_ll' => 'ASC')));
                $this->set('corpclassdata', $corpclassname);
                $corpclasslistname = $this->corporationclasslist->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_ll'), 'order' => array('governingbody_name_ll' => 'ASC')));
                $this->set('corpclasslist', $corpclasslistname);
                $taluka = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_ll'), 'order' => array('taluka_name_ll' => 'ASC')));
                $this->set('taluka', $taluka);
                $this->set('state', $state[0]['State']['state_name_ll']);
                $query = $this->VillageMapping->query("select distinct a.village_id, a.id,a.state_id,a.division_id,f.division_name_en,a.state_id,b.district_name_en,a.taluka_id,c.taluka_name_en,a.subdivision_id,d.subdivision_name_en,a.circle_id,g.circle_name_en,l.developed_land_types_id,l.developed_land_types_desc_en,a.village_name_en,a.ulb_type_id,e.class_description_en,
                        h.is_state,h.is_dist,h.is_div,h.is_taluka,h.is_zp,h.is_block,i.governingbody_name_en,i.corp_id,a.census_code,a.old_census_code,a.census_code_changedate
                        from ngdrstab_conf_admblock7_village_mapping a
			 left outer  join ngdrstab_mst_developed_land_types l on l.id=a.developed_land_types_id	
                        left outer  join ngdrstab_conf_admblock2_division f on f.id = a.division_id
                        left outer  join ngdrstab_conf_admblock3_district b on b.id = a.state_id
                        left outer  join ngdrstab_conf_admblock5_taluka c on c.id = a.taluka_id
                        left outer  join ngdrstab_conf_admblock4_subdivision d on d.id = a.subdivision_id
                        left outer  join ngdrstab_conf_admblock6_circle g on g.id = a.circle_id
                        left outer  join ngdrstab_conf_state_district_div_level h on h.state_id = a.state_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody e on e.ulb_type_id = a.ulb_type_id
                        left outer  join ngdrstab_conf_admblock_local_governingbody_list i on i.corp_id=a.corp_id limit 100");

//                pr($query);exit;
                $this->set('talukarecord', $query);
            }
//-----------------------------QP   ON 2DEC BY KALYANI----------------------------------
            $configure = $this->VillageMapping->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
            $this->set('configure', $configure);


            $fieldlist = array();
            $fieldlist['division_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['circle_id']['select'] = 'is_select_req';
            $fieldlist['subdivision_id']['select'] = 'is_select_req';

            $fieldlist['ulb_type_id']['select'] = 'is_select_req';
            $fieldlist['corp_id']['select'] = 'is_select_req';
            $fieldlist['developed_land_types_id']['select'] = 'is_select_req';
            $fieldlist['census_code']['text'] = 'is_required,is_alphanumeric';
            $fieldlist['old_census_code']['text'] = 'is_required,is_alphanumeric';
            $fieldlist['census_code_changedate']['text'] = 'is_required';
            $fieldlist['village_name_en']['text'] = 'is_required,is_alphaspace';
//            $fieldlist['full_name']['text'] = 'is_required,is_alphaspace,is_maxlength100';
//            $fieldlist['mobile_no']['text'] = 'is_mobileindian';
//            $fieldlist['email_id']['text'] = 'is_email,is_maxlength100';
//             $fieldlist['role_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['villagemapping']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    $check = $this->VillageMapping->query("SELECT MAX(village_id) FROM ngdrstab_conf_admblock7_village_mapping");
                    $village_id = $check[0][0]['max'];

                    if ($village_id != Null) {
                        $village_id = $village_id + 1;
//                        pr($bank_id);exit;
                    } else {
                        $village_id = 1;
                    }

                    if ($hfactionval == 'S') {
                        $this->request->data['villagemapping']['state_id'] = $stateid;
                        $this->request->data['villagemapping']['census_code_changedate'] = date('d-m-Y', strtotime($this->request->data['villagemapping']['census_code_changedate']));

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['villagemapping']['id'] = $this->request->data['hfid'];

                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['villagemapping']['village_id'] = $village_id;
                            $actionvalue = "lblsavemsg";
                        }

//                        pr($this->request->data);exit;
                        if ($this->VillageMapping->save($this->request->data['villagemapping'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'villagemapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
                if ($actiontype == '4') {
                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->VillageMapping->id = $hfid;
                        if ($this->VillageMapping->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'villagemapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
            exit;
        }
    }

    public function circle() {
        try {
            $this->check_role_escalation();
            $this->loadModel('divisionnew');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('circle');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('circlerecord', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $statename = $this->Session->read("state_name_en");
            $this->set('circlerecord', $this->circle->find('all'));
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['circle_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['circle_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }
            $this->set('fieldlist', $fieldlist);
            //setting the error message to empty as it shows error at first time
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['circle']['csrftoken']);


                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['circle']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['circle']['req_ip'] = $this->request->clientIp();
                        $this->request->data['circle']['user_id'] = $user_id;
                        // $this->request->data['circle']['created_date'] = $created_date;
                        $this->request->data['circle']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['circle']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        //passing as parameters to it is data collected and the fieldlist
                        $this->request->data['circle'] = $this->istrim($this->request->data['circle']);
                        $errarr = $this->validatedata($this->request->data['circle'], $fieldlist);
                        $flag = 0;
                        //check the array is empty or not
                        //is the error present or not if error present it will inccrease the flag by 1 else it will save data if error array is 0.
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        //if the error array consist of any of errors then process set  else save data
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {

                            if ($this->circle->save($this->request->data['circle'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'circle'));
                                $this->set('circlerecord', $this->circle->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getCode())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function circle_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('circle');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->circle->id = $id;
                if ($this->circle->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'circle'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function taluka_old() {
        try {
            $this->check_role_escalation();
            $this->loadModel('divisionnew');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('taluka');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('talukarecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('talukarecord', $this->taluka->find('all'));
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['taluka_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedashroundbrackets,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['taluka_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",is_maxlength100";
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['taluka']['csrftoken']);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['taluka']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['taluka']['req_ip'] = $this->request->clientIp();
                        $this->request->data['taluka']['user_id'] = $user_id;
                        //  $this->request->data['taluka']['created_date'] = $created_date;
                        $this->request->data['taluka']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['taluka']['id'] = $this->request->data['hfid'];

                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['taluka'] = $this->istrim($this->request->data['taluka']);
                        $errarr = $this->validatedata($this->request->data['taluka'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->taluka->save($this->request->data['taluka'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'taluka'));
                                $this->set('talukarecord', $this->taluka->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function taluka() {
        try {
            $this->check_role_escalation();
            $this->loadModel('divisionnew');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('taluka');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('talukarecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('talukarecord', $this->taluka->find('all'));
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['taluka_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedashroundbrackets,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['taluka_name_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    //$fieldlist['taluka_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }

            $fieldlist['census_code']['text'] = 'is_numeric';
            $fieldlist['old_census_code']['text'] = 'is_numeric';
            $fieldlist['census_code_changedate']['text'] = 'is_required';

            $fieldlist['hfid']['text'] = 'is_digit';
            $fieldlist['hfaction']['text'] = 'is_yes_no';


            $fieldlist['csrftoken']['text'] = 'is_numeric';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }

            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['taluka']['csrftoken']);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['taluka']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    $check = $this->taluka->query("SELECT MAX(taluka_id) FROM ngdrstab_conf_admblock5_taluka");
                    $taluka_id = $check[0][0]['max'];

                    if ($taluka_id != Null) {
                        $taluka_id = $taluka_id + 1;
//                        pr($bank_id);exit;
                    } else {
                        $taluka_id = 1;
                    }

                    if ($hfactionval == 'S') {
                        $this->request->data['taluka']['req_ip'] = $this->request->clientIp();
                        $this->request->data['taluka']['user_id'] = $user_id;
                        //  $this->request->data['taluka']['created_date'] = $created_date;
                        $this->request->data['taluka']['state_id'] = $stateid;
                        $this->request->data['taluka']['census_code_changedate'] = date('d-m-Y', strtotime($this->request->data['taluka']['census_code_changedate']));
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['taluka']['id'] = $this->request->data['hfid'];

                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['taluka']['taluka_id'] = $taluka_id;
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['taluka'] = $this->istrim($this->request->data['taluka']);
//                        $errarr = $this->validatedata($this->request->data['taluka'], $fieldlist);

                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {

                            if ($this->taluka->save($this->request->data['taluka'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'taluka'));
                                $this->set('talukarecord', $this->taluka->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function taluka_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('taluka');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->taluka->id = $id;
                if ($this->taluka->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'taluka'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function admin_block_level_config() {
        try {
            $this->check_role_escalation();
            $this->loadModel('adminLevelConfig');
            $this->set('name', array_keys($this->adminLevelConfig->getColumnTypes()));
            $formdata = $this->adminLevelConfig->find('all', array('conditions' => array('state_id' => $this->Auth->User('state_id'))));
            $this->set('actontype', NULL);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['statename_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                    $fieldlist['divisionname_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha,is_maxlength100';
                    $fieldlist['districtname_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha,is_maxlength100';
                    $fieldlist['talukaname_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alphaspacedashroundbrackets,is_maxlength100';
                    $fieldlist['zpname_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha,is_maxlength100';
                    $fieldlist['blockname_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['statename_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                    $fieldlist['divisionname_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                    $fieldlist['districtname_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                    $fieldlist['talukaname_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                    $fieldlist['zpname_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                    $fieldlist['blockname_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }
            $fieldlist['is_state']['radio'] = 'is_yes_no';
            $fieldlist['is_div']['radio'] = 'is_yes_no';
            $fieldlist['is_dist']['radio'] = 'is_yes_no';
            $fieldlist['is_taluka']['radio'] = 'is_yes_no';
            $fieldlist['is_zp']['radio'] = 'is_yes_no';
            $fieldlist['is_block']['radio'] = 'is_yes_no';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
//                pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['admin_block_level_config']['csrftoken']);
                $this->request->data['admin_block_level_config']['req_ip'] = $this->request->clientIp();
                $this->request->data['admin_block_level_config']['user_id'] = $this->Auth->User('user_id');
                //  $this->request->data['admin_block_level_config']['created_date'] = date('Y-m-d');
                if ($formdata[0]['adminLevelConfig']['id']) {
                    $this->request->data['admin_block_level_config']['id'] = $formdata[0]['adminLevelConfig']['id'];
                } else {
                    $this->request->data['admin_block_level_config']['state_id'] = $this->Auth->User('state_id');
                }
                $this->request->data['admin_block_level_config'] = $this->istrim($this->request->data['admin_block_level_config']);
                $errarr = $this->validatedata($this->request->data['admin_block_level_config'], $fieldlist);
                $flag = 0;
                foreach ($errarr as $dd) {
                    if ($dd != "") {
                        $flag = 1;
                    }
                }
                if ($flag == 1) {
                    $this->set("errarr", $errarr);
                    $this->Session->setFlash("lblnotsavemsg");
                } else {
                    if ($this->adminLevelConfig->save($this->request->data['admin_block_level_config'])) {
                        $this->Session->setFlash("lblsavemsg");
                        $this->redirect('admin_block_level_config');
                    } else {
                        $this->Session->setFlash("There is some error");
                    }
                }
            } else {
                if ($formdata) {
                    $this->adminLevelConfig->id = $formdata[0]['adminLevelConfig']['id'];
                    $dataarray = $this->adminLevelConfig->read();
                    $this->request->data['admin_block_level_config'] = $dataarray['adminLevelConfig'];
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function emoplyeereportlist() {
        try {
            $this->loadModel('docregistration_details');
            $this->loadModel('propertydetails');
            $this->loadModel('employeetransfer');
            $this->loadModel('User');
            $userid = $this->Session->read("session_user_id");
            $result = substr($userid, 4);
            $userid = substr($result, 0, -4);
            $username = $this->User->find('all', array('fields' => array('user_id', 'User.username', 'office_id'), 'conditions' => array('user_id' => $userid)));
            $office_id = $username[0]['User']['office_id'];
            $this->set('username', $username[0]['User']);
            $receipt_id = $this->employeetransfer->Query("select distinct F.emp_name as reporting_employee,D.doc_details,C.property_details,C.doc_id ,A.office_name_en,A.emp_id as emp1,B.emp_id,B.emp_name from ngdrstab_mst_office A
 inner join ngdrstab_mst_employee B on A.office_id=B.office_id 
inner join ngdrstab_mst_employee E on E.emp_id=A.emp_id
inner join ngdrstab_property_details C on C.emp_id=A.emp_id or C.emp_id=B.emp_id
inner join ngdrstab_trn_doc_registration_details D on D.doc_id=C.doc_id
inner join ngdrstab_mst_employee F on F.emp_id=C.emp_id
 where A.office_id= ? ", array($office_id));
            $this->set('Showreport', $receipt_id);
        } catch (Exception $ex) {
            
        }
    }

    //------------------------------------------------------------------------------------------------------------------

    public function subsubcategory() {
        try {

            $this->loadModel('subsubcategory');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->set('selectsubsubcategory', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $this->set('subsubcategoryrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $subsubcategoryrecord = $this->subsubcategory->find('all');
            $this->set('subsubcategoryrecord', $subsubcategoryrecord);
            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['subsubcategory']['req_ip'] = $req_ip;
            $this->request->data['subsubcategory']['user_id'] = $user_id;
            // $this->request->data['subsubcategory']['created_date'] = $created_date;
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['subsubcategory']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['subsubcategory']['state_id'] = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['subsubcategory']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->subsubcategory->save($this->request->data['subsubcategory'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'subsubcategory'));
                            $this->set('subsubcategoryrecord', $this->subsubcategory->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
                if ($actiontype == '3') {

                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->subsubcategory->id = $hfid;
                        if ($this->subsubcategory->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'subsubcategory'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('subsubcategoryrecord', $this->subsubcategory->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function usagesub() {
        try {
            $this->loadModel('Usagesub');
            $this->loadModel('State');

            $this->set('Usagesubrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));


            $this->set('state', $state[0]['State']['state_name_en']);
            $this->set('Usagesubrecord', $this->Usagesub->find('all'));

            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['Usagesub']['req_ip'] = $req_ip;
            $this->request->data['Usagesub']['user_id'] = $user_id;
            //  $this->request->data['Usagesub']['created_date'] = $created_date;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Usagesub']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['Usagesub']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['Usagesub']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Usagesub']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->Usagesub->save($this->request->data['Usagesub'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'Usagesub'));
                            $this->set('Usagesubrecord', $this->Usagesub->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Usagesub->id = $hfid;

                        if ($this->Usagesub->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'Usagesub'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('Usagesubrecord', $this->Usagesub->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function usagemain() {
        try {
            $this->loadModel('Usagemainmain');
            $this->loadModel('State');

            $this->set('usagemainrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");


            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_en']);
            $this->set('usagemainrecord', $this->Usagemainmain->find('all'));

            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['usagemain']['req_ip'] = $req_ip;
            $this->request->data['usagemain']['user_id'] = $user_id;
            //$this->request->data['usagemain']['created_date'] = $created_date;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['usagemain']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['usagemain']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['usagemain']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->Usagemainmain->save($this->request->data['usagemain'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'usagemain'));
                            $this->set('usagemainrecord', $this->Usagemainmain->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Usagemainmain->id = $hfid;

                        if ($this->Usagemainmain->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'usagemain'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('usagemainrecord', $this->Usagemainmain->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function district_new_old() {
        try {
            $this->check_role_escalation();
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'District', 'mainlanguage', 'language'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('districtrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('districtrecord', $this->District->find('all'));
            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['district_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['district_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['hfupdateflag']['text'] = 'is_yes_no';

            $fieldlist['hfid']['text'] = 'is_numeric';
            $fieldlist['hfaction']['text'] = 'is_yes_no';
            //$fieldlist['actiontype']['text'] = 'is_actiontype';  
//             $fieldlist['id']['text'] = 'is_numeric';  

            $fieldlist['csrftoken']['text'] = 'is_numeric';

            $this->set('fieldlist', $fieldlist);
            //setting the error message to empty as it shows error at first time
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {

                $this->check_csrf_token($this->request->data['district_new']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');

                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['district_new']['req_ip'] = $this->request->clientIp();
                        $this->request->data['district_new']['user_id'] = $user_id;
                        $this->request->data['district_new']['actiontype'] = $actiontype;
                        $this->request->data['district_new']['hfaction'] = $hfactionval;
                        $this->request->data['district_new']['stateid'] = $stateid;

                        //    $this->request->data['district_new']['created_date'] = $created_date;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['district_new']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }

                        $errarr = $this->validatedata($this->request->data['district_new'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            // pr($this->request->data);exit;
                            if ($this->District->save($this->request->data['district_new'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'district_new'));
                                $this->set('districtrecord', $this->District->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
            }
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function district_new() {
        try {
            $this->check_role_escalation();
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'District', 'mainlanguage', 'language'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('districtrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('districtrecord', $this->District->find('all'));

            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['district_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['district_name_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    //$fieldlist['district_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['census_code']['text'] = 'is_numeric';
            $fieldlist['old_census_code']['text'] = 'is_numeric';
            $fieldlist['census_code_changedate']['text'] = 'is_required';
//            $fieldlist['hfupdateflag']['text'] = 'is_yes_no';

            $fieldlist['hfid']['text'] = 'is_digit';
            $fieldlist['hfaction']['text'] = 'is_yes_no';
            //$fieldlist['actiontype']['text'] = 'is_actiontype';  
//             $fieldlist['id']['text'] = 'is_numeric';  

            $fieldlist['csrftoken']['text'] = 'is_numeric';

            $this->set('fieldlist', $fieldlist);
            //setting the error message to empty as it shows error at first time
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {

                $this->check_csrf_token($this->request->data['district_new']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');


                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    $check = $this->District->query("SELECT MAX(district_id) FROM ngdrstab_conf_admblock3_district");
                    $district_id = $check[0][0]['max'];

                    if ($district_id != Null) {
                        $district_id = $district_id + 1;
//                        pr($bank_id);exit;
                    } else {
                        $district_id = 1;
                    }
                    if ($hfactionval == 'S') {
                        $this->request->data['district_new']['req_ip'] = $this->request->clientIp();
                        $this->request->data['district_new']['user_id'] = $user_id;
                        $this->request->data['district_new']['actiontype'] = $actiontype;
                        $this->request->data['district_new']['hfaction'] = $hfactionval;
                        $this->request->data['district_new']['state_id'] = $stateid;
                        $this->request->data['district_new']['hfid'] = $hfid;

                        $this->request->data['district_new']['census_code_changedate'] = date('d-m-Y', strtotime($this->request->data['district_new']['census_code_changedate']));

                        //    $this->request->data['district_new']['created_date'] = $created_date;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['district_new']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['district_new']['district_id'] = $district_id;
                            $actionvalue = "lblsavemsg";
                        }


                        $errarr = $this->validatedata($this->request->data['district_new'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
//                             pr($this->request->data);exit;
                            if ($this->District->save($this->request->data['district_new'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'district_new'));
                                $this->set('districtrecord', $this->District->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }

                        $this->Session->setFlash(__('Error in form'));
                        //}
                    }
                }
            }

            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function district_new_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('District');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'District') {
                $this->District->id = $id;
                if ($this->District->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'district_new'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function divisionnew() {
        try {
            $this->check_role_escalation();
            $this->loadModel('divisionnew');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->divisionnew->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['division_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength255';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['division_name_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['division_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
//                pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['divisionnew']['csrftoken']);


                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['divisionnew']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['divisionnew']['req_ip'] = $this->request->clientIp();
                        $this->request->data['divisionnew']['user_id'] = $user_id;
                        $this->request->data['divisionnew']['created_date'] = $created_date;
                        $this->request->data['divisionnew']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['divisionnew']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                            $adbc = $alerts['divisionnew']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            $adbc = $alerts['divisionnew']['btnadd'][$laug];
                        }
                        $this->request->data['divisionnew'] = $this->istrim($this->request->data['divisionnew']);
                        //  pr($this->request->data['divisionnew']);exit;
                        $errarr = $this->validatedata($this->request->data['divisionnew'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->divisionnew->save($this->request->data['divisionnew'])) {
//                                $this->Session->setFlash(__("$message"));
                                $this->Session->setFlash(__("$adbc"));
//                                $this->Session->setFlash($adbc);
                                $this->redirect(array('controller' => 'Masters', 'action' => 'divisionnew'));
                                $this->set('divisionrecord', $this->divisionnew->find('all'));
                            } else {
                                $this->Session->setFlash($alerts['divisionnew']['btndelete'][$laug]);
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function divisionnew_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('divisionnew');
        $laug = $this->Session->read("sess_langauge");
        $this->set('laug', $laug);
        $id = $this->decrypt($id, $this->Session->read("randamkey"));
        try {
            $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
            $json = $file->read(true, 'r');
            $alerts = json_decode($json, TRUE);
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->divisionnew->id = $id;
                if ($this->divisionnew->delete($id)) {
                    $this->Session->setFlash(
                            __($alerts['divisionnew']['btndelete'][$laug])
                    );
                    return $this->redirect(array('action' => 'divisionnew'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function subdivision() {
        try {
            $this->check_role_escalation();
            $this->loadModel('subdivision');
            $this->loadModel('State');
            $this->set('subdivisionrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('subdivisionrecord', $this->subdivision->find('all'));
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['subdivision_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['subdivision_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['subdivision']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['subdivision']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {
                        $this->request->data['subdivision']['req_ip'] = $this->request->clientIp();
                        $this->request->data['subdivision']['user_id'] = $user_id;
                        // $this->request->data['subdivision']['created_date'] = $created_date;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['subdivision']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $errarr = $this->validatedata($this->request->data['subdivision'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->subdivision->save($this->request->data['subdivision'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'subdivision'));
                                $this->set('subdivisionrecord', $this->subdivision->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function subdivision_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('subdivision');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'subdivision') {
                $this->subdivision->id = $id;
                if ($this->subdivision->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'subdivision'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function get_level_name() {
        //echo 1;exit;
        try {
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            if (isset($_GET['village']) && isset($_GET['token'])) {

                $village = $_GET['village'];
                $token = $_GET['token'];

                if ($token == "level1") {
                    $levelname = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $laug), 'conditions' => array('village_id' => array($village))));
                } else if ($token == "level2") {
                    $levelname = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $laug), 'conditions' => array('village_id' => array($village))));
                } else if ($token == "level3") {
                    $levelname = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $laug), 'conditions' => array('village_id' => array($village))));
                } else {
                    $levelname = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $laug), 'conditions' => array('village_id' => array($village))));
                }

                echo json_encode($levelname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function levellist4() {
        try {
            $this->loadModel('Level4');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('id' => 'ASC')));
            $this->set('District', $District);

            $this->set('levellist4record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['levellist4']['req_ip'] = $req_ip;
            $this->request->data['levellist4']['user_id'] = $user_id;
            //$this->request->data['levellist4']['created_date'] = $created_date;

            $statename = $this->Session->read("state_name_en");
            //  pr($statename);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));

            // pr($this->State->find('all', array('conditions' => array('state_id' => $stateid))));exit;

            $this->set('state', $state[0]['State']['state_name_en']);
            $Level4name = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_en')));
            $this->set('Level4name', $Level4name);
            $levellist4record = $this->Level4->query("SELECT a.prop_level4_list_id, a.level_4_id, a.list_4_desc_en, a.list_4_desc_ll, 
                        a.list_4_remark_en, a.list_4_remark_ll, a.id, a.state_id,b.level_4_desc_en,b.level_4_desc_ll,a.level_4_from_range,a.level_4_to_range,a.village_id,
                         c.village_name_en,c.village_name_ll
                        FROM ngdrstab_mst_loc_level_4_prop_list a
                        inner join ngdrstab_mst_location_levels_4_property b on b.level_4_id = a.level_4_id
                         left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id order by a.list_4_desc_en ASC");
            $this->set('levellist4record', $levellist4record);

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_loc_level_4_prop_list',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
//            pr($village);exit;
            $this->set('village', $village);


            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['levellist4']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['levellist4']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['levellist4']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['levellist4']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['levellist4']);exit;
                        if ($this->Level4->save($this->request->data['levellist4'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist4'));
                            $this->set('levellist4record', $this->Level4->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level4->id = $hfid;

                        if ($this->Level4->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist4'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('levellist4record', $this->Level4->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function levellist3() {
        try {
            $this->loadModel('Level3');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('id' => 'ASC')));
            $this->set('District', $District);

            $this->set('levellist3record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['levellist3']['req_ip'] = $req_ip;
            $this->request->data['levellist3']['user_id'] = $user_id;
            // $this->request->data['levellist3']['created_date'] = $created_date;

            $statename = $this->Session->read("state_name_en");
            //  pr($statename);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));

            // pr($this->State->find('all', array('conditions' => array('state_id' => $stateid))));exit;

            $this->set('state', $state[0]['State']['state_name_en']);
            $Level3name = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_en'), array('conditions' => array('state_id' => $stateid))));
            $this->set('Level3name', $Level3name);
            $levellist3record = $this->Level3->query("SELECT a.prop_leve3_list_id, a.level_3_id, a.list_3_desc_en, a.list_3_desc_ll, 
                       a.list_3_remark_en, a.list_3_remark_ll, a.id, a.state_id,b.level_3_desc_en,b.level_3_desc_ll,a.level_3_from_range,a.level_3_to_range,a.village_id,
                       c.village_name_en,c.village_name_ll
                       FROM ngdrstab_mst_loc_level_3_prop_list a
                       inner join ngdrstab_mst_location_levels_3_property b on b.level_3_id = a.level_3_id
                       left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id order by a.list_3_desc_en ASC");
            $this->set('levellist3record', $levellist3record);

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_loc_level_3_prop_list',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
//            pr($village);exit;
            $this->set('village', $village);

            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['levellist3']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['levellist3']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['levellist3']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['levellist3']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['levellist3']);exit;
                        if ($this->Level3->save($this->request->data['levellist3'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist3'));
                            $this->set('levellist3record', $this->Level3->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level3->id = $hfid;

                        if ($this->Level3->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist3'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('levellist3record', $this->Level3->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function level2() {
        try {
            $this->loadModel('Level2_property');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);

            $this->set('level2record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['level2']['req_ip'] = $req_ip;
            $this->request->data['level2']['user_id'] = $user_id;
            // $this->request->data['level2']['created_date'] = $created_date;

            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('surveyno', ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug), 'order' => array('surveynotype_desc_en' => 'ASC'))));

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'order' => array('damblkdpnd.village_name_en' => 'ASC'),
                'joins' => array(array('table' => 'ngdrstab_mst_location_levels_2_property',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
            $this->set('village', $village);
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('level2record', $this->Level2_property->query("select a.*,b.surveynotype_desc_en,b.surveynotype_desc_ll,c.village_name_en,c.village_name_ll
                                                            from ngdrstab_mst_location_levels_2_property a
                                                            left outer join ngdrstab_mst_surveyno_type b on b.surveynotype_id=a.surveynotype_id
                                                            left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id"));


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['level2']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['level2']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['level2']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        //pr($this->request->data());exit;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['level2']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['level2']);exit;
                        if ($this->Level2_property->save($this->request->data['level2'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level2'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level2_property->id = $hfid;

                        if ($this->Level2_property->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level2'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function level1() {
        try {
            $this->loadModel('Levels_1_property');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');

            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);

            $this->set('level1record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['level1']['req_ip'] = $req_ip;
            $this->request->data['level1']['user_id'] = $user_id;
            //$this->request->data['level1']['created_date'] = $created_date;

            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('surveyno', ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug), 'order' => array('surveynotype_desc_en' => 'ASC'))));

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'order' => array('damblkdpnd.village_name_en' => 'ASC'),
                'joins' => array(array('table' => 'ngdrstab_mst_location_levels_1_property',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
            $this->set('village', $village);

            $this->set('state', $state[0]['State']['state_name_' . $laug]);

            $this->set('level1record', $this->Levels_1_property->query("select a.*,b.surveynotype_desc_en,b.surveynotype_desc_ll,c.village_name_en,c.village_name_ll
                                                            from ngdrstab_mst_location_levels_1_property a
                                                            left outer join ngdrstab_mst_surveyno_type b on b.surveynotype_id=a.surveynotype_id
                                                            left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id"));

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['level1']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['level1']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['level1']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                        pr($this->request->data);exit;
                        if ($this->Levels_1_property->save($this->request->data['level1'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level1'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }

                if ($actiontype == '3') {
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Levels_1_property->id = $hfid;

                        if ($this->Levels_1_property->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level1'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('level1record', $this->Levels_1_property->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function level4() {
        try {
            $this->loadModel('Level4_property');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');

            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('id' => 'ASC')));
            $this->set('District', $District);

            $this->set('level4record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['level4']['req_ip'] = $req_ip;
            $this->request->data['level4']['user_id'] = $user_id;
            // $this->request->data['level4']['created_date'] = $created_date;

            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('surveyno', ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug))));

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_location_levels_4_property',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
            $this->set('village', $village);

            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('level4record', $this->Level4_property->query("select a.*,b.surveynotype_desc_en,b.surveynotype_desc_ll, c.village_name_en,c.village_name_ll
                                                            from ngdrstab_mst_location_levels_4_property a
                                                            left outer join ngdrstab_mst_surveyno_type b on b.surveynotype_id=a.surveynotype_id
                                                             left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id"));


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['level4']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['level4']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['level4']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['level4']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['level4']);exit;
                        if ($this->Level4_property->save($this->request->data['level4'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level4'));
                            $this->set('level4record', $this->Level4_property->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level4_property->id = $hfid;

                        if ($this->Level4_property->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level4'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('level4record', $this->Level4_property->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function level3() {
        try {
            $this->loadModel('Level3_property');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->set('level3record', NULL);
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('id' => 'ASC')));
            $this->set('District', $District);

            $this->set('level3record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('laug', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['level3']['req_ip'] = $req_ip;
            $this->request->data['level3']['user_id'] = $user_id;
            //$this->request->data['level3']['created_date'] = $created_date;

            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('surveyno', ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug))));

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_location_levels_3_property',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
            $this->set('village', $village);
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('level3record', $this->Level3_property->query("select a.*,b.surveynotype_desc_en,b.surveynotype_desc_ll, c.village_name_en,c.village_name_ll
                                                            from ngdrstab_mst_location_levels_3_property a
                                                            left outer join ngdrstab_mst_surveyno_type b on b.surveynotype_id=a.surveynotype_id
                                                            left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id"));


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['level3']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['level3']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['level3']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['level3']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['level3']);exit;
                        if ($this->Level3_property->save($this->request->data['level3'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level3'));
                            $this->set('level3record', $this->Level3_property->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level3_property->id = $hfid;

                        if ($this->Level3_property->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'level3'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('level3record', $this->Level3_property->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function levellist2() {
        try {
            $this->loadModel('Level2');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);

            $this->set('levellist2record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['levellist2']['req_ip'] = $req_ip;
            $this->request->data['levellist2']['user_id'] = $user_id;
            // $this->request->data['levellist2']['created_date'] = $created_date;

            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));

            $this->set('state', $state[0]['State']['state_name_en']);
            $Level2name = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_en'), 'order' => array('level_2_desc_en' => 'ASC')));
            $this->set('Level2name', $Level2name);
            $levellist2record = $this->Level2->query("SELECT a.prop_level2_list_id, a.level_2_id, a.list_2_desc_en, a.list_2_desc_ll, 
               a.list_2_remark_en, a.list_2_remark_ll, a.id, a.state_id,b.level_2_desc_en,b.level_2_desc_ll,a.level_2_from_range,a.level_2_to_range,a.village_id
                ,c.village_name_en,c.village_name_ll
               FROM ngdrstab_mst_loc_level_2_prop_list a
               inner join ngdrstab_mst_location_levels_2_property b on b.level_2_id = a.level_2_id
               left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id order by a.list_2_desc_en ASC");
            $this->set('levellist2record', $levellist2record);

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'order' => array('damblkdpnd.village_name_en' => 'ASC'),
                'joins' => array(array('table' => 'ngdrstab_mst_loc_level_2_prop_list',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
//            pr($village);exit;
            $this->set('village', $village);

            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['levellist2']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['levellist2']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['levellist2']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['levellist2']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data);exit;
                        if ($this->Level2->save($this->request->data['levellist2'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist2'));
                            $this->set('levellist2record', $this->Level2->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Level2->id = $hfid;

                        if ($this->Level2->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist2'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('levellist2record', $this->Level2->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function levellist1() {
        try {
            $this->loadModel('Level1');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('District');
            $this->loadModel('taluka');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);

            $this->set('levellist1record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['levellist1']['req_ip'] = $req_ip;
            $this->request->data['levellist1']['user_id'] = $user_id;
            // $this->request->data['levellist1']['created_date'] = $created_date;

            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));

            $this->set('state', $state[0]['State']['state_name_en']);
            $level1name = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_en'), 'order' => array('level_1_desc_en' => 'ASC')));
            $this->set('level1name', $level1name);
            $levellist1record = $this->Level1->query("SELECT a.prop_level1_list_id, a.level_1_id, a.list_1_desc_en, a.list_1_desc_ll, 
                        a.list_1_remark_en, a.list_1_remark_ll, a.id, a.state_id,b.level_1_desc_en,b.level_1_desc_ll,a.level_1_from_range,a.level_1_to_range,a.village_id
                        ,c.village_name_en,c.village_name_ll
                   FROM ngdrstab_mst_loc_level_1_prop_list a
                   left outer join ngdrstab_mst_location_levels_1_property b on b.level_1_id = a.level_1_id 
                   left outer join ngdrstab_conf_admblock7_village_mapping c on c.village_id=a.village_id order by a.list_1_desc_en ASC");
            $this->set('levellist1record', $levellist1record);

            $village = $this->damblkdpnd->find('list', array(
                'fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'),
                'order' => array('damblkdpnd.village_name_en' => 'ASC'),
                'joins' => array(array('table' => 'ngdrstab_mst_loc_level_1_prop_list',
                        'alias' => 'vlgloc',
                        'type' => 'INNER',
                        'conditions' => array('damblkdpnd.village_id = vlgloc.village_id')
                    ))
                    )
            );
//            pr($village);exit;
            $this->set('village', $village);

            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['levellist1']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);

                $this->request->data['levellist1']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['levellist1']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['levellist1']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['levellist1']);exit;
                        if ($this->Level1->save($this->request->data['levellist1'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist1'));
                            $this->set('levellist1record', $this->Level1->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }

                if ($actiontype == '3') {
                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->Level1->id = $hfid;
                        if ($this->Level1->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'levellist1'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('levellist1record', $this->Level1->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function get_taluka_name() {
        //echo 1;exit;
        try {
            $this->loadModel('damblkdpnd');
            $this->loadModel('taluka');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            if (isset($_GET['district'])) {

                $district = $_GET['district'];
                $abc = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.taluka_id'), 'conditions' => array('damblkdpnd.district_id' => array($district))));
                $talukaname = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_en'), 'conditions' => array('taluka.taluka_id' => $abc), 'order' => array('taluka.taluka_name_en' => 'ASC')));

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);

                $json2array['taluka'] = $talukaname;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($talukaname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function get_data() {
//        echo 1;exit;
        try {
            $this->loadModel('Levels_1_property');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            if (isset($_GET['village'])) {

                $village = $_GET['village'];

                $options1['conditions'] = array('Levels_1_property.village_id' => $village);
                $options1['joins'] = array(array('table' => 'ngdrstab_conf_admblock1_state', 'alias' => 'state', 'type' => 'INNER', 'conditions' => array('Levels_1_property.state_id = state.state_id')), array('table' => 'ngdrstab_mst_surveyno_type', 'alias' => 'srnotype', 'type' => 'INNER', 'conditions' => array('Levels_1_property.surveynotype_id=srnotype.surveynotype_id')));
                $options1['fields'] = array('Levels_1_property.*', 'state.state_name_en', 'srnotype.surveynotype_desc_en');

                $datashow = $this->Levels_1_property->find('all', $options1);
                echo json_encode($datashow);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function get_village_name() {
        //echo 1;exit;
        try {
            $this->loadModel('damblkdpnd');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            if (isset($_GET['taluka'])) {

                $taluka = $_GET['taluka'];

                $abc = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id'), 'conditions' => array('damblkdpnd.taluka_id' => array($taluka))));
                $villagename = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_en'), 'conditions' => array('damblkdpnd.village_id' => $abc), 'order' => array('damblkdpnd.village_name_en' => 'ASC')));

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);

                $json2array['village'] = $villagename;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($villagename);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function usagelnkcategory() {
        $this->loadModel('usagelinkcategory');
        $name = array_keys($this->usagelinkcategory->getColumnTypes());
        $this->set('name', $name);
        $lang = $this->Session->read("sess_langauge");
        $this->set('lang', $lang);
        $stateid = $this->Auth->User("state_id");
        $this->set('maincat_id', ClassRegistry::init('usage_main_category')->find('list', array('fields' => array('usage_main_catg_id', 'usage_main_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid))));
        $this->set('constructiontype', ClassRegistry::init('constructiontype')->find('list', array('fields' => array('construction_type_id', 'construction_type_desc_' . $lang))));
        $this->set('depreciation', ClassRegistry::init('depreciation')->find('list', array('fields' => array('deprication_type_id', 'deprication_type_desc_' . $lang), 'order' => 'deprication_type_id asc')));
        // need to change .$lang for desc
        $this->set('parameters', ClassRegistry::init('articleparameters')->find('list', array('fields' => array('id', 'parameter_desc_' . $lang), 'order' => 'id asc')));
        $this->set('roadvicinitylist', ClassRegistry::init('roadvicinity')->find('list', array('fields' => array('id', 'road_vicinity_desc_' . $lang), 'order' => 'id asc')));
        $this->set('evalrule', ClassRegistry::init('evalrule')->find('list', array('fields' => array('evalrule_id', 'evalrule_desc_' . $lang), 'order' => 'id asc')));
        if ($this->request->is('POST')) {
            $this->check_csrf_token($this->request->data['usagelnkcategory']['csrftoken']);
            $frm = $this->request->data['usagelnkcategory'];
            $this->request->data['usagelnkcategory']['req_ip'] = $_SERVER['REMOTE_ADDR'];
            $this->request->data['usagelnkcategory']['user_id'] = $this->Auth->User('user_id');
            // $this->request->data['usagelnkcategory']['created_date'] = date('Y-m-d');
            $this->request->data['usagelnkcategory']['state_id'] = $this->Auth->User('state_id');
            $conditions = NULL;
            if ($frm[$name[1]]) {
                $conditions[$name[1]] = $frm[$name[1]];
            }
            if ($frm[$name[2]]) {
                $conditions[$name[2]] = $frm[$name[2]];
            }
            if ($frm[$name[3]]) {
                $conditions[$name[3]] = $frm[$name[3]];
            }
            if ($frm[$name[10]]) {
                $conditions[$name[10]] = $frm[$name[10]];
            }
            if ($frm[$name[11]]) {
                $conditions[$name[11]] = $frm[$name[11]];
            }
            if ($frm[$name[12]]) {
                $conditions[$name[12]] = $frm[$name[12]];
            }

            if ($this->usagelinkcategory->updateAll(array("evalrule_id" => $frm['evalrule_id']), $conditions)) {

                $this->Session->setFlash("lbleditmsg");
                $this->redirect('usagelnkcategory');
            } else {
                $this->Session->setFlash("There is some error");
            }
        }
        $this->set_csrf_token();
    }

    public function getcdrflags() {
        $sub_sub_catg_id = $_GET['usage_sub_sub_catg_id'];
        $this->loadModel('usage_sub_sub_category');
        $result = $this->usage_sub_sub_category->find('all', array('fields' => array('contsruction_type_flag', 'depreciation_flag', 'road_vicinity_flag', 'user_defined_dependency1_flag', 'user_defined_dependency2_flag'), 'conditions' => array('usage_sub_sub_catg_id' => $sub_sub_catg_id)));
        echo json_encode($result[0]['usage_sub_sub_category']);
        exit;
    }

    public function getrulebycdrv() {
        try {
            $cid = $_GET['constuction_id'];
            $did = $_GET['deprecition_id'];
            $rvid = $_GET['rvicinity_id'];
            $result = ClassRegistry::init('evalrule')->find('list', array('fields' => array('evalrule_id', 'evalrule_desc_' . $this->Session->read("sess_langauge")), 'conditions' => array('construction_type_id' => $cid, 'depreciation_id' => $did, 'road_vicinity_id' => $rvid), 'order' => 'evalrule_id asc'));
            echo json_encode($result);
            exit;
        } catch (Exception $e) {
            echo "hello";
            //$this->redirect(array('action' => 'error404'));
        }
    }

    public function getsubsubruledesc() {
        try {
            $ussc = $_GET['usage_sub_sub_catg_id'];
            $result = ClassRegistry::init('usage_sub_sub_category')->find('all', array('fields' => array('usage_sub_sub_catg_desc_ll', 'usage_sub_sub_catg_desc_en'), 'conditions' => array('usage_sub_sub_catg_id' => $ussc), 'order' => 'usage_sub_sub_catg_id asc'));
            echo json_encode($result[0]['usage_sub_sub_category']);
            exit;
        } catch (Exception $e) {
            echo "hello";
            //$this->redirect(array('action' => 'error404'));
        }
    }

    public function getcategoryids() {
        try {
            $ruleid = $_GET['evalruleid'];
//            $ruleresult = ClassRegistry::init('evalrule')->find('all', array('fields' => array('evalrule_id', 'construction_type_id', 'depreciation_id', 'road_vicinity_id', 'user_defined_dependency1_id', 'user_defined_dependency2_id'), 'conditions' => array('evalrule_id' => $ruleid), 'order' => 'evalrule_id asc'));
            $ruleresult = ClassRegistry::init('evalrule')->find('all', array('fields' => array('evalrule_id'), 'conditions' => array('evalrule_id' => $ruleid), 'order' => 'evalrule_id asc'));
            $frm = $ruleresult[0]['evalrule'];
            $conditions['evalrule_id'] = $frm['evalrule_id'];
//            if ($frm['construction_type_id']) {
//                $conditions['construction_type_id'] = $frm['construction_type_id'];
//            }
//            if ($frm['depreciation_id']) {
//                $conditions['depreciation_id'] = $frm['depreciation_id'];
//            }
//            if ($frm['road_vicinity_id']) {
//                $conditions['road_vicinity_id'] = $frm['road_vicinity_id'];
//            }
//            if ($frm['user_defined_dependency1_id']) {
//                $conditions['user_defined_dependency1_id'] = $frm['user_defined_dependency1_id'];
//            }
//            if ($frm['user_defined_dependency2_id']) {
//                $conditions['user_defined_dependency2_id'] = $frm['user_defined_dependency2_id'];
//            }            
            $result = ClassRegistry::init('usagelinkcategory')->find('all', array('fields' => array('usage_main_catg_id', 'usage_sub_catg_id', 'usage_sub_sub_catg_id'), 'conditions' => $conditions, 'order' => 'usage_sub_sub_catg_id asc'));
            echo json_encode($result[0]['usagelinkcategory']);
            exit;
        } catch (Exception $e) {
            pr($e);
            exit;
            //$this->redirect(array('action' => 'error404'));
        }
    }

    public function formlabel() {
//         
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('Formlabel');
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('labelrecord', $this->Formlabel->find('all', array('order' => 'label_desc_en ASC')));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['Formlabel']['req_ip'] = $req_ip;
            $this->request->data['Formlabel']['user_id'] = $user_id;
            //$this->request->data['Formlabel']['created_date'] = $created_date;
            $this->request->data['Formlabel']['state_id'] = $stateid;
            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['labelname']['text'] = 'is_required,is_alphaunderscore,is_maxlength255';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['label_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumspacedashdotslashroundbrackets,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['label_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Formlabel']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Formlabel']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }

                        $this->request->data['Formlabel'] = $this->istrim($this->request->data['Formlabel']);
                        $errarr = $this->validatedata($this->request->data['Formlabel'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }

                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $count = $this->Formlabel->find('count', array('conditions' => array('or' => array(array('upper(labelname)' => strtoupper($this->request->data['Formlabel']['labelname'])), array('upper(label_desc_en)' => strtoupper($this->request->data['Formlabel']['label_desc_en']))))));
                            if ($count == 0 || $_POST['hfid']) {
                                if ($this->Formlabel->save($this->request->data['Formlabel'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'formlabel'));
                                    $this->set('Formlabelrecord', $this->Formlabel->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__("Record Already Exists"));
                            }
                        }
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }

        $this->set_csrf_token();
    }

    public function delete_Formlabel($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('Formlabel');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'Formlabel') {
                $this->Formlabel->id = $id;
                if ($this->Formlabel->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'Formlabel'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function form_field_linkage() {
        try {
//            pr($this->Auth->User('state_id'));
            $this->loadModel('fieldformlinkage');
            $labelsdata = $this->fieldformlinkage->find('all', array('order' => 'id'));
            $this->set('name', array_keys($this->fieldformlinkage->getColumnTypes()));
            $stateid = $this->Auth->User('state_id');
            $this->set('formlist', ClassRegistry::init('Form')->find('list', array('fields' => array('id', 'form_name'), 'çonditions' => array('state_id' => $this->Auth->User('state_id')), 'order' => array('form_name' => 'ASC'))));
//pr(ClassRegistry::init('Form')->find('list', array('fields' => array('id', 'form_name','state_id'))));
            // $check=ClassRegistry::init('Form')->find('list', array('fields' => array('Form.id', 'Form.form_name'), 'çonditions' => array('Form.state_id' => $stateid)));
            // pr($check);exit;
            // $this->set('formlist', ClassRegistry::init('Form')->find('list', array('fields' => array('id', 'form_name', 'conditions' => array('state_id' => 'MH')))));

            $this->set('fieldlist', ClassRegistry::init('fieldlist')->find('list', array('fields' => array('id', 'fieldname'), 'order' => array('fieldname' => 'ASC'))));

            $this->set('behaviourlist', ClassRegistry::init('behaviour')->find('list', array('fields' => array('id', 'behaviour_desc'), 'çonditions' => array('mf_id' => $this->Auth->User('state_id')), 'order' => array('behaviour_desc' => 'ASC'))));


            $labelsdata1 = $this->fieldformlinkage->Query("select ln.*,f.form_name,fl.fieldname,bvr.behaviour_desc from ngdrstab_mst_fieldform_linkage ln,ngdrstab_mst_form_behaviour bvr,ngdrstab_mst_mf_forms f , ngdrstab_mst_fieldlist fl where ln.form_id=f.id and ln.field_id=fl.id and bvr.id= ln.behaviour_id order by ln.id asc");
            $this->set('ffldata', $labelsdata1);
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $user_id = $this->Auth->User("user_id");

            $this->request->data['fieldformlinkage']['req_ip'] = $req_ip;
            $this->request->data['fieldformlinkage']['user_id'] = $user_id;
            // $this->request->data['fieldformlinkage']['created_date'] = $created_date;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['fieldformlinkage']['csrftoken']);
                $frmAction = $this->request->data['frmaction'];
//                echo'hi';
                if ($frmAction == 'U' || $frmAction == 'SV') { // Update or Save Label
                    $this->request->data['fieldformlinkage']['state_id'] = $this->Auth->User('state_id');
                    if ($frmAction == 'U') {
                        $this->request->data['fieldformlinkage']['id'] = $this->request->data['field_form_id'];
                        $savetype = "lbleditmsg";
                    } else {
                        $savetype = "lblsavemsg";
                    }
                    if (trim($this->request->data['fieldformlinkage']['form_id']) && trim($this->request->data['fieldformlinkage']['field_id'])) {
                        if ($this->fieldformlinkage->save($this->request->data['fieldformlinkage'])) {
//                            pr($this->request->data['fieldformlinkage']);
//                            exit;
                            $this->Session->setFlash($savetype);
                            $this->redirect(array('action' => 'form_field_linkage'));
                        } else {
                            $this->Session->setFlash("There is some error");
                        }
                    } else {
                        $this->Session->setFlash("Please Enter BothFields");
                    }
                }
                if ($frmAction == 'E') {
                    $this->redirect(array('controller' => 'Users', 'action' => 'welcomenote'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function fieldmaster() {
        try {
            $this->check_role_escalation();
            $this->loadModel('fieldlist');

            $this->set('name', array_keys($this->fieldlist->getColumnTypes()));
            $this->set('lbllist', ClassRegistry::init('Formlabel')->find('list', array('fields' => array('id', 'label_desc_en'), 'order' => array('label_desc_en' => 'ASC'))));

            $labelsdata = $this->fieldlist->Query("select f.id,f.label_id,f.fieldname,l.label_desc_en,l.label_desc_ll from ngdrstab_mst_fieldlist f ,ngdrstab_mst_formlabels l where l.id=f.label_id order by f.id asc");
            $this->set('fields', $labelsdata);
            $this->set('lang', $this->Session->read("sess_langauge"));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $user_id = $this->Auth->User("user_id");

            $this->request->data['fieldlist']['req_ip'] = $req_ip;
            $this->request->data['fieldlist']['user_id'] = $user_id;
            //$this->request->data['fieldlist']['created_date'] = $created_date;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['fieldlist']['csrftoken']);
                $frmAction = $this->request->data['frmaction'];
                if ($frmAction == 'U' || $frmAction == 'SV') { // Update or Save Label                    
                    if ($frmAction == 'U') {
                        $this->request->data['fieldlist']['id'] = $this->request->data['lbl_label_id'];
                        $savetype = "lbleditmsg";
                    } else {
                        $savetype = "lblsavemsg";
                    }
                    if (trim($this->request->data['fieldlist']['fieldname']) && trim($this->request->data['fieldlist']['label_id'])) {
                        if ($this->fieldlist->save($this->request->data['fieldlist'])) {
                            $this->Session->setFlash($savetype);
                            $this->redirect(array('action' => 'fieldmaster'));
                        } else {
                            $this->Session->setFlash("There is some error");
                        }
                    } else {
                        $this->Session->setFlash("Please Enter BothFields");
                    }
                } else if ($frmAction == 'D') {
                    if ($this->fieldlist->delete($this->request->data['lbl_label_id'])) {
                        $this->Session->setFlash(__('lbldeletemsg'));
                        $this->redirect(array('action' => 'fieldmaster'));
                    } else {
                        $this->Session->setFlash(__('lblnotdeletemsg'));
                    }
                } else if ($frmAction == 'E') {
                    $this->redirect(array('controller' => 'Users', 'action' => 'welcomenote'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function document() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('document');

            $this->loadModel('language');
            $this->loadModel('mainlanguage');

            $articlelist = ClassRegistry::init('article')->find('list', array('fields' => array('article.article_id', 'article.article_desc_en'), 'order' => array('article_desc_en' => 'ASC')));
            $this->set('articlelist', $articlelist);



            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('documentrecord', $this->document->find('all'));
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['document']['req_ip'] = $req_ip;
            $this->request->data['document']['user_id'] = $user_id;
            //$this->request->data['document']['created_date'] = $created_date;
            $this->request->data['document']['state_id'] = $stateid;
            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['article_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['document_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaslashspacebraces,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['document_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {

                $this->check_csrf_token($this->request->data['document']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['document']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['document'] = $this->istrim($this->request->data['document']);
                        $errarr = $this->validatedata($this->request->data['document'], $fieldlist);


                        if ($this->ValidationError($errarr)) {
                            $duplicate['Table'] = 'ngdrstab_mst_article_documenttitle';
                            $duplicate['Fields'] = array('document_desc_en', 'document_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U     
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['document']);
                            if ($checkd) {
                                if ($this->document->save($this->request->data['document'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'document'));
                                    $this->set('documentrecord', $this->document->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->document->save($this->request->data['document'])) {
//                                $this->Session->setFlash(__($actionvalue));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'document'));
//                                $this->set('documentrecord', $this->document->find('all'));
//                            } else {
//                                $this->Session->setFlash(__('lblnotsavemsg'));
//                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_document($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('document');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'document') {
                $this->document->id = $id;
                if ($this->document->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'document'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

//    public function calculate_fine($article, $tokenno, $amount) {
//        try {
////            echo $article;exit;
//            $this->loadModel('finefee');
//            $this->loadModel('fees_calculation_detail');
//            $this->loadModel('fees_calculation');
//
//
//            $user_id = $this->Auth->User("user_id");
//            $stateid = $this->Auth->User("state_id");
//            $getarticle = $this->finefee->query("Select article_id from ngdrstab_mst_finefee where article_id=?", array($article));
////        pr($getarticle);exit;
//            $exitarticle = $getarticle[0][0]['article_id'];
////        pr($exitarticle);exit;
//            if ($exitarticle != NULL) {
//
//                $getrecord = $this->finefee->query("select a.finefee_id,a.article_id,a.fixed_amt_flag,a.fix_fee_amt,a.fee_formula_format,a.fine_description,a.state_id,a.user_id,a.fee_item_id from ngdrstab_mst_finefee a 
//                                                inner join ngdrstab_mst_article_fee_items b on a.fee_item_id=b.fee_item_id 
//                                                where a.article_id=?", array($exitarticle));
//
//                $finefeeid = $getrecord[0][0]['finefee_id'];
//                $articleid = $getrecord[0][0]['article_id'];
//                $finedescription = $getrecord[0][0]['fine_description'];
//                $feeitemid = $getrecord[0][0]['fee_item_id'];
//                $fee_formula_format = $getrecord[0][0]['fee_formula_format'];
//                $fixed_amt_flag = $getrecord[0][0]['fixed_amt_flag'];
//
//                $fixedamount = $getrecord[0][0]['fix_fee_amt'];
//                if ($fixed_amt_flag == 'Y') {
//                    $finefeecalculate = $fixedamount;
//                } else {
//                    $formula = str_replace("FAA", $amount, $fee_formula_format);
//                    $finefeecalculate = eval("return (" . $formula . ");");
//
//                    //$p = eval('return '.$formula.';');
//                    //$finefeecalculate = eval($formula);
//                    //pr( $finefeecalculate);exit;
//                }
//            } else {
//                $getrecord = $this->finefee->query("select a.finefee_id,a.article_id,a.fixed_amt_flag,a.fix_fee_amt,a.fee_formula_format,a.fine_description,a.state_id,a.user_id from ngdrstab_mst_finefee a         
//                                                inner join ngdrstab_mst_article_fee_items b on a.fee_item_id=b.fee_item_id 
//                                                where a.article_id=?", array(99999));
//                $finefeeid = $getrecord[0][0]['finefee_id'];
//                $articleid = $getrecord[0][0]['article_id'];
//                $finedescription = $getrecord[0][0]['fine_description'];
//                $fee_formula_format = $getrecord[0][0]['fee_formula_format'];
//                $fixed_amt_flag = $getrecord[0][0]['fixed_amt_flag'];
//                $fixedamount = $getrecord[0][0]['fix_fee_amt'];
//                if ($fixed_amt_flag == 'Y') {
//                    $finefeecalculate = $fixedamount;
//                } else {
//                    $formula = str_replace("FAA", $amount, $fee_formula_format);
//                    $finefeecalculate = eval("return (" . $formula . ");");
//
//                    //$p = eval('return '.$formula.';');
//                    //$finefeecalculate = eval($formula);
//                    //pr( $finefeecalculate);exit;
//                }
//            }
//
//            //insertret
//            //fee calculate
//            $calculate_savequery = $this->fees_calculation->query("insert into ngdrstab_trn_fee_calculation (token_no,article_id,market_value,cons_amt,final_amt,state_id,user_id) values(?,?,?,?,?,?,?)", array($tokenno, $articleid, $amount, $amount, $finefeecalculate, $stateid, $user_id));
////        pr($tokenno);
//            if ($calculate_savequery == NULL) {
//                $calculaterecord = $this->fees_calculation->query("select fee_calc_id from ngdrstab_trn_fee_calculation where token_no= ?", array($tokenno));
//                //pr($calculaterecord);exit;
//                foreach ($calculaterecord as $calculaterecord1) {
//                    $feecalcid = $calculaterecord1[0]['fee_calc_id'];
//                    $calculate_details_savequery = $this->fees_calculation_detail->query("insert into ngdrstab_trn_fee_calculation_detail (fee_calc_id,fee_calc_desc,fee_item_id,final_value,state_id,user_id) values(?,?,?,?,?,?)", array($feecalcid, $finedescription, $feeitemid, $amount, $stateid, $user_id));
//                }
//            }
//        } catch (Exception $ex) {
//            $this->Session->setFlash(
//                    __('Error :' . $ex)
//            );
//        }
//    }

    public function article() {
        try {

//             $article_id = 123;
//            $token_no = '20170000514';
//            $amount = 500;
////
//            $this->calculate_fine($article_id, $token_no, $amount);
//            exit;
            $this->check_role_escalation();
            $this->loadModel('article');
            $this->loadModel('State');

            $this->set('articlerecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->request->data['article']['req_ip'] = $this->request->clientIp();
            $this->request->data['article']['user_id'] = $user_id;
            // $this->request->data['article']['created_date'] = $created_date;
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('articlerecord', $this->article->find('all'));
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['article_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_maxlength255';
                    //$fieldlist['article_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaslashspacebraces,is_maxlength255';
                } else {
                    //$fieldlist['article_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                    $fieldlist['article_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "maxlength_unicode_0to255";
                }
            }
            $fieldlist['fix_article_code']['text'] = 'is_alphanumeric';

//            $fieldlist['valuation_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['stamp_duty_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['dock_expiry_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['exemption_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['lr_connection_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['property_applicable']['radio'] = 'is_yes_no_imp';
//            $fieldlist['usage_dependancy_flag']['radio'] = 'is_yes_no_imp';
//            $fieldlist['location_dependancy_flag']['radio'] = 'is_yes_no_imp';
//            $fieldlist['use_common_rule_flag']['radio'] = 'is_yes_no_imp';
//            $fieldlist['gov_body_applicable']['radio'] = 'is_yes_no_imp';



            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['article']['csrftoken']);
                // pr($this->request->data);
                $actiontype = $_POST['actiontype'];
                //pr($actiontype);exit;
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $this->request->data['article']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $this->request->data['article']['state_id'] = $stateid;
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['article']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $errarr = $this->validatedata($this->request->data['article'], $fieldlist);
                        if ($this->ValidationError($errarr)) {
//                            pr($this->request->data);exit;
                            $duplicate['Table'] = 'ngdrstab_mst_article';
                            $duplicate['Fields'] = array('article_desc_en', 'article_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U  
                            $duplicate['PrimaryKey'] = 'id';
                            if ($this->request->data['hfupdateflag'] != 'Y') {
                                $checkd = $this->check_duplicate($duplicate, $this->request->data['article']);
                            } else {
                                $checkd = 1;
                            }
                            //pr($checkd);exit;
                            if ($checkd) {
                                if ($this->article->save($this->request->data['article'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'article'));
                                    $this->set('articlerecord', $this->article->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function article_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('article');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'article') {
                $this->article->id = $id;
                if ($this->article->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'article'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function tokenstatus() {
        try {
            $this->loadModel('tokenstatus');
            $this->loadModel('State');

            $this->set('tokenstatusrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('laug', NULL);
            $this->set('partyrecord', NULL);
            $user_id = $this->Auth->User("user_id");

            $tokenstatusrecord = $this->tokenstatus->query("select a.id,a.party_id,b.party_name,a.tokan_no
            from ngdrstab_trn_tokanstatus a
            inner join ngdrstab_trn_partydetails b on b.party_id = a.party_id
            where a.dock_verification_level1=? ", array('N'));
            $this->set('tokenstatusrecord', $tokenstatusrecord);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['tokenstatus']['csrftoken']);
                $date = date('Y/m/d H:i:s');
                $req_ip = $_SERVER['REMOTE_ADDR'];

                $actiontype = $_POST['actiontype'];
                $this->set('actiontypeval', $actiontype);
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
//                pr($this->request->data);exit;

                if ($actiontype == '1') {

                    $partyrecord = $this->tokenstatus->query("SELECT id, party_id,party_name,city, mobile_no,pan_card_no,email_id
                        FROM ngdrstab_trn_partydetails  where party_id = ? ", array($hfid));
                    $this->set('partyrecord', $partyrecord);
                }
                if ($actiontype == 2) {

                    $verify = $this->tokenstatus->query("update ngdrstab_trn_tokanstatus SET dock_verification_level1=?, req_ip=?, user_id=?, dock_verification_level1_date=? where party_id =?  ", array('Y', '$req_ip', $user_id, $date, $hfid));
                    if ($verify == null) {
                        $this->Session->setFlash(__('Record Verified Successfully'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'tokenstatus'));
                    } else {
                        $this->Session->setFlash(__('Record Not Verified'));
                    }
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->tokenstatus->id = $hfid;

                        if ($this->tokenstatus->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'tokenstatus'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('tokenstatusrecord', $this->tokenstatus->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function survey() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('survey');

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('surveyrecord', $this->survey->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['survey']['req_ip'] = $req_ip;
            $this->request->data['survey']['user_id'] = $user_id;
            // $this->request->data['survey']['created_date'] = $created_date;
            $this->request->data['survey']['state_id'] = $stateid;
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['survey_lable_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['survey_lable_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['survey']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['survey']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['survey'] = $this->istrim($this->request->data['survey']);

//                        if (empty($SV1)) {
                        $errarr = $this->validatedata($this->request->data['survey'], $fieldlist);
                        if ($this->ValidationError($errarr)) {
                            $duplicate['Table'] = 'ngdrstab_mst_survey';
                            $duplicate['Fields'] = array('survey_lable_en', 'survey_lable_ll');
                            $duplicate['Action'] = $duplicateflag; //U         
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['survey']);
                            if ($checkd) {
                                if ($this->survey->save($this->request->data['survey'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'survey'));
                                    $this->set('surveyrecord', $this->survey->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
//                        } else {
//                            $this->Session->setFlash(__('Property Attribute Already Exist'));
//                        }
                    }
                }

                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('survey');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'survey') {
                $this->survey->id = $id;
                if ($this->survey->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'survey'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function officehierarchy() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('officehierarchy');

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
//            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
//            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('officerecord', $this->officehierarchy->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['officehierarchy']['req_ip'] = $req_ip;
            $this->request->data['officehierarchy']['user_id'] = $user_id;
            // $this->request->data['officehierarchy']['created_date'] = $created_date;
            $this->request->data['officehierarchy']['state_id'] = $stateid;

            //adding field list dynamically from language list
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['hierarchy_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedotroundbrackets,is_maxlength255';
                } else {
                    $fieldlist['hierarchy_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['sort_level_id']['text'] = 'is_required,is_positiveinteger,is_maxlength10';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['officehierarchy']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['officehierarchy']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['officehierarchy'] = $this->istrim($this->request->data['officehierarchy']);
                        $errarr = $this->validatedata($this->request->data['officehierarchy'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->officehierarchy->save($this->request->data['officehierarchy'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'officehierarchy'));
                                $this->set('officerecord', $this->officehierarchy->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
//                        else {
//                            pr($this->request->data);exit;
//                        $off = $this->request->data['officehierarchy']['office_name_en'];
//                       pr($off);exit;
//
//                        $office = $this->office->query("select office_name_en from ngdrstab_mst_office where office_name_en like '%$off%' ");
//                        if (empty($office)) {
//                            if ($this->office->save($this->request->data['officenew'])) {
//                                $this->Session->setFlash(__($actionvalue));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'officenew'));
//                            } else {
//                                $this->Session->setFlash(__('lblnotsavemsg'));
//                            }
//                        } else {
//                            $this->Session->setFlash(__('Office Name Already Exist'));
//                        }
//                    }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_officehierarchy($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('officehierarchy');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->officehierarchy->id = $id;
                if ($this->officehierarchy->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'officehierarchy'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function office() {
        try {
            $this->check_role_escalation();
            $this->loadModel('office');
            $this->loadModel('levelconfig');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('officehierarchy');
            $this->loadModel('District');
            $this->loadModel('division');
            $this->loadModel('subdivision');
            $this->loadModel('circle');
            $this->loadModel('corporationclass');
            $this->loadModel('damblkdpnd');
            $this->loadModel('Levels_1_property');
            $this->loadModel('Level2_property');
            $this->loadModel('Level3_property');
            $this->loadModel('Level4_property');
            $this->loadModel('Level1');
            $this->loadModel('Level2');
            $this->loadModel('Level3');
            $this->loadModel('Level4');
            $this->loadModel('workshift');
            $this->loadModel('designation');
            $this->loadModel('VillageMapping');
            $this->loadModel('Developedlandtype');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('divisiondata', NULL);
            $this->set('districtdata', NULL);
            $this->set('subdivdata', NULL);
            $this->set('talukadata', NULL);
            $this->set('circledata', NULL);
            $this->set('ulbdata', NULL);
            $this->set('level1propertydata', NULL);
            $this->set('level2propertydata', NULL);
            $this->set('level3propertydata', NULL);
            $this->set('level4propertydata', NULL);
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['office']['req_ip'] = $req_ip;
//            $this->request->data['office']['user_id'] = $user_id;
            //$this->request->data['office']['created_date'] = $created_date;
            $statename = $this->Session->read("state_name_en");
            $language = $this->Session->read("sess_langauge");
            if ($language == 'mh') {
                $language = 'll';
            }
            $this->set('language', $language);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            //-----------------QP ON 2DEC BY KLAYANI--------------------------------------
            $configure = $this->office->query("select * from ngdrstab_conf_state_district_div_level where state_id=?", array($stateid));
            $this->set('configure', $configure);
            $configure1 = $this->levelconfig->find('all', array('Conditions', array('state_id' => $stateid)));
            $this->set('configure1', $configure1);
            $grid = $this->office->query("SELECT a.office_id, a.office_code, a.hierarchy_id, a.state_id, a.division_id, 
                            a.district_id, a.subdivision_id, a.taluka_id, a.circle_id, a.ulb_type_id, 
                            a.village_id, a.developed_land_types_id, a.level1_id, a.level1_list_id, 
                            a.level2_id, a.level2_list_id, a.level3_id, a.level3_list_id, a.level4_id, 
                            a.level4_list_id, a.address, a.pincode, a.contact_person, a.designation, 
                            a.mobile_no, a.office_no, a.office_shift, a.id, a.office_name_en, a.office_name_ll, 
                            a.reporting_office,
                            b.hierarchy_desc,b.hierarchy_desc_ll,c.desg_desc_en,c.desg_desc_ll,d.shift_desc_eng
                            FROM ngdrstab_mst_office a
                            inner join ngdrstab_mst_office_hierarchy b on b.hierarchy_id=a.hierarchy_id
                            inner join ngdrstab_mst_designation c on c.desg_id=a.designation
                            inner join ngdrstab_mst_work_shifts d on d.shift_id=a.office_shift");
            $this->set('grid', $grid);
            $districtnname = $this->District->find('list', array('fields' => array('District.id', 'District.district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_en' => 'ASC')));
            $this->set('districtdata', $districtnname);
            $subdivisiondata = $this->subdivision->find('list', array('fields' => array('subdivision.id', 'subdivision.subdivision_name_' . $language), 'order' => array('subdivision_name_en' => 'ASC')));
            $this->set('subdivisiondata', $subdivisiondata);
            $blockname = $this->circle->find('list', array('fields' => array('circle.id', 'circle.circle_name_' . $language), 'order' => array('circle_name_en' => 'ASC')));
            $this->set('blockdata', $blockname);
            $corpclassname = $this->corporationclass->find('list', array('fields' => array('corporationclass.ulb_type_id', 'corporationclass.class_description_en'), 'order' => array('class_description_en' => 'ASC')));
            $this->set('corpclassdata', $corpclassname);
            $taluka = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.id', 'taluka.taluka_name_' . $language), 'order' => array('taluka_name_en' => 'ASC')));
            $this->set('taluka', $taluka);
            $villagenname = $this->VillageMapping->find('list', array('fields' => array('VillageMapping.village_id', 'VillageMapping.village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_en' => 'ASC')));
            $this->set('villagenname', $villagenname);
            $Developedland = $this->Developedlandtype->find('list', array('fields' => array('Developedlandtype.developed_land_types_id', 'Developedlandtype.developed_land_types_desc_' . $language), 'order' => array('developed_land_types_desc_en' => 'ASC')));
            $this->set('Developedland', $Developedland);
            $level1propertyname = $this->Levels_1_property->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_en'), 'order' => array('level_1_desc_en' => 'ASC')));
            $this->set('level1propertydata', $level1propertyname);
            $level2propertyname = $this->Level2_property->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_en'), 'order' => array('level_2_desc_en' => 'ASC')));
            $this->set('level2propertydata', $level2propertyname);
            $level3propertyname = $this->Level3_property->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_en'), 'order' => array('level_3_desc_en' => 'ASC')));
            $this->set('level3propertydata', $level3propertyname);
            $level4propertyname = $this->Level4_property->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_en'), 'order' => array('level_4_desc_en' => 'ASC')));
            $this->set('level4propertydata', $level4propertyname);
            $level1propertylist = $this->Level1->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_en'), 'order' => array('list_1_desc_en' => 'ASC')));
            $this->set('level1propertylist', $level1propertylist);
            $level2propertylist = $this->Level2->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_en'), 'order' => array('list_2_desc_en' => 'ASC')));
            $this->set('level2propertylist', $level2propertylist);
            $level3propertylist = $this->Level3->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_en'), 'order' => array('list_3_desc_en' => 'ASC')));
            $this->set('level3propertylist', $level3propertylist);
            $level4propertylist = $this->Level4->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_en'), 'order' => array('list_4_desc_en' => 'ASC')));
            $this->set('level4propertylist', $level4propertylist);
            $reportingofficedata = $this->office->find('list', array('fields' => array('office.office_name_' . $language), 'order' => array('office_name_en' => 'ASC')));
            $this->set('reportingofficedata', $reportingofficedata);
            $hierarchydata = $this->officehierarchy->find('list', array('fields' => array('officehierarchy.hierarchy_id', 'officehierarchy.hierarchy_desc'), 'order' => array('hierarchy_desc' => 'ASC')));
            $this->set('hierarchydata', $hierarchydata);
            if ($configure[0][0]['is_div'] == 1) {
                $divisionname = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.division_id', 'grp.division_name_' . $language),
                    'order' => array('grp.division_name_' . $language => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock2_division',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array('damblkdpnd.division_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('divisiondata', $divisionname);
            } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 1) {
                $districtname = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.state_id', 'grp.district_name_' . $language),
                    'order' => array('grp.district_name_' . $language => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock3_district',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array('damblkdpnd.state_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('districtdata', $districtname);
            } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 1) {
                $subdivname = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.subdivision_id', 'grp.subdivision_name_' . $language),
                    'order' => array('grp.subdivision_name_' . $language => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock4_subdivision',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array('damblkdpnd.subdivision_id = grp.id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('subdivdata', $subdivname);
            } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 1) {
                $talukaname = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.taluka_id', 'grp.taluka_name_' . $language),
                    'order' => array('grp.taluka_name_' . $language => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock5_taluka',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array(' grp.id = damblkdpnd.taluka_id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('talukadata', $talukaname);
            } else if ($configure[0][0]['is_div'] == 0 && $configure[0][0]['is_dist'] == 0 && $configure[0][0]['is_zp'] == 0 && $configure[0][0]['is_taluka'] == 0 && $configure[0][0]['is_block'] == 1) {
                $circlename = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.circle_id', 'grp.circle_name_' . $language),
                    'order' => array('grp.circle_name_' . $language => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock6_circle',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array(' grp.id = damblkdpnd.circle_id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('circledata', $circlename);
            } else {
                $ulbname = $this->damblkdpnd->find('list', array(
                    'fields' => array('damblkdpnd.ulb_type_id', 'grp.class_description_en'),
                    'order' => array('grp.class_description_en' => 'ASC'),
                    'joins' => array(array('table' => 'ngdrstab_conf_admblock_local_governingbody',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array(' grp.id = damblkdpnd.ulb_type_id', 'damblkdpnd.state_id= grp.state_id')
                        ))
                        )
                );
                $this->set('ulbdata', $ulbname);
            }
            //LOCATION
            if ($configure1[0]['levelconfig']['is_level_1_id'] == 1) {
                $level1propertyname = $this->Levels_1_property->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $language), 'order' => array('level_1_desc_en' => 'ASC')));
                $this->set('level1propertydata', $level1propertyname);
            } else if (($configure1[0]['levelconfig']['is_level_1_id'] == 0) && ($configure1[0]['levelconfig']['is_level_2_id'] == 1)) {
//                    pr('hi');exit;
                $level2propertyname = $this->Level2_property->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $language), 'order' => array('level_2_desc_en' => 'ASC')));
                $this->set('level2propertydata', $level2propertyname);
            } else if (($configure1[0]['levelconfig']['is_level_1_id'] == 0) && ($configure1[0]['levelconfig']['is_level_2_id'] == 0) && ($configure1[0]['levelconfig']['is_level_3_id'] == 1)) {
                $level3propertyname = $this->Level3_property->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $language), 'order' => array('level_3_desc_en' => 'ASC')));
                $this->set('level3propertydata', $level3propertyname);
            } else if (($configure1[0]['levelconfig']['is_level_1_id'] == 0) && ($configure1[0]['levelconfig']['is_level_2_id'] == 0) && ($configure1[0]['levelconfig']['is_level_3_id'] == 0 && ($configure1[0]['levelconfig']['is_level_4_id'] == 1))) {
                $level4propertyname = $this->Level4_property->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $language), 'order' => array('level_4_desc_en' => 'ASC')));
                $this->set('level4propertydata', $level4propertyname);
            }
            $designation = $this->designation->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC')));
            $this->set('designation', $designation);
            $workshift = $this->workshift->find('list', array('fields' => array('workshift.shift_id', 'workshift.shift_desc_eng'), 'order' => array('shift_desc_eng' => 'ASC')));
            $this->set('workshift', $workshift);
            $this->set('state', $state[0]['State']['state_name_en']);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['office']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $this->request->data['office']['state_id'] = $stateid;
//                pr($this->request->data);exit;
                if ($actiontype == '1') {
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['office']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
//                    pr($this->request->data['office']);
//                    exit;
                    if ($this->office->Save($this->request->data['office'])) {
                        $this->Session->setFlash(__($actionvalue));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'office'));
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                    }
                }
                if ($actiontype == '2') {
                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->office->id = $hfid;
                        if ($this->office->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'office'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
            exit;
        }
    }

    public function feemaster() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('feemaster');
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('feemasterrecord', $this->feemaster->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['feemaster']['req_ip'] = $req_ip;
            $this->request->data['feemaster']['user_id'] = $user_id;
            // $this->request->data['feemaster']['created_date'] = $created_date;
            $this->request->data['feemaster']['state_id'] = $stateid;
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['fee_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['fee_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['feemaster']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['feemaster']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['feemaster'] = $this->istrim($this->request->data['feemaster']);
                        $errarr = $this->validatedata($this->request->data['feemaster'], $fieldlist);
                        if ($this->ValidationError($errarr)) {
                            if ($this->feemaster->save($this->request->data['feemaster'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'feemaster'));
                                $this->set('feemasterrecord', $this->feemaster->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_feemaster($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('feemaster');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'feemaster') {
                $this->feemaster->id = $id;
                if ($this->feemaster->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'feemaster'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function usagelnkitem() {
        try {
            $this->loadModel('usage_sub_sub_category');
            $this->loadModel('usagelnk');
            $this->set('name', array_keys($this->usagelnk->getColumnTypes()));
            $lang = $this->Session->read("sess_langauge");
            $this->set('actontype', NULL);
            $this->set('lang', $lang);
            $stateid = $this->Auth->User("state_id");
            $this->set('usgmain', ClassRegistry::init('usage_main_category')->find('list', array('fields' => array('usage_main_catg_id', 'usage_main_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_main_catg_desc_en' => 'ASC'))));
            $this->set('usgsub', ClassRegistry::init('usage_sub_category')->find('list', array('fields' => array('usage_sub_catg_id', 'usage_sub_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_sub_catg_desc_en' => 'ASC'))));
            $this->set('usgsubsub', ClassRegistry::init('usage_sub_sub_category')->find('list', array('fields' => array('usage_sub_sub_catg_id', 'usage_sub_sub_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_sub_sub_catg_desc_en' => 'ASC'))));
            $ucrecords = $this->usagelnk->query("select a.usage_cat_id,a.usage_cat_desc_en,a.state_id,a.usage_main_catg_id ,
            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,
                a.usage_sub_catg_id , c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                a.usage_sub_sub_catg_id , d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll
                from ngdrstab_mst_usage_category a
                left outer join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                left outer join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                left outer join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id");
            $this->set('ucatlinkage', $ucrecords);
            if ($this->request->is('POST')) {
                $this->check_csrf_token($this->request->data['usagelnkitem']['csrftoken']);
                $action = $this->request->data['action'];
                $hfid = $this->request->data['hid'];
                $frm = $this->request->data['usagelnkitem'];
                $hdnDesc = $this->request->data['hdnDesc'];
                if ($action == 'U' || $action == 'SV') {
                    $this->request->data['usagelnkitem']['req_ip'] = $this->request->clientIp();
                    $this->request->data['usagelnkitem']['user_id'] = $this->Auth->User('user_id');
                    //  $this->request->data['usagelnkitem']['created_date'] = date('Y-m-d');
                    $this->request->data['usagelnkitem']['state_id'] = $this->Auth->User('state_id');
                    $this->request->data['usagelnkitem']['usage_cat_desc_en'] = $hdnDesc;
                    $itml = ClassRegistry::init('usage_sub_sub_category')->find('all', array('fields' => array('contsruction_type_flag', 'depreciation_flag', 'road_vicinity_flag', 'user_defined_dependency1_flag', 'user_defined_dependency2_flag'), 'conditions' => array('usage_sub_sub_catg_id' => $subsub = $frm['usage_sub_sub_catg_id'])));
                    $this->request->data['usagelnkitem']['contsruction_type_flag'] = $itml[0]['usage_sub_sub_category']['contsruction_type_flag'];
                    $this->request->data['usagelnkitem']['depreciation_flag'] = $itml[0]['usage_sub_sub_category']['depreciation_flag'];
                    $this->request->data['usagelnkitem']['road_vicinity_flag'] = $itml[0]['usage_sub_sub_category']['road_vicinity_flag'];
                    $this->request->data['usagelnkitem']['user_defined_dependency1_flag'] = $itml[0]['usage_sub_sub_category']['user_defined_dependency1_flag'];
                    $this->request->data['usagelnkitem']['user_defined_dependency2_flag'] = $itml[0]['usage_sub_sub_category']['user_defined_dependency2_flag'];
                    if ($action == 'U') {
                        $this->request->data['usagelnkitem']['id'] = $hfid;
                        $savetype = "lbleditmsg";
                    } else {
                        $savetype = "lblsavemsg";
                    }
                    $main = $frm['usage_main_catg_id'];
                    $sub = $frm['usage_sub_catg_id'];
                    $subsub = $frm['usage_sub_sub_catg_id'];
                    $check = $this->usagelnk->query("select * from ngdrstab_mst_usage_category where usage_main_catg_id=? and usage_sub_catg_id= ? and usage_sub_sub_catg_id= ? ", array($main, $sub, $subsub));
                    if ($check == Null) {
                        if ($this->usagelnk->save($this->request->data['usagelnkitem'])) {
                            $this->Session->setFlash($savetype);
                            $this->redirect('usagelnkitem');
                        } else {
                            $this->Session->setFlash("There is some error");
                        }
                    } else {
                        $this->Session->setFlash("Record already exists");
                    }
                } else if ($action == 'D') {
                    if ($this->usagelnk->delete($hfid)) {
                        $this->Session->setFlash(__('lbldeletemsg'));
                        $this->redirect('usagelnkitem');
                    } else {
                        $this->Session->setFlash(__('lblnotdeletemsg'));
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function usagelnkitemlist() {
        $this->loadModel('usagelinkcategory');

        $this->set('name', array_keys($this->usagelinkcategory->getColumnTypes()));
        $lang = $this->Session->read("sess_langauge");
        $this->set('actontype', NULL);
        $this->set('addflag', NULL);
        $this->set('lang', $lang);
        $stateid = $this->Auth->User("state_id");
        $this->set('usgmain', ClassRegistry::init('usage_main_category')->find('list', array('fields' => array('usage_main_catg_id', 'usage_main_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_main_catg_desc_en' => 'ASC'))));
        $this->set('usgsub', ClassRegistry::init('usage_sub_category')->find('list', array('fields' => array('usage_sub_catg_id', 'usage_sub_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_sub_catg_desc_en' => 'ASC'))));
        $this->set('usgsubsub', ClassRegistry::init('usage_sub_sub_category')->find('list', array('fields' => array('usage_sub_sub_catg_id', 'usage_sub_sub_catg_desc_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('usage_sub_sub_catg_desc_en' => 'ASC'))));
        $this->set('constructiontype', ClassRegistry::init('constructiontype')->find('list', array('fields' => array('construction_type_id', 'construction_type_desc_' . $lang), 'order' => array('construction_type_desc_en' => 'ASC'))));
        $this->set('depreciationtype', ClassRegistry::init('depreciation')->find('list', array('fields' => array('deprication_type_id', 'deprication_type_desc_' . $lang), 'order' => array('deprication_type_desc_en' => 'ASC'))));
        $this->set('usgitem', ClassRegistry::init('itemlist')->find('list', array('fields' => array('usage_param_id', 'usage_param_desc_' . $lang), 'conditions' => array('state_id' => $stateid, 'usage_param_type_id' => 1), 'order' => array('usage_param_desc_en' => 'ASC'))));
        $this->set('roadvicinity', ClassRegistry::init('roadvicinity')->find('list', array('fields' => array('road_vicinity_id', 'road_vicinity_desc_' . $lang), 'order' => array('road_vicinity_desc_en' => 'ASC'))));
        $this->set('userdependency1', ClassRegistry::init('user_defined_dependancy1')->find('list', array('fields' => array('user_defined_dependency1_id', 'user_defined_dependency1_desc_' . $lang), 'order' => array('user_defined_dependency1_desc_en' => 'ASC'))));
        $this->set('userdependency2', ClassRegistry::init('user_defined_dependancy2')->find('list', array('fields' => array('user_defined_dependency2_id', 'user_defined_dependency2_desc_' . $lang), 'order' => array('user_defined_dependency2_desc_en' => 'ASC'))));
        $this->set('mcat', NULL);
        $this->set('scat', NULL);
        $this->set('sscat', NULL);
//        $date = date('Y/m/d H:i:s');
//        $created_date = date('Y/m/d');
//        $ip = $_SERVER['REMOTE_ADDR'];
//        $user_id = $this->Auth->User("user_id");
//
//        $this->request->data['usagelnkitemlist']['req_ip'] = $ip;
//        $this->request->data['usagelnkitemlist']['user_id'] = $user_id;
//        $this->request->data['usagelnkitemlist']['created_date'] = $created_date;

        if ($this->request->is('POST')) {
            $this->check_csrf_token($this->request->data['usagelistwithitem']['csrftoken']);
            $this->set('addflag', 'Y');

            $action = $this->request->data['action'];
            $this->set('actontype', $action);
            $hfid = $this->request->data['hid'];
            $frm = $this->request->data['usagelistwithitem'];
            $this->set('mcat', $frm['usage_main_catg_id']);
            $this->set('scat', $frm['usage_sub_catg_id']);
            $this->set('sscat', $frm['usage_sub_sub_catg_id']);

            if ($action == 'U' || $action == 'SV') { // Update or Save Label
                $this->request->data['usagelistwithitem']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $this->request->data['usagelistwithitem']['user_id'] = $this->Auth->User('user_id');
                $this->request->data['usagelistwithitem']['created_date'] = date('Y-m-d');
                $this->request->data['usagelistwithitem']['state_id'] = $this->Auth->User('state_id');

                $itml = ClassRegistry::init('itemlist')->find('all', array('fields' => array('usage_param_code', 'range_field_flag'), 'conditions' => array('usage_param_id' => $frm['usage_param_id'])));
                $this->request->data['usagelistwithitem']['range_field_flag'] = $itml[0]['itemlist']['range_field_flag'];
                $this->request->data['usagelistwithitem']['uasge_param_code'] = $itml[0]['itemlist']['usage_param_code'];
                if ($action == 'U') {
                    $this->request->data['usagelistwithitem']['usage_lnk_id'] = $hfid;
                    $savetype = "lbleditmsg";
                } else {
                    $savetype = "lblsavemsg";
                }

                $count = $this->usagelinkcategory->find('count', array('conditions' => array('usage_main_catg_id' => $frm['usage_main_catg_id'], 'usage_sub_catg_id' => $frm['usage_sub_catg_id'], 'usage_sub_sub_catg_id' => $frm['usage_sub_sub_catg_id'], 'usage_param_id' => $frm['usage_param_id'])));
                $ruleid = $this->usagelinkcategory->find('first', array('fields' => array('evalrule_id'), 'conditions' => array('usage_main_catg_id' => $frm['usage_main_catg_id'], 'usage_sub_catg_id' => $frm['usage_sub_catg_id'], 'usage_sub_sub_catg_id' => $frm['usage_sub_sub_catg_id'], 'not' => array('evalrule_id' => null))));
                if ($ruleid) {
                    $this->request->data['usagelistwithitem']['evalrule_id'] = $ruleid['usagelinkcategory']['evalrule_id'];
                }
                if ($count > 0) {
                    $this->Session->setFlash("Input Item Already Exists... ");
                } else {

                    if ($this->usagelinkcategory->save($this->request->data['usagelistwithitem'])) {
                        $this->Session->setFlash($savetype);
//                        $this->redirect('usagelnkitemlist');
                    } else {
                        $this->Session->setFlash("There is some error");
                    }
                }
            } else if ($action == 'D') {
//                pr($this->request->data);exit;
                if ($this->usagelinkcategory->delete($hfid)) {
                    $this->Session->setFlash(__('lbldeletemsg'));
//                    $this->redirect('usagelnkitemlist');
                } else {
                    $this->Session->setFlash(__('lblnotdeletemsg'));
                }
            }
        }
        $this->set_csrf_token();
    }

    public function getusagevisibility() {
        try {


            if (isset($_GET['sub_sub_id'])) {
                $sub_sub_id = $_GET['sub_sub_id'];
                $flag = ClassRegistry::init('usage_sub_sub_category')->find('all', array('fields' => array('contsruction_type_flag', 'depreciation_flag', 'road_vicinity_flag', 'user_defined_dependency1_flag', 'user_defined_dependency2_flag'), 'conditions' => array('usage_sub_sub_catg_id' => $sub_sub_id)));

                $cflag = $flag[0]['usage_sub_sub_category']['contsruction_type_flag'];
                $dflag = $flag[0]['usage_sub_sub_category']['depreciation_flag'];
                $rflag = $flag[0]['usage_sub_sub_category']['road_vicinity_flag'];
                $ud1flag = $flag[0]['usage_sub_sub_category']['user_defined_dependency1_flag'];
                $ud2flag = $flag[0]['usage_sub_sub_category']['user_defined_dependency2_flag'];

                $variable = array(
                    'data1' => $cflag,
                    'data2' => $dflag,
                    'data3' => $rflag,
                    'data4' => $ud1flag,
                    'data5' => $ud2flag
                );

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function roadvicinity() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('roadvicinity');

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('roadvicinityrecord', $this->roadvicinity->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['roadvicinity']['req_ip'] = $req_ip;
            $this->request->data['roadvicinity']['user_id'] = $user_id;
            // $this->request->data['roadvicinity']['created_date'] = $created_date;
            $this->request->data['roadvicinity']['state_id'] = $stateid;
            //adding field list dynamically from language list
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['road_vicinity_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['road_vicinity_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['roadvicinity']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['roadvicinity']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['roadvicinity'] = $this->istrim($this->request->data['roadvicinity']);
                        $errarr = $this->validatedata($this->request->data['roadvicinity'], $fieldlist);
                        if ($this->validationError($errarr)) {
                            if ($this->roadvicinity->save($this->request->data['roadvicinity'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'roadvicinity'));
                                $this->set('roadvicinityrecord', $this->roadvicinity->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }

                            if ($actiontype == 2) {
                                $this->set('hfupdateflag', 'Y');
                            }
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_roadvicinity($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('roadvicinity');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'roadvicinity') {
                $this->roadvicinity->id = $id;
                if ($this->roadvicinity->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'roadvicinity'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function user_defined_dependancy1() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('user_defined_dependancy1');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
//            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
//            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('user_defined_dependancy1record', $this->user_defined_dependancy1->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['user_defined_dependancy1']['req_ip'] = $req_ip;
            $this->request->data['user_defined_dependancy1']['user_id'] = $user_id;
            //$this->request->data['user_defined_dependancy1']['created_date'] = $created_date;
            $this->request->data['user_defined_dependancy1']['state_id'] = $stateid;

            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['user_defined_dependency1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha_req';
                } else {
                    //list for all unicode fields
                    $fieldlist['user_defined_dependency1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['user_defined_dependancy1']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['user_defined_dependancy1']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        //server side validation is perform here through appcontroller single function.
                        //call to server side function 
                        //passing as parameters to it is data collected and the fieldlist
                        $errarr = $this->validatedata($this->request->data['user_defined_dependancy1'], $fieldlist);
                        $flag = 0;
                        //check the array is empty or not
                        //is the error present or not if error present it will inccrease the flag by 1 else it will save data if error array is 0.
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        //if the error array consist of any of errors then process set  else save data
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->user_defined_dependancy1->save($this->request->data['user_defined_dependancy1'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'user_defined_dependancy1'));
                                $this->set('user_defined_dependancy1record', $this->user_defined_dependancy1->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function delete_user_defined_dependancy1($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('user_defined_dependancy1');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'user_defined_dependancy1') {
                $this->user_defined_dependancy1->id = $id;
                if ($this->user_defined_dependancy1->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'user_defined_dependancy1'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function user_defined_dependancy2() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('user_defined_dependancy2');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
//            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
//            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('user_defined_dependancy2record', $this->user_defined_dependancy2->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['user_defined_dependancy2']['req_ip'] = $req_ip;
            $this->request->data['user_defined_dependancy2']['user_id'] = $user_id;
            //$this->request->data['user_defined_dependancy2']['created_date'] = $created_date;
            $this->request->data['user_defined_dependancy2']['state_id'] = $stateid;

            //adding field list dynamically from language list
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['user_defined_dependency2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_alpha_req';
                } else {
                    //list for all unicode fields
                    $fieldlist['user_defined_dependency2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['user_defined_dependancy2']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['user_defined_dependancy2']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        //server side validation is perform here through appcontroller single function.
                        //call to server side function 
                        //passing as parameters to it is data collected and the fieldlist
                        $errarr = $this->validatedata($this->request->data['user_defined_dependancy2'], $fieldlist);
                        $flag = 0;
                        //check the array is empty or not
                        //is the error present or not if error present it will inccrease the flag by 1 else it will save data if error array is 0.
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        //if the error array consist of any of errors then process set  else save data
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->user_defined_dependancy2->save($this->request->data['user_defined_dependancy2'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'user_defined_dependancy2'));
                                $this->set('user_defined_dependancy2record', $this->user_defined_dependancy2->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            
        }
    }

    public function delete_user_defined_dependancy2($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('user_defined_dependancy2');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'user_defined_dependancy2') {
                $this->user_defined_dependancy2->id = $id;
                if ($this->user_defined_dependancy2->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'user_defined_dependancy2'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function getlevel1_list1() {
        try {

            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Levels_1_property');
            $this->loadModel('Level1');
            $this->loadModel('levelconfig');

            if (isset($_GET['level1_list'])) {
                $level1_listid = $_GET['level1_list'];
                $stateid = $this->Auth->User("state_id");
                $configure = $this->levelconfig->find('all', array('Conditions', 'state_id' => $stateid));

                if ($configure[0]['levelconfig']['is_level_2_id'] == 1) {

                    $level1_list = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));

                    $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1_list)));
                    $drop2 = $this->Levels_1_property->find('list', array(
                        'fields' => array('Levels_1_property.level_1_id', 'grp.level_2_desc_' . $lang),
                        'joins' => array(array('table' => 'ngdrstab_mst_location_levels_2_property',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('Levels_1_property.level_1_id = grp.id', 'Levels_1_property.level_1_id' => $level1_listid)
                            ))
                            )
                    );
                } else if ($configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 1) {
                    $level1_list = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                    $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1_list)));
                    $drop2 = $this->Levels_1_property->find('list', array(
                        'fields' => array('Levels_1_property.level_1_id', 'grp.level_3_desc_' . $lang),
                        'joins' => array(array('table' => 'ngdrstab_mst_location_levels_3_property',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('Levels_1_property.level_1_id = grp.id', 'Levels_1_property.level_1_id' => $level1_listid)
                            ))
                            )
                    );
                } else if ($configure[0]['levelconfig']['is_level_2_id'] == 0 && $configure[0]['levelconfig']['is_level_3_id'] == 0 && $configure[0]['levelconfig']['is_level_4_id'] == 1) {

                    $level1_list = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id'), 'conditions' => array('level_1_id' => $level1_listid)));
                    $drop1 = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1_list)));
                    $drop2 = $this->Levels_1_property->find('list', array(
                        'fields' => array('Levels_1_property.level_1_id', 'grp.level_4_desc_' . $lang),
                        'joins' => array(array('table' => 'ngdrstab_mst_location_levels_4_property',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('Levels_1_property.level_1_id = grp.id', 'Levels_1_property.level_1_id' => $level1_listid)
                            ))
                            )
                    );
                }

//pr($level2_name);

                $variable = array('data1' => $drop1,
                    'data2' => $drop2);

                echo json_encode($variable);

                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel2_list1() {
//        echo'ho';exit;
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Level2_property');
            $this->loadModel('Level2');
            $this->loadModel('levelconfig');
            $stateid = $this->Auth->User("state_id");
            $configure = $this->levelconfig->find('all', array('Conditions', 'state_id' => $stateid));
            if (isset($_GET['level2_list'])) {
                $level2_listid = $_GET['level2_list'];
                if ($configure[0]['levelconfig']['is_level_3_id'] == 1) {
                    $level2_list = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id'), 'conditions' => array('level_2_id' => $level2_listid)));

                    $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $lang), 'conditions' => array('level_2_id' => $level2_list)));

                    $drop2 = $this->Level2_property->find('list', array(
                        'fields' => array('Level2_property.level_2_id', 'grp.level_3_desc_' . $lang),
                        'joins' => array(array('table' => 'ngdrstab_mst_location_levels_3_property',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('Level2_property.level_2_id = grp.id', 'Level2_property.level_2_id' => $level2_listid)
                            ))
                            )
                    );
                } else {
                    $level2_list = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id'), 'conditions' => array('level_2_id' => $level2_listid)));
                    $drop1 = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $lang), 'conditions' => array('level_2_id' => $level2_list)));
                    $drop2 = $this->Level2_property->find('list', array(
                        'fields' => array('Level2_property.level_2_id', 'grp.level_4_desc_' . $lang),
                        'joins' => array(array('table' => 'ngdrstab_mst_location_levels_4_property',
                                'alias' => 'grp',
                                'type' => 'INNER',
                                'conditions' => array('Level2_property.level_2_id = grp.id', 'Level2_property.level_2_id' => $level2_listid)
                            ))
                            )
                    );
                }
                $variable = array('data1' => $drop1,
                    'data2' => $drop2);
                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel3_list1() {
        try {
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            //echo('hi');
            $this->loadModel('Level3_property');
            $this->loadModel('Level3');

            if (isset($_GET['level3_list'])) {
                $level3_listid = $_GET['level3_list'];
                $level3_list = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id'), 'conditions' => array('level_3_id' => $level3_listid)));
//                pr($level3_list);
                $drop1 = ClassRegistry::init('Level3')->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_' . $lang), 'conditions' => array('level_3_id' => $level3_list)));
                $drop2 = $this->Level3_property->find('list', array(
                    'fields' => array('Level3_property.level_3_id', 'grp.level_4_desc_' . $lang),
                    'joins' => array(array('table' => 'ngdrstab_mst_location_levels_4_property',
                            'alias' => 'grp',
                            'type' => 'INNER',
                            'conditions' => array('Level3_property.level_3_id = grp.id', 'Level3_property.level_3_id' => $level3_listid)
                        ))
                        )
                );
                //  pr($level2_dep);exit;
                $variable = array('data1' => $drop1,
                    'data2' => $drop2);

                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getlevel4_list1() {
        try {
            //echo('hi');
            $lang = 'en';
            if ($this->Session->read("sess_langauge") != 'en') {
                $lang = 'll';
            }
            $this->loadModel('Level4_property');
            $this->loadModel('Level4');

//            $this->loadModel('damblkdpnd');
            if (isset($_GET['level4_list'])) {
                $level4_listid = $_GET['level4_list'];
//                 pr($level4_listid);
                $level4_list = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id'), 'conditions' => array('level_4_id' => $level4_listid)));
//                pr($level4_list);
                $level4list_name = ClassRegistry::init('Level4')->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_' . $lang), 'conditions' => array('level_4_id' => $level4_list)));
//                pr($level4list_name);
//                exit;
                echo json_encode($level4list_name);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function behaviour() {
        try {
            $this->check_role_escalation();
            $this->loadModel('behaviour');
            $this->loadModel('state');
            $this->loadModel('mfform');
            $this->loadModel('User');
            $this->set('behaviourrecord', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfid', NULL);


            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['behaviour']['req_ip'] = $req_ip;
            $this->request->data['behaviour']['user_id'] = $user_id;
            // $this->request->data['behaviour']['created_date'] = $created_date;

            $formname = $this->mfform->find('list', array('fields' => array('mfform.mf_id', 'mfform.form_name'), 'conditions' => array('state_id' => $stateid), 'order' => array('form_name' => 'ASC')));
            $this->set('mfdata', $formname);
            $this->set('behaviourrecord', $this->behaviour->find('all', array('conditions' => array('state_id' => $stateid))));

            if ($this->request->is('post')) {

                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                //pr($hfid);exit;
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {
//                       
                        if ($this->request->data['hfupdateflag'] == 'Y') {

                            $this->request->data['behaviour']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                      pr($this->request->data['propertylist']);exit;
                        if ($this->behaviour->save($this->request->data['behaviour'])) {
//                              pr($this->request->data['propertylist']);exit;
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'behaviour'));
                            $this->set('behaviourrecord', $this->behaviour->find('all', array('conditions' => array('state_id' => $stateid))));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
                if ($actiontype == '4') {

                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {

                        $this->behaviour->id = $hfid;

                        if ($this->behaviour->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'behaviour'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function getalllevel() {
        try {

            $stateid = $this->Auth->User("state_id");
            if (isset($_GET['village_id'])) {
                $villageid = $_GET['village_id'];
                $language = $this->Session->read("sess_langauge");
                $this->set('language', $language);

                $level1 = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('level_1_desc_en' => 'ASC')));

                $level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('list_1_desc_en' => 'ASC')));

                $level2 = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('level_2_desc_en' => 'ASC')));

                $level2list = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('list_2_desc_en' => 'ASC')));

                $level3 = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('level_3_desc_en' => 'ASC')));

                $level3list = ClassRegistry::init('Level3')->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('list_3_desc_en' => 'ASC')));

                $level4 = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('level_4_desc_en' => 'ASC')));

                $level4list = ClassRegistry::init('Level4')->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_' . $language), 'conditions' => array('village_id' => $villageid), 'order' => array('list_4_desc_en' => 'ASC')));
//              
                $variable = array('data' => $level1,
                    'data1' => $level1list,
                    'data2' => $level2,
                    'data3' => $level2list,
                    'data4' => $level3,
                    'data5' => $level3list,
                    'data6' => $level4,
                    'data7' => $level4list,
                );

                echo json_encode($variable);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $ex) {
            
        }
    }

    public function minorfunction() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'minorfunction', 'mainlanguage', 'majorfunction'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
//            $this->set('minorfunction', $this->minorfunction->find('all'));
            $formname = $this->majorfunction->find('list', array('fields' => array('majorfunction.major_id', 'majorfunction.function_desc_en'), 'order' => array('function_desc_en' => 'ASC'), 'conditions' => array('state_id' => $stateid)));
            $this->set('mfdata', $formname);
            $minorfunction = $this->minorfunction->query("select distinct minor.id,minor.major_id,minor.function_desc_ll,major.function_desc_en as majordesc,minor.function_desc_en from ngdrstab_mst_minorfunctions minor
                                        join ngdrstab_mst_majorfunctions major on  major.mf_serial=minor.mf_serial");
//            pr($minorfunction);exit;
            $this->set('minorfunction', $minorfunction);
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();
            $fieldlist['major_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['minorfunction']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['minorfunction']['req_ip'] = $this->request->clientIp();
                    $this->request->data['minorfunitunction']['user_id'] = $user_id;
                    $this->request->data['minorfunction']['created_date'] = $created_date;

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['minorfunction']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {

                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['minorfunction'] = $this->istrim($this->request->data['minorfunction']);
                    $errarr = $this->validatedata($this->request->data['minorfunction'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {

                        if ($this->minorfunction->save($this->request->data['minorfunction'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'minorfunction'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'minorfunction'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
            exit;
        }
    }

    public function majorfunction() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'majorfunction', 'mainlanguage'));
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('majorrecord', $this->majorfunction->find('all'));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();

            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['function_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['majorfunction']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['majorfunction']['req_ip'] = $this->request->clientIp();
                    $this->request->data['majorfunction']['user_id'] = $user_id;
                    $this->request->data['majorfunction']['created_date'] = $created_date;
                    $this->request->data['majorfunction']['state_id'] = $stateid;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['majorfunction']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {

                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['majorfunction'] = $this->istrim($this->request->data['majorfunction']);
                    $errarr = $this->validatedata($this->request->data['majorfunction'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        if ($this->majorfunction->save($this->request->data['majorfunction'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'majorfunction'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'majorfunction'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
            exit;
        }
    }

    public function delete_majorfunction($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('majorfunction');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->majorfunction()->id = $id;
                if ($this->majorfunction->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'majorfunction'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function submenu() {
        try {
            $this->check_role_escalation();
            $this->loadModel('SubMenu');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['submenu']['req_ip'] = $req_ip;
            $this->request->data['submenu']['user_id'] = $user_id;
            // $this->request->data['submenu']['created'] = $created_date;

            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('controllerdata', ClassRegistry::init('controllermodel')->find('list', array('fields' => array('controller_desc_' . $laug, 'controller_desc_' . $laug), 'order' => array('controller_desc_en' => 'ASC'))));
            $this->set('actiondata', ClassRegistry::init('action')->find('list', array('fields' => array('action_desc_' . $laug, 'action_desc_' . $laug), 'order' => array('action_desc_en' => 'ASC'))));
            $this->set('menudata', ClassRegistry::init('Menu')->find('list', array('fields' => array('id', 'name_' . $laug), 'order' => array('name_en' => 'ASC'))));
            $this->set('submenurecord', $this->SubMenu->find('all'));


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['submenu']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
//                $this->Menu->user_id = $user_id;
                $this->request->data['submenu']['user_id'] = $user_id;

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['submenu']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                         pr($this->request->data['submenu']);exit;
                        if ($this->SubMenu->save($this->request->data['submenu'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'submenu'));
                            $this->set('submenurecord', $this->SubMenu->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->SubMenu->id = $hfid;

                        if ($this->SubMenu->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'submenu'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('submenurecord', $this->SubMenu->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function mastermenu() {
        try {
            $this->check_role_escalation();
            $this->loadModel('Menu');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['Menu']['req_ip'] = $req_ip;
            $this->request->data['Menu']['user_id'] = $user_id;
            // $this->request->data['Menu']['created'] = $created_date;

            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
//             $check=ClassRegistry::init('controllermodel')->find('list', array('fields' => array('controller_desc_' . $laug,'controller_desc_' . $laug)));
//             pr($check);exit;
            $this->set('controllerdata', ClassRegistry::init('controllermodel')->find('list', array('fields' => array('controller_desc_' . $laug, 'controller_desc_' . $laug), 'order' => array('controller_desc_en' => 'ASC'))));
            $this->set('actiondata', ClassRegistry::init('action')->find('list', array('fields' => array('action_desc_' . $laug, 'action_desc_' . $laug), 'order' => array('action_desc_en' => 'ASC'))));
            $this->set('menurecord', $this->Menu->find('all'));


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Menu']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
//                $this->Menu->user_id = $user_id;
                $this->request->data['Menu']['user_id'] = $user_id;

                if ($actiontype == '1') {

                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Menu']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        //pr($this->request->data['Menu']);exit;
                        if ($this->Menu->save($this->request->data['Menu'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'mastermenu'));
                            $this->set('menurecord', $this->Menu->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '3') {
                    //echo('hii');
                    $this->set('actiontypeval', $actiontype);

                    if ($hfid != NULL) {
                        $this->Menu->id = $hfid;

                        if ($this->Menu->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'mastermenu'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('menurecord', $this->Menu->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    public function menuuserpermission() {
        try {
            $this->check_role_escalation();
            $this->loadModel('userpermissions');
            $this->loadModel('role');
            $this->loadModel('Menu');
            $this->loadModel('SubMenu');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");

            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $this->request->data['menuuserpermission']['req_ip'] = $req_ip;
            $this->request->data['menuuserpermission']['user_id'] = $user_id;
            //  $this->request->data['menuuserpermission']['created'] = $created_date;
            $lang = $this->Session->read("sess_langauge");
            $role = $this->role->find('list', array('fields' => array('role.role_id', 'role.role_name_' . $lang), 'order' => array('role.role_name_' . $lang => 'ASC')));
            $this->set('roledata', $role);
            $menu = $this->Menu->find('list', array('fields' => array('Menu.id', 'Menu.name_en'), 'order' => array('name_en' => 'ASC')));
            $this->set('menudata', $menu);
            $submenu = $this->SubMenu->find('list', array('fields' => array('SubMenu.id', 'SubMenu.name_en'), 'order' => array('name_en' => 'ASC')));
            $this->set('submenudata', $submenu);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['menuuserpermission']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['menuuserpermission']['user_id'] = $user_id;

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        @$this->request->data['menuuserpermission']['subsubmenu_id'] = 99;

//                        pr($this->request->data['menuuserpermission']);exit;
                        if ($this->userpermissions->save($this->request->data['menuuserpermission'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'menuuserpermission'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
                if ($actiontype == '3') {

                    $this->set('actiontypeval', $actiontype);
                    if ($hfid != NULL) {
                        $this->unit->id = $hfid;
                        if ($this->unit->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'unit'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                    $this->set('unitrecord', $this->unit->find('all'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    //dependancy for usage sub category for usage link category form
    public function getusagesub1() {
        try {
            if (isset($_GET['main_id'])) {
                $main_id = $_GET['main_id'];
                $subid = ClassRegistry::init('usage_category')->find('list', array('fields' => array('usage_sub_catg_id'), 'conditions' => array('usage_main_catg_id' => array($main_id))));
                $usagesubname = ClassRegistry::init('Usagesub')->find('list', array('fields' => array('Usagesub.usage_sub_catg_id', 'Usagesub.usage_sub_catg_desc_en'), 'conditions' => array('usage_sub_catg_id' => $subid)));
                echo json_encode($usagesubname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //dependancy for usage sub sub category for usage link category form
    public function getusagesubsub1() {
        try {
            if (isset($_GET['sub_id'])) {
                $sub_id = $_GET['sub_id'];
                $subsubid = ClassRegistry::init('usage_category')->find('list', array('fields' => array('usage_sub_sub_catg_id'), 'conditions' => array('usage_sub_catg_id' => array($sub_id))));
                $usagesubsubname = ClassRegistry::init('Usagesubsub')->find('list', array('fields' => array('Usagesubsub.usage_sub_sub_catg_id', 'Usagesubsub.usage_sub_sub_catg_desc_en'), 'conditions' => array('usage_sub_sub_catg_id' => $subsubid)));
                echo json_encode($usagesubsubname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    ////---------------------------------------form shifted to new controller ---------------------------------------------------
    public function usagecategory() {
        try {
            $this->loadModel('Usagemainmain');
            $this->loadModel('subsubcategory');
            $this->loadModel('Usagesub');
            $this->loadModel('usage_category');
            $this->loadModel('State');
            $this->loadModel('usagelinkcategory');
            $this->loadModel('mainlanguage');
            $this->set('usagemainrecord', NULL);
            $this->set('Usagesubrecord', NULL);
            $this->set('selectsubsubcategory', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfsubid', NULL);
            $this->set('hfsubsubid', NULL);
            $this->set('hfcode', NULL);
            $this->set('hfsubcode', NULL);
            $this->set('hfsubsubcode', NULL);
            $this->set('hfupdateflag', 'S');
            $this->set('hfselectflag', NULL);
            $this->set('hfitemid', NULL);
            $this->set('laug', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('usagemainrecord', $this->Usagemainmain->find('all'));
            $this->set('usgitem', ClassRegistry::init('itemlist')->find('list', array('fields' => array('usage_param_id', 'usage_param_desc_' . $laug), 'conditions' => array('state_id' => $stateid, 'usage_param_type_id' => 1), 'order' => array('usage_param_desc_en' => 'ASC'))));
            if ($laug == 'en') {
                $this->set('state', $state[0]['State']['state_name_en']);
            } else {
                $this->set('state', $state[0]['State']['state_name_ll']);
            }
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['usagecategory']['csrftoken']);
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfactionval', $_POST['hfaction']);
                $this->set('hfcode', $_POST['hfcode']);
                $this->set('hfsubcode', $_POST['hfsubcode']);
                $this->set('hfsubsubcode', $_POST['hfsubsubcode']);
                $this->set('hfupdateflag', $_POST['hfupdateflag']);
                $this->set('hfid', $_POST['hfid']);
                $this->set('hfsubid', $_POST['hfsubid']);
                $this->set('hfsubsubid', $_POST['hfsubsubid']);
                $this->set('hfitemid', $_POST['hfitemid']);
                $hfitemid = $_POST['hfitemid'];
                $stateid = $this->Auth->User("state_id");
//queries parametrised by kalyani on 3dec
                if ($_POST['actiontype'] == '1') {
                    $gridsub = $this->usage_category->query("SELECT distinct a.usage_sub_catg_id,a.usage_main_catg_id,c.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,c.dolr_usage_code
                           from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            where a.usage_main_catg_id=?", array($_POST['hfcode']));
                    $this->set('Usagesubrecord', $gridsub);
                }
                //add subusege
                if ($_POST['actiontype'] == '2') {
                    $gridsub = $this->usage_category->query("SELECT distinct a.usage_sub_catg_id,a.usage_main_catg_id,c.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,c.dolr_usage_code
                           from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            where a.usage_main_catg_id=?", array($_POST['hfcode']));
                    $this->set('Usagesubrecord', $gridsub);
                    $gridsubsub = $this->usage_category->query("SELECT distinct a.usage_sub_sub_catg_id,a.usage_main_catg_id,a.usage_sub_catg_id,d.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll,d.contsruction_type_flag,
                            d.depreciation_flag,d.road_vicinity_flag,d.user_defined_dependency1_flag,d.user_defined_dependency2_flag,d.dolr_usage_code
                            from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            inner join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                            where a.usage_main_catg_id=? and a.usage_sub_catg_id=? ", array($_POST['hfcode'], $_POST['hfsubcode']));
                    $this->set('subsubcategoryrecord', $gridsubsub);
                }
                if ($_POST['actiontype'] == '3') {
                    $gridsub = $this->usage_category->query("SELECT distinct a.usage_sub_catg_id,a.usage_main_catg_id,c.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,c.dolr_usage_code
                           from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            where a.usage_main_catg_id=?", array($_POST['hfcode']));
                    $this->set('Usagesubrecord', $gridsub);
                    $gridsubsub = $this->usage_category->query("SELECT distinct a.usage_sub_sub_catg_id,a.usage_main_catg_id,a.usage_sub_catg_id,d.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll,d.contsruction_type_flag,
                            d.depreciation_flag,d.road_vicinity_flag,d.user_defined_dependency1_flag,d.user_defined_dependency2_flag,d.dolr_usage_code
                            from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            inner join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                            where a.usage_main_catg_id=? and a.usage_sub_catg_id=?", array($_POST['hfcode'], $_POST['hfsubcode']));
                    $this->set('subsubcategoryrecord', $gridsubsub);
                    $griditem = $this->usage_category->query("SELECT distinct a.id,a.usage_param_id,a.usage_sub_sub_catg_id,a.usage_main_catg_id,a.usage_sub_catg_id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll,e.usage_param_desc_en,e.usage_param_desc_ll
                            from ngdrstab_mst_usage_lnk_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            inner join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                            inner join ngdrstab_mst_usage_items_list e on e.usage_param_id = a.usage_param_id
                            where a.usage_main_catg_id=? and a.usage_sub_catg_id=? and a.usage_sub_sub_catg_id=?", array($_POST['hfcode'], $_POST['hfsubcode'], $_POST['hfsubsubcode']));
                    $this->set('griditem', $griditem);
                }
                if ($_POST['actiontype'] == '4') {
                    $gridsub = $this->usage_category->query("SELECT distinct a.usage_sub_catg_id,a.usage_main_catg_id,c.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,c.dolr_usage_code
                           from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            where a.usage_main_catg_id=?", array($_POST['hfcode']));
                    $this->set('Usagesubrecord', $gridsub);
                    $gridsubsub = $this->usage_category->query("SELECT distinct a.usage_sub_sub_catg_id,a.usage_main_catg_id,a.usage_sub_catg_id,d.id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll,d.contsruction_type_flag,
                            d.depreciation_flag,d.road_vicinity_flag,d.user_defined_dependency1_flag,d.user_defined_dependency2_flag,d.dolr_usage_code
                            from ngdrstab_mst_usage_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            inner join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                            where a.usage_main_catg_id=? and a.usage_sub_catg_id=?", array($_POST['hfcode'], $_POST['hfsubcode']));
                    $this->set('subsubcategoryrecord', $gridsubsub);
                    $griditem = $this->usage_category->query("SELECT distinct a.id,a.usage_param_id,a.usage_sub_sub_catg_id,a.usage_main_catg_id,a.usage_sub_catg_id,c.dolr_usage_code,c.usage_sub_catg_desc_en,c.usage_sub_catg_desc_ll,
                            b.usage_main_catg_desc_en,b.usage_main_catg_desc_ll,d.usage_sub_sub_catg_desc_en,d.usage_sub_sub_catg_desc_ll,e.usage_param_desc_en,e.usage_param_desc_ll
                            from ngdrstab_mst_usage_lnk_category a 
                            inner join ngdrstab_mst_usage_main_category b on b.usage_main_catg_id = a.usage_main_catg_id
                            inner join ngdrstab_mst_usage_sub_category c on c.usage_sub_catg_id = a.usage_sub_catg_id
                            inner join ngdrstab_mst_usage_sub_sub_category d on d.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                            inner join ngdrstab_mst_usage_items_list e on e.usage_param_id = a.usage_param_id
                            where a.usage_main_catg_id=? and a.usage_sub_catg_id=? and a.usage_sub_sub_catg_id=?", array($_POST['hfcode'], $_POST['hfsubcode'], $_POST['hfsubsubcode']));
                    $this->set('griditem', $griditem);
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            pr($exc);
        }
    }

    ////---------------------------------------form shifted to new controller ---------------------------------------------------
    public function saveusagemaincategory() {
        $this->loadModel('usage_main_category');
        if (isset($_GET['usage_main_catg_desc_en'])) {
            $catmain = strtoupper($_GET['usage_main_catg_desc_en']);
            $checkname = $this->usage_main_category->Find('all', array('conditions' => array('upper(usage_main_catg_desc_en) like ' => $catmain)));
//queries parametrised by kalyani on 3dec
            if ($checkname != NULL && $_GET['actiontype'] == 'S') {
                echo json_encode('Record Already Exist');
                exit;
            } else {
                $data = array('usage_main_catg_desc_en' => $_GET['usage_main_catg_desc_en'],
                    'usage_main_catg_desc_ll' => $_GET['usage_main_catg_desc_ll'],
                    'dolr_usgaecode' => $_GET['dolr_usgaecode'],
                    'state_id' => $this->Auth->user('state_id'));
                if ($_GET['actiontype'] == 'S') {
                    if ($this->usage_main_category->save($data)) {
                        $lastinsertid = $this->usage_main_category->getLastInsertId();
                        $record = $this->usage_main_category->Find('all', array('conditions' => array('id' => $lastinsertid)));
                        $savequery = $this->usage_main_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,state_id) values(?,?)", array($record[0]['usage_main_category']['usage_main_catg_id'], $this->Auth->user('state_id')));
//                        $this->usage_main_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,state_id) values(?,?)",array($record[0]['usage_main_category']['usage_main_catg_id'] , $this->Auth->user('state_id')));
                        $resultarray = array('usage_main_catg_id' => $record[0]['usage_main_category']['usage_main_catg_id'],
                            'id' => $lastinsertid);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnotsavemsg');
                        exit;
                    }
                } else {
                    $this->usage_main_category->id = $_GET['id'];
                    if ($this->usage_main_category->save($data)) {
                        $record = $this->usage_main_category->Find('all', array('conditions' => array('id' => $_GET['id'])));
                        $resultarray = array('usage_main_catg_id' => $record[0]['usage_main_category']['usage_main_catg_id'],
                            'id' => $_GET['id']);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnoteditmsg');
                        exit;
                    }
                }
            }
        }
    }

    ////---------------------------------------form shifted to new controller ---------------------------------------------------
    public function saveusagesubcategory() {
        $this->loadModel('usage_sub_category');
        $this->loadModel('usage_category');

        //queries parametrised by kalyani on 3dec
        if (isset($_GET['usage_sub_catg_desc_en'])) {
            $catsub = strtoupper($_GET['usage_sub_catg_desc_en']);
            $checkname = $this->usage_sub_category->Find('all', array('conditions' => array('upper(usage_sub_catg_desc_en) like ' => $catsub)));

            if ($checkname != NULL && $_GET['actiontype'] == 'S') {
                $subid = $checkname[0]['usage_sub_category']['usage_sub_catg_id'];
                $id = $checkname[0]['usage_sub_category']['id'];
                $checkrec = $this->usage_category->query("select * from ngdrstab_mst_usage_category where usage_main_catg_id=? and usage_sub_catg_id=?", array($_GET['main_id'], $subid));
                if ($checkrec != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $check = $this->usage_category->Find('all', array('conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => 0, 'usage_sub_sub_catg_id' => 0)));
                    if ($check == NULL) {
                        $savequery = $this->usage_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,usage_sub_catg_id,state_id) values(?,?,?)", array($_GET['main_id'], $subid, $this->Auth->user('state_id')));
//                     $this->usage_main_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,state_id) values(?,?)",array($record[0]['usage_main_category']['usage_main_catg_id'] , $this->Auth->user('state_id')));
                    } else {
                        $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET usage_sub_catg_id = ? and usage_sub_catg_id = ? and usage_sub_sub_catg_id = ?", array($subid, 0, 0));
                    }
                    $resultarray = array('usage_sub_catg_id' => $subid,
                        'id' => $id);
                    echo json_encode($resultarray);
                    exit;
                }
            } else {
                $data = array('usage_sub_catg_desc_en' => $catsub,
                    'usage_sub_catg_desc_ll' => $_GET['usage_sub_catg_desc_ll'],
                    'dolr_usage_code' => $_GET['dolr_usage_code'],
                    'state_id' => $this->Auth->user('state_id'));
                if ($_GET['actiontype'] == 'S') {
                    if ($this->usage_sub_category->save($data)) {
                        $lastinsertid = $this->usage_sub_category->getLastInsertId();
                        $record = $this->usage_sub_category->Find('all', array('conditions' => array('id' => $lastinsertid)));
//                        pr($record);
                        $check = $this->usage_category->Find('all', array('conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => 0, 'usage_sub_sub_catg_id' => 0)));
                        if ($check == NULL) {
                            $savequery = $this->usage_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,usage_sub_catg_id,state_id) values(?,?,?)", array($_GET['main_id'], $record[0]['usage_sub_category']['usage_sub_catg_id'], $this->Auth->user('state_id')));
                        } else {
                            $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET usage_sub_catg_id = ? WHERE usage_main_catg_id=? and usage_sub_catg_id =? and usage_sub_sub_catg_id = ?", array($record[0]['usage_sub_category']['usage_sub_catg_id'], $_GET['main_id'], 0, 0));
                        }
                        $resultarray = array('usage_sub_catg_id' => $record[0]['usage_sub_category']['usage_sub_catg_id'],
                            'id' => $lastinsertid);
                        echo json_encode($resultarray);

                        exit;
                    } else {
                        echo json_encode('lblnotsavemsg');
                        exit;
                    }
                } else {
                    $this->usage_sub_category->id = $_GET['id'];
                    if ($this->usage_sub_category->save($data)) {
                        $record = $this->usage_sub_category->Find('all', array('conditions' => array('id' => $_GET['id'])));
                        $resultarray = array('usage_sub_catg_id' => $record[0]['usage_sub_category']['usage_sub_catg_id'],
                            'id' => $_GET['id']);
                        echo json_encode($resultarray);

                        exit;
                    } else {
                        echo json_encode('lblnoteditmsg');
                        exit;
                    }
                }
            }
        }
    }

    public function saveusagesubsubcategory() {
        $this->loadModel('Usagesubsub');
        $this->loadModel('usage_category');
        if (isset($_GET['usage_sub_sub_catg_desc_en'])) {
            $catsubsub = strtoupper($_GET['usage_sub_sub_catg_desc_en']);
            $checkname = $this->Usagesubsub->Find('all', array('conditions' => array('upper(usage_sub_sub_catg_desc_en) like ' => $catsubsub)));
            if ($checkname != NULL && $_GET['actiontype'] == 'S') {
                //queries parametrised by kalyani on 3dec
                $subsubid = $checkname[0]['Usagesubsub']['usage_sub_sub_catg_id'];
                $id = $checkname[0]['Usagesubsub']['id'];
                $checkrec = $this->usage_category->query("select * from ngdrstab_mst_usage_category where usage_main_catg_id=? and usage_sub_catg_id=? and usage_sub_sub_catg_id =? ", array($_GET['main_id'], $_GET['sub_id'], $subsubid));
                if ($checkrec != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $check = $this->usage_category->Find('all', array('conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => $_GET['sub_id'], 'usage_sub_sub_catg_id' => 0)));
                    if ($check == NULL) {
                        $savequery = $this->usage_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,usage_sub_catg_id,usage_sub_sub_catg_id,contsruction_type_flag,depreciation_flag,road_vicinity_flag,user_defined_dependency1_flag,user_defined_dependency2_flag,state_id) values(?,?,?,?,?,?,?,?,?)", array($_GET['main_id'], $_GET['sub_id'], $subsubid, $_GET['constuctionflag'], $_GET['depreciationflag'], $_GET['roadvicinityflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $this->Auth->user('state_id')));
                    } else {
                        $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET usage_sub_sub_catg_id = ? , contsruction_type_flag=?,depreciation_flag=?,road_vicinity_flag = ?,user_defined_dependency1_flag=?,user_defined_dependency2_flag=? WHERE usage_main_catg_id=? and usage_sub_catg_id=? and usage_sub_sub_catg_id =?", array($subsubid, $_GET['constuctionflag'], $_GET['depreciationflag'], $_GET['roadvicinityflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $_GET['main_id'], $_GET['sub_id'], 0));
                    }
                    $resultarray = array('usage_sub_sub_catg_id' => $subsubid,
                        'id' => $id);
                    echo json_encode($resultarray);
                    exit;
                }

                echo json_encode('Record Already Exist');
                exit;
            } else {
                $data = array('usage_sub_sub_catg_desc_en' => $catsubsub,
                    'usage_sub_sub_catg_desc_ll' => $_GET['usage_sub_sub_catg_desc_ll'],
                    'dolr_usage_code' => $_GET['dolr_usage_code'],
                    'contsruction_type_flag' => $_GET['constuctionflag'],
                    'depreciation_flag' => $_GET['depreciationflag'],
                    'road_vicinity_flag' => $_GET['roadvicinityflag'],
                    'user_defined_dependency1_flag' => $_GET['userdepflag1'],
                    'user_defined_dependency2_flag' => $_GET['userdepflg2'],
                    'state_id' => $this->Auth->user('state_id'));
                if ($_GET['actiontype'] == 'S') {
                    if ($this->Usagesubsub->save($data)) {
                        $lastinsertid = $this->Usagesubsub->getLastInsertId();
                        $record = $this->Usagesubsub->Find('all', array('conditions' => array('id' => $lastinsertid)));

                        $check = $this->usage_category->Find('all', array('conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => $_GET['sub_id'], 'usage_sub_sub_catg_id' => 0)));
                        if ($check == NULL) {
                            $savequery = $this->usage_category->query("insert into ngdrstab_mst_usage_category (usage_main_catg_id,usage_sub_catg_id,usage_sub_sub_catg_id,contsruction_type_flag,depreciation_flag,road_vicinity_flag,user_defined_dependency1_flag,user_defined_dependency2_flag,state_id) values(?,?,?,?,?,?,?,?,?)", array($_GET['main_id'], $_GET['sub_id'], $record[0]['Usagesubsub']['usage_sub_sub_catg_id'], $_GET['constuctionflag'], $_GET['depreciationflag'], $_GET['roadvicinityflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $this->Auth->user('state_id')));
                        } else {
                            $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET usage_sub_sub_catg_id = ? , contsruction_type_flag=?,depreciation_flag=?,road_vicinity_flag = ?,user_defined_dependency1_flag=?,user_defined_dependency2_flag=? WHERE usage_main_catg_id=? and usage_sub_catg_id=? and usage_sub_sub_catg_id = ?", array($record[0]['Usagesubsub']['usage_sub_sub_catg_id'], $_GET['constuctionflag'], $_GET['depreciationflag'], $_GET['roadvicinityflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $_GET['main_id'], $_GET['sub_id'], 0));
                        }
                        $resultarray = array('usage_sub_sub_catg_id' => $record[0]['Usagesubsub']['usage_sub_sub_catg_id'],
                            'id' => $lastinsertid);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnotsavemsg');
                        exit;
                    }
                } else {
                    $this->Usagesubsub->id = $_GET['id'];
                    if ($this->Usagesubsub->save($data)) {
                        $record = $this->Usagesubsub->Find('all', array('conditions' => array('id' => $_GET['id'])));
                        $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET  contsruction_type_flag=?,depreciation_flag=?,road_vicinity_flag = ?,user_defined_dependency1_flag=?,user_defined_dependency2_flag=? WHERE usage_sub_sub_catg_id =? ", array($_GET['constuctionflag'], $_GET['roadvicinityflag'], $_GET['depreciationflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $record[0]['Usagesubsub']['usage_sub_sub_catg_id']));
                        $resultarray = array('usage_sub_sub_catg_id' => $record[0]['Usagesubsub']['usage_sub_sub_catg_id'],
                            'id' => $_GET['id']);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnoteditmsg');
                        exit;
                    }
                }
            }
        }
    }

    public function saveusagelocation() {
        $this->loadModel('usage_category');
        if (isset($_GET['l1'])) {
            ///parametrised queries done by kalyani 3dec
            $hfid = $this->usage_category->query("select id from ngdrstab_mst_usage_category WHERE usage_main_catg_id=? and usage_sub_catg_id=? and usage_sub_sub_catg_id = ?", array($_GET['main_id'], $_GET['sub_id'], $_GET['subsub_id']));
            $this->usage_category->id = $hfid[0][0];
            $data = array('division_id' => $_GET['div'],
                'state_id' => $_GET['dis'],
                'subdivision_id' => $_GET['subdiv'],
                'taluka_id' => $_GET['tal'],
                'circle_id' => $_GET['cir'],
                'ulb_type_id' => $_GET['ulb'],
                'corp_id' => $_GET['corp'],
                'developed_land_type_id' => $_GET['devl'],
                'village_id' => $_GET['vil'],
                'level1_id' => $_GET['l1'],
                'levellist1_id' => $_GET['ll1'],
                'level2_id' => $_GET['l2'],
                'levellist2_id' => $_GET['ll2'],
                'level3_id' => $_GET['l3'],
                'levellist3_id' => $_GET['ll3'],
                'level4_id' => $_GET['l4'],
                'levellist4_id' => $_GET['ll4']
            );
            if ($this->usage_category->save($data)) {
                echo json_encode('lblsavemsg');
                exit;
            } else {
                echo json_encode('lblnotsavemsg');
                exit;
            }
//QP by kalyani on 6dec
            $savequery = $this->usage_category->query("UPDATE ngdrstab_mst_usage_category SET usage_sub_sub_catg_id = ? , contsruction_type_flag=?,depreciation_flag=?,road_vicinity_flag = ?,user_defined_dependency1_flag=?,user_defined_dependency2_flag=? WHERE usage_main_catg_id=? and usage_sub_catg_id=? and usage_sub_sub_catg_id = ?", array($record[0]['Usagesubsub']['usage_sub_sub_catg_id'], $_GET['constuctionflag'], $_GET['depreciationflag'], $_GET['roadvicinityflag'], $_GET['userdepflag1'], $_GET['userdepflg2'], $_GET['main_id'], $_GET['sub_id'], 0));
        }
    }

    public function saveusagelinkitem() {

        $this->loadModel('usagelinkcategory');
        if (isset($_GET['item_list_id'])) {
            $count = $this->usagelinkcategory->find('count', array('conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => $_GET['sub_id'], 'usage_sub_sub_catg_id' => $_GET['subsub_id'], 'usage_param_id' => $_GET['item_list_id'])));
            $ruleid = $this->usagelinkcategory->find('first', array('fields' => array('evalrule_id'), 'conditions' => array('usage_main_catg_id' => $_GET['main_id'], 'usage_sub_catg_id' => $_GET['sub_id'], 'usage_sub_sub_catg_id' => $_GET['subsub_id'], 'not' => array('evalrule_id' => null))));
            if ($ruleid) {
                $data['evalrule_id'] = $ruleid['usagelinkcategory']['evalrule_id'];
            }
            if ($count > 0 && $_GET['actiontype'] == 'S') {
                echo json_encode('Record Already Exist');
                exit;
            } else {
                $data = array('usage_main_catg_id' => $_GET['main_id'],
                    'usage_sub_catg_id' => $_GET['sub_id'],
                    'usage_sub_sub_catg_id' => $_GET['subsub_id'],
                    'usage_param_id' => $_GET['item_list_id'],
                    'state_id' => $this->Auth->user('state_id'));

                $itml = ClassRegistry::init('itemlist')->find('all', array('fields' => array('usage_param_code', 'range_field_flag'), 'conditions' => array('usage_param_id' => $_GET['item_list_id'])));
                $data['range_field_flag'] = $itml[0]['itemlist']['range_field_flag'];
                $data['uasge_param_code'] = $itml[0]['itemlist']['usage_param_code'];
                if ($_GET['actiontype'] == 'S') {
                    if ($this->usagelinkcategory->save($data)) {
                        $lastinsertid = $this->usagelinkcategory->getLastInsertId();
                        $record = $this->usagelinkcategory->Find('all', array('conditions' => array('id' => $lastinsertid)));
                        $resultarray = array('usage_param_id' => $record[0]['usagelinkcategory']['usage_param_id'],
                            'id' => $lastinsertid);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnotsavemsg');
                        exit;
                    }
                } else {
                    $this->usagelinkcategory->id = $_GET['id'];
                    if ($this->usagelinkcategory->save($data)) {
                        $record = $this->usagelinkcategory->Find('all', array('conditions' => array('id' => $_GET['id'])));
                        $resultarray = array('usage_param_id' => $record[0]['usagelinkcategory']['usage_param_id'],
                            'id' => $_GET['id']);
                        echo json_encode($resultarray);
                        exit;
                    } else {
                        echo json_encode('lblnoteditmsg');
                        exit;
                    }
                }
            }
        }
    }

//Usage Category end
//====================Level Mapping Start================================================================= 
    public function levelmapping() {
        try {
            $this->loadModel('Levels_1_property');
            $this->loadModel('Level1');
            $this->loadModel('State');
            $this->loadModel('damblkdpnd');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('taluka');
            $this->set('level1record', NULL);
            $this->set('levellist1record', NULL);
            $this->set('level2record', NULL);
            $this->set('levellist2record', NULL);
            $this->set('level3record', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hflevel1id', NULL);
            $this->set('hflevel1code', NULL);
            $this->set('hflevel2id', NULL);
            $this->set('hflevel2code', NULL);
            $this->set('hflevel3id', NULL);
            $this->set('hflevel3code', NULL);
            $this->set('hflevel4id', NULL);
            $this->set('hflevel4code', NULL);
            $this->set('hflevellist1id', NULL);
            $this->set('hflevellist1code', NULL);
            $this->set('hflevellist2id', NULL);
            $this->set('hflevellist2code', NULL);
            $this->set('hflevellist3id', NULL);
            $this->set('hflevellist3code', NULL);
            $this->set('hflevellist4id', NULL);
            $this->set('hflevellist4code', NULL);
            $this->set('defval', 0);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
//            $surveyno = ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug), 'order' => array('surveynotype_desc_' . $laug => 'ASC')));
//            $surveyno[0]='--Select--';
//            $this->set('surveyno', $surveyno);
            $this->set('surveyno', ClassRegistry::init('surveynotype')->find('list', array('fields' => array('surveynotype_id', 'surveynotype_desc_' . $laug), 'order' => array('surveynotype_desc_' . $laug => 'ASC'))));
            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $laug), 'order' => array('district_name_' . $laug => 'ASC'))));
            $this->set('village', NULL);
            $this->set('taluka', NULL);
            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);
//======================= Validation code Start ===================================================
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $fieldlist = array();
            $fieldlist1 = array();
            $fieldlist2 = array();
            $fieldlist3 = array();
            $fieldlist4 = array();
            $fieldlistlevel1 = array();
            $fieldlistlevel2 = array();
            $fieldlistlevel3 = array();
            $fieldlistlevel4 = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
//list for english single fields
//level 1
                    $fieldlist1['level_1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                    $fieldlistlevel1['list_1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
//level 2
                    $fieldlist2['level_2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                    $fieldlistlevel2['list_2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
//level 3
                    $fieldlist3['level_3_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                    $fieldlistlevel3['list_3_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
//level 4
                    $fieldlist4['level_4_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alpha,is_maxlength100';
                    $fieldlistlevel4['list_4_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
                } else {
//list for all unicode fields
//level 1                 
                    $fieldlist1['level_1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlistlevel1['list_1_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
//level 2
                    $fieldlist2['level_2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlistlevel2['list_2_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
//level 3
                    $fieldlist3['level_3_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlistlevel3['list_3_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
//level 4
                    $fieldlist4['level_4_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlistlevel4['list_4_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
//level 1
            $fieldlist1['surveynotype_id']['select'] = 'is_select_req';
//list 1  is_emptyornumallow
            $fieldlistlevel1['level_1_from_range']['text'] = 'is_digit,is_minmaxlength5';
            $fieldlistlevel1['level_1_to_range']['text'] = 'is_digit,is_minmaxlength5';
//level 2
            $fieldlist2['surveynotype_id1']['select'] = 'is_select_req';
//list 2
            $fieldlistlevel2['level_2_from_range']['text'] = 'is_digit,is_minmaxlength5';
            $fieldlistlevel2['level_2_to_range']['text'] = 'is_digit,is_minmaxlength5';
//level 3
            $fieldlist3['surveynotype_id2']['select'] = 'is_select_req';
//list 3
            $fieldlistlevel3['level_3_from_range']['text'] = 'is_digit,is_minmaxlength5';
            $fieldlistlevel3['level_3_to_range']['text'] = 'is_digit,is_minmaxlength5';
//level 4
            $fieldlist4['surveynotype_id3']['select'] = 'is_select_req';
//list 4
            $fieldlistlevel4['level_4_from_range']['text'] = 'is_digit,is_minmaxlength5';
            $fieldlistlevel4['level_4_to_range']['text'] = 'is_digit,is_minmaxlength5';
            $this->set('fieldlist', $fieldlist);
            $this->set('fieldlist1', $fieldlist1);
            $this->set('fieldlist2', $fieldlist2);
            $this->set('fieldlist3', $fieldlist3);
            $this->set('fieldlist4', $fieldlist4);
            $this->set('fieldlistlevel1', $fieldlistlevel1);
            $this->set('fieldlistlevel2', $fieldlistlevel2);
            $this->set('fieldlistlevel3', $fieldlistlevel3);
            $this->set('fieldlistlevel4', $fieldlistlevel4);
//loading data to json file
            $json2array['fieldlist'] = $fieldlist;
            $json2array['fieldlist1'] = $fieldlist1;
            $json2array['fieldlist2'] = $fieldlist2;
            $json2array['fieldlist3'] = $fieldlist3;
            $json2array['fieldlist4'] = $fieldlist4;
            $json2array['fieldlistlevel1'] = $fieldlistlevel1;
            $json2array['fieldlistlevel2'] = $fieldlistlevel2;
            $json2array['fieldlistlevel3'] = $fieldlistlevel3;
            $json2array['fieldlistlevel4'] = $fieldlistlevel4;
            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
            $file->write(json_encode($json2array));
//setting the error message to empty as it shows error at first time
//for only $fieldlist
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//level1 $fieldlist
            foreach ($fieldlist1 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//level2 $fieldlist
            foreach ($fieldlist2 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//level3 $fieldlist
            foreach ($fieldlist3 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//level4 $fieldlist
            foreach ($fieldlist4 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//levellist1 $fieldlist
            foreach ($fieldlistlevel1 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);

//levellist2 $fieldlist
            foreach ($fieldlistlevel2 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//levellist3 $fieldlist
            foreach ($fieldlistlevel3 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
//levellist4 $fieldlist
            foreach ($fieldlistlevel4 as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['levelmapping']['csrftoken']);
                $this->set('taluka', $json2array['taluka']);
                $this->set('village', $json2array['village']);
                $actiontype = $_POST['actiontype'];
                $this->set('hfupdateflag', $_POST['hfupdateflag']);
                $this->set('hflevel1id', $_POST['hflevel1id']);
                $this->set('hflevel2id', $_POST['hflevel2id']);
                $this->set('hflevel3id', $_POST['hflevel3id']);
                $this->set('hflevel4id', $_POST['hflevel4id']);
                $this->set('hflevellist1id', $_POST['hflevellist1id']);
                $this->set('hflevellist2id', $_POST['hflevellist2id']);
                $this->set('hflevellist3id', $_POST['hflevellist3id']);
                $this->set('hflevellist4id', $_POST['hflevellist4id']);
                $this->set('hflevel1code', $_POST['hflevel1code']);
                $this->set('hflevel2code', $_POST['hflevel2code']);
                $this->set('hflevel3code', $_POST['hflevel3code']);
                $this->set('hflevel4code', $_POST['hflevel4code']);
                $this->set('hflevellist1code', $_POST['hflevellist1code']);
                $this->set('hflevellist2code', $_POST['hflevellist2code']);
                $this->set('hflevellist3code', $_POST['hflevellist3code']);
                $this->set('hflevellist4code', $_POST['hflevellist4code']);
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
//---QP ON 2DEC BY KALYANI-------
                    if ($village != '' && isset($village) && is_numeric($village)) {
                        $level1grid = $this->villagelevelmapping->get_level1grid($village);
                        $this->set('level1record', $level1grid);
                    } else {
                        $this->set('level1record', NULL);
                    }
                }

                if ($actiontype == '2') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                }
                if ($actiontype == '3') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                }
                if ($actiontype == '4') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                }
                if ($actiontype == '5') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                    $level3grid = $this->villagelevelmapping->get_level3grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code']);
                    $this->set('level3record', $level3grid);
                }
                if ($actiontype == '6') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                    $level3grid = $this->villagelevelmapping->get_level3grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code']);
                    $this->set('level3record', $level3grid);
                    $level3listgrid = $this->villagelevelmapping->get_level3listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code']);
                    $this->set('levellist3record', $level3listgrid);
                }
                if ($actiontype == '7') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                    $level3grid = $this->villagelevelmapping->get_level3grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code']);
                    $this->set('level3record', $level3grid);
                    $level3listgrid = $this->villagelevelmapping->get_level3listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code']);
                    $this->set('levellist3record', $level3listgrid);
                    $level4grid = $this->villagelevelmapping->get_level4grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code'], $_POST['hflevellist3code']);
                    $this->set('level4record', $level4grid);
                }
                if ($actiontype == '8') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                    $level3grid = $this->villagelevelmapping->get_level3grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code']);
                    $this->set('level3record', $level3grid);
                    $level3listgrid = $this->villagelevelmapping->get_level3listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code']);
                    $this->set('levellist3record', $level3listgrid);
                    $level4grid = $this->villagelevelmapping->get_level4grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code'], $_POST['hflevellist3code']);
                    $this->set('level4record', $level4grid);
                    $level4listgrid = $this->villagelevelmapping->get_level4listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code'], $_POST['hflevellist3code'], $_POST['hflevel4code']);
                    $this->set('levellist4record', $level4listgrid);
                }
                if ($actiontype == '9') {
                    $this->set('actiontypeval', $actiontype);
                    $village = $this->request->data['levelmapping']['village_id'];
                    $level1grid = $this->villagelevelmapping->get_level1grid($village);
                    $this->set('level1record', $level1grid);
                    $level1listgrid = $this->villagelevelmapping->get_level1listgrid($village, $_POST['hflevel1code']);
                    $this->set('levellist1record', $level1listgrid);
                    $level2grid = $this->villagelevelmapping->get_level2grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code']);
                    $this->set('level2record', $level2grid);
                    $level2listgrid = $this->villagelevelmapping->get_level2listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code']);
                    $this->set('levellist2record', $level2listgrid);
                    $level3grid = $this->villagelevelmapping->get_level3grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code']);
                    $this->set('level3record', $level3grid);
                    $level3listgrid = $this->villagelevelmapping->get_level3listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code']);
                    $this->set('levellist3record', $level3listgrid);
                    $level4grid = $this->villagelevelmapping->get_level4grid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code'], $_POST['hflevellist3code']);
                    $this->set('level4record', $level4grid);
                    $level4listgrid = $this->villagelevelmapping->get_level4listgrid($village, $_POST['hflevel1code'], $_POST['hflevellist1code'], $_POST['hflevel2code'], $_POST['hflevellist2code'], $_POST['hflevel3code'], $_POST['hflevellist3code'], $_POST['hflevel4code']);
                    $this->set('levellist4record', $level4listgrid);
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevel1() {
        try {
            $this->autoRender = false;
            $this->loadModel('Levels_1_property');
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['level_1_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['level_1_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['level_1_desc_en'])) {
                $level1 = strtoupper($_POST['level_1_desc_en']);
//            $checkname = $this->Levels_1_property->Find('all', array('conditions' => array('upper(level_1_desc_en) like ' => $level1, 'village_id' => $_POST['village_id'])));
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Levels_1_property->Find('all', array('conditions' => array('upper(level_1_desc_en) like ' => $level1, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Levels_1_property->Find('all', array('conditions' => array('upper(level_1_desc_en) like ' => $level1, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['surveynotype_id'] = $_POST['surveynotype_id'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];

//                    //server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlist1']);
//  PR($errarr);EXIT;
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
//                        for($i=0; $i<count($errarr); $i++){
//                            if
//                        }
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
//                         pr($errarr['level_1_desc_en_error']);
//                      foreach($errarr as $arr)
//                      {
//                          if($arr!=null){
//                              $message=$arr;
//                              echo json_encode($message);
                        exit;
//                          }
//                      }
//                       pr($message);
                    } else {
                        if ($_POST['actiontype'] == 'S') {
                            if ($this->Levels_1_property->save($data)) {
                                $lastinsertid = $this->Levels_1_property->getLastInsertId();
                                $record = $this->Levels_1_property->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $savequery = $this->Levels_1_property->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,state_id) values(?,?,?)", array($_POST['village_id'], $record[0]['Levels_1_property']['level_1_id'], $this->Auth->user('state_id')));
                                $resultarray = array('level1_id' => $record[0]['Levels_1_property']['level_1_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Levels_1_property->id = $_POST['id'];

                            if ($this->Levels_1_property->save($data)) {
                                $record = $this->Levels_1_property->Find('all', array('conditions' => array('id' => $_POST['id'])));
                                $resultarray = array('level1_id' => $record[0]['Levels_1_property']['level_1_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevellist1() {
        try {
            $this->loadModel('Level1');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//               pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['list_1_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['list_1_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['list_1_desc_en'])) {
                $levellist1 = strtoupper($_POST['list_1_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level1->Find('all', array('conditions' => array('upper(list_1_desc_en) like ' => $levellist1, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level1->Find('all', array('conditions' => array('upper(list_1_desc_en) like ' => $levellist1, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['level_1_id'] = $_POST['level1code'];
                    $data['level_1_from_range'] = $_POST['level_1_from_range'];
                    $data['level_1_to_range'] = $_POST['level_1_to_range'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlistlevel1']);
//  PR($errarr);EXIT;
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
//                        for($i=0; $i<count($errarr); $i++){
//                            if
//                        }
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
//                         pr($errarr['level_1_desc_en_error']);
//                      foreach($errarr as $arr)
//                      {
//                          if($arr!=null){
//                              $message=$arr;
//                              echo json_encode($message);
                        exit;
//                          }
//                      }
//                       pr($message);
                    } else {
                        if ($_POST['actiontype'] == 'S') {

                            if ($this->Level1->save($data)) {
                                $lastinsertid = $this->Level1->getLastInsertId();
                                $record = $this->Level1->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST ['level1code'],
                                        'level2_id' => 0, 'level3_id' => 0, 'level4_id' => 0, 'prop_level1_list_id' => 0, 'prop_level2_list_id' => 0,
                                        'prop_level3_list_id' => 0, 'prop_level4_list_id' => 0)));
//                        pr($check);exit;
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,state_id) values(?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $record[0]['Level1']['prop_level1_list_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET prop_level1_list_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id = ? and level2_id = ? and level3_id = ? and level4_id = ? and prop_level2_list_id = ? and prop_level3_list_id = ? and prop_level4_list_id = ?", array($record[0]['Level1']['prop_level1_list_id'], $_POST['level1code'], $_POST['village_id'], 0, 0, 0, 0, 0, 0, 0));
                                }

                                $resultarray = array('prop_level1_list_id' => $record[0]['Level1']['prop_level1_list_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level1->id = $_POST['id'];

                            if ($this->Level1->save($data)) {
                                $record = $this->Level1->Find('all', array('conditions' => array('id' => $_POST['id'])));
                                $resultarray = array('prop_level1_list_id' => $record[0]['Level1']['prop_level1_list_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevel2() {
        try {
            $this->loadModel('Level2_property');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['level_2_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['level_2_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['level_2_desc_en'])) {
                $level2 = strtoupper($_POST['level_2_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level2_property->Find('all', array('conditions' => array('upper(level_2_desc_en) like ' => $level2, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level2_property->Find('all', array('conditions' => array('upper(level_2_desc_en) like ' => $level2, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['surveynotype_id'] = $_POST['surveynotype_id1'];
                    $data['surveynotype_id1'] = $_POST['surveynotype_id1'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);
                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlist2']);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
                        exit;
                    } else {
                        if ($_POST ['actiontype'] == 'S') {
                            if ($this->Level2_property->save($data)) {
                                $lastinsertid = $this->Level2_property->getLastInsertId();
                                $record = $this->Level2_property->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST['level1code'],
                                        'level2_id' => 0, 'level3_id' => 0, 'level4_id' => 0, 'prop_level1_list_id' => $_POST['levellist1code'], 'prop_level2_list_id' => 0,
                                        'prop_level3_list_id' => 0, 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,state_id) values(?,?,?,?,?)", array($_POST ['village_id'], $_POST['level1code'], $_POST['levellist1code'], $record[0]['Level2_property']['level_2_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET level2_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id =? and level3_id = ? and level4_id = ? and prop_level2_list_id =? and prop_level3_list_id = ? and prop_level4_list_id =?", array($record[0]['Level2_property']['level_2_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], 0, 0, 0, 0, 0, 0));
                                }
                                $resultarray = array('level2_id' => $record[0]['Level2_property']['level_2_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level2_property->id = $_POST['id'];

                            if ($this->Level2_property->save($data)) {
                                $record = $this->Level2_property->Find('all', array('conditions' => array('id' => $_POST ['id'])));
                                $resultarray = array('level2_id' => $record[0]['Level2_property']['level_2_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevellist2() {
        try {
            $this->loadModel('Level2');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['list_2_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['list_2_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['list_2_desc_en'])) {
                $level2list = strtoupper($_POST['list_2_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level2->Find('all', array('conditions' => array('upper(list_2_desc_en) like ' => $level2list, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level2->Find('all', array('conditions' => array('upper(list_2_desc_en) like ' => $level2list, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['level_2_id'] = $_POST['level2code'];
                    $data['level_2_from_range'] = $_POST['level_2_from_range'];
                    $data['level_2_to_range'] = $_POST['level_2_to_range'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlistlevel2']);
//  PR($errarr);EXIT;
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
                        exit;
                    } else {
                        if ($_POST['actiontype'] == 'S') {
                            if ($this->Level2->save($data)) {
                                $lastinsertid = $this->Level2->getLastInsertId();
                                $record = $this->Level2->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST['level1code'],
                                        'level2_id' => $_POST['level2code'], 'level3_id' => 0, 'level4_id' => 0, 'prop_level1_list_id' => $_POST['levellist1code'], 'prop_level2_list_id' => 0,
                                        'prop_level3_list_id' => 0, 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,prop_level2_list_id,state_id) values(?,?,?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $_POST['levellist1code'], $_POST['level2code'], $record[0]['Level2']['prop_level2_list_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET prop_level2_list_id =? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id = ? and level3_id =? and level4_id = ?and prop_level2_list_id = ?and prop_level3_list_id = ? and prop_level4_list_id = ?", array($record[0]['Level2']['prop_level2_list_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], $_POST['level2code'], 0, 0, 0, 0, 0));
                                }

                                $resultarray = array('prop_level2_list_id' => $record[0]['Level2']['prop_level2_list_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level2->id = $_POST['id'];

                            if ($this->Level2->save($data)) {
                                $record = $this->Level2->Find('all', array('conditions' => array('id' => $_POST['id'])));
                                $resultarray = array('prop_level2_list_id' => $record[0]['Level2']['prop_level2_list_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevel3() {
        try {
            $this->loadModel('Level3_property');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['level_3_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['level_3_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['level_3_desc_en'])) {
                $level3 = strtoupper($_POST['level_3_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level3_property->Find('all', array('conditions' => array('upper(level_3_desc_en) like ' => $level3, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level3_property->Find('all', array('conditions' => array('upper(level_3_desc_en) like ' => $level3, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['surveynotype_id'] = $_POST['surveynotype_id2'];
                    $data['surveynotype_id2'] = $_POST['surveynotype_id2'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlist3']);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
                        exit;
                    } else {
                        if ($_POST['actiontype'] == 'S') {
                            if ($this->Level3_property->save($data)) {
                                $lastinsertid = $this->Level3_property->getLastInsertId();
                                $record = $this->Level3_property->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST['level1code'],
                                        'level2_id' => $_POST['level2code'], 'level3_id' => 0, 'level4_id' => 0, 'prop_level1_list_id' => $_POST['levellist1code'], 'prop_level2_list_id' => $_POST['levellist2code'],
                                        'prop_level3_list_id' => 0, 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,prop_level2_list_id,level3_id,state_id) values(?,?,?,?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $_POST['levellist1code'], $_POST['level2code'], $_POST['levellist2code'], $record[0]['Level3_property']['level_3_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET level3_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id = ? and level3_id = ? and level4_id = ? and prop_level2_list_id =? and prop_level3_list_id = ? and prop_level4_list_id = ?", array($record[0]['Level3_property']['level_3_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], $_POST['level2code'], 0, 0, $_POST['levellist2code'], 0, 0));
                                }
                                $resultarray = array('level3_id' => $record[0]['Level3_property']['level_3_id'], 'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level3_property->id = $_POST['id'];
                            if ($this->Level3_property->save($data)) {
                                $record = $this->Level3_property->Find('all', array('conditions' => array('id' => $_POST ['id'])));
                                $resultarray = array('level3_id' => $record[0]['Level3_property']['level_3_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevellist3() {
        try {
            $this->loadModel('Level3');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['list_3_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['list_3_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['list_3_desc_en'])) {
                $levellist3 = strtoupper($_POST['list_3_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level3->Find('all', array('conditions' => array('upper(list_3_desc_en) like ' => $levellist3, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level3->Find('all', array('conditions' => array('upper(list_3_desc_en) like ' => $levellist3, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['level_3_id'] = $_POST['level3code'];
                    $data['level_3_to_range'] = $_POST['level_3_to_range'];
                    $data['level_3_from_range'] = $_POST['level_3_from_range'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlistlevel3']);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
                        exit;
                    } else {
                        if ($_POST['actiontype'] == 'S') {
                            if ($this->Level3->save($data)) {
                                $lastinsertid = $this->Level3->getLastInsertId();
                                $record = $this->Level3->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST['level1code'],
                                        'level2_id' => $_POST['level2code'], 'level3_id' => $_POST ['level3code'], 'level4_id' => 0, 'prop_level1_list_id' => $_POST['levellist1code'], 'prop_level2_list_id' => $_POST['levellist2code'],
                                        'prop_level3_list_id' => 0, 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,prop_level2_list_id,level3_id,prop_level3_list_id,state_id) values(?,?,?,?,?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $_POST['levellist1code'], $_POST['level2code'], $_POST['levellist2code'], $_POST['level3code'], $record[0]['Level3']['prop_leve3_list_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET prop_level3_list_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id = ?and level3_id =? and level4_id = ? and prop_level2_list_id =? and prop_level3_list_id = ? and prop_level4_list_id = ?", array($record[0]['Level3']['prop_leve3_list_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], $_POST['level2code'], $_POST['level3code'], 0, $_POST['levellist2code'], 0, 0));
                                }
                                $resultarray = array('prop_level3_list_id' => $record[0]['Level3']['prop_leve3_list_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level3->id = $_POST['id'];
                            if ($this->Level3->save($data)) {
                                $record = $this->Level3->Find('all', array('conditions' => array('id' => $_POST['id'])));
                                $resultarray = array('prop_level3_list_id' => $record[0]['Level3']['prop_leve3_list_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevel4() {
        try {
            $this->loadModel('Level4_property');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['level_4_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['level_4_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['level_4_desc_en'])) {
                $level4 = strtoupper($_POST['level_4_desc_en']);
                $checkname = NULL;

                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level4_property->Find('all', array('conditions' => array('upper(level_4_desc_en) like ' => $level4, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level4_property->Find('all', array('conditions' => array('upper(level_4_desc_en) like ' => $level4, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['surveynotype_id'] = $_POST['surveynotype_id3'];
                    $data['surveynotype_id3'] = $_POST['surveynotype_id3'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlist4']);
//  PR($errarr);EXIT;
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);
                        exit;
                    } else {
                        if ($_POST['actiontype'] == 'S') {
                            if ($this->Level4_property->save($data)) {
                                $lastinsertid = $this->Level4_property->getLastInsertId();
                                $record = $this->Level4_property->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST ['level1code'],
                                        'level2_id' => $_POST ['level2code'], 'level3_id' => $_POST['level3code'], 'level4_id' => 0, 'prop_level1_list_id' => $_POST['levellist1code'], 'prop_level2_list_id' => $_POST['levellist2code'],
                                        'prop_level3_list_id' => $_POST['levellist3code'], 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,prop_level2_list_id,level3_id,prop_level3_list_id,level4_id,state_id) values(?,?,?,?,?,?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $_POST['levellist1code'], $_POST['level2code'], $_POST['levellist2code'], $_POST['level3code'], $_POST['levellist3code'], $record[0]['Level4_property']['level_4_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET level4_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id = ? and level3_id =? and level4_id = ? and prop_level2_list_id =? and prop_level3_list_id =? and prop_level4_list_id =?", array($record[0]['Level4_property']['level_4_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], $_POST['level2code'], $_POST['level3code'], 0, $_POST['levellist2code'], $_POST['levellist3code'], 0));
                                }
                                $resultarray = array('level4_id' => $record[0]['Level4_property']['level_4_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level4_property->id = $_POST['id'];

                            if ($this->Level4_property->save($data)) {
                                $record = $this->Level4_property->Find('all', array('conditions' => array('id' => $_POST ['id'])));
                                $resultarray = array('level4_id' => $record[0]['Level4_property']['level_4_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function savelevellist4() {
        try {
            $this->loadModel('Level4');
            $this->loadModel('villagelevelmapping');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
//   pr($languagelist);exit;
            foreach ($languagelist as $langcode) {
                $data['list_4_desc_' . $langcode['mainlanguage']['language_code']] = $_POST['list_4_desc_' . $langcode['mainlanguage']['language_code']];
            }
            if (isset($_POST['list_4_desc_en'])) {
                $level4list = strtoupper($_POST['list_4_desc_en']);
                $checkname = NULL;
                if ($_POST['actiontype'] != 'S') {
                    $checkname = $this->Level4->Find('all', array('conditions' => array('upper(list_4_desc_en) like ' => $level4list, 'village_id' => $_POST['village_id'], 'id NOT IN (' . $_POST['id'] . ')')));
                } else {
                    $checkname = $this->Level4->Find('all', array('conditions' => array('upper(list_4_desc_en) like ' => $level4list, 'village_id' => $_POST['village_id'])));
                }
                if ($checkname != NULL) {
                    echo json_encode('Record Already Exist');
                    exit;
                } else {
                    $data['village_id'] = $_POST['village_id'];
                    $data['level_4_id'] = $_POST['level4code'];
                    $data['level_4_from_range'] = $_POST['level_4_from_range'];
                    $data['level_4_to_range'] = $_POST['level_4_to_range'];
                    $data['state_id'] = $this->Auth->user('state_id');
                    $data['user_id'] = $this->Auth->User('user_id');
                    $data['created_date'] = date('Y/m/d H:i:s');
                    $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
//server 
                    $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                    $json = $file->read(true, 'r');
                    $json2array = json_decode($json, TRUE);

                    $data = $this->istrim($data);
                    $errarr = $this->validatedata($data, $json2array['fieldlistlevel4']);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {

                        $errarr1['errorcode'] = $errarr;
                        echo json_encode($errarr1);

                        exit;
                    } else {
                        if ($_POST ['actiontype'] == 'S') {
                            if ($this->Level4->save($data)) {
                                $lastinsertid = $this->Level4->getLastInsertId();
                                $record = $this->Level4->Find('all', array('conditions' => array('id' => $lastinsertid)));
                                $check = $this->villagelevelmapping->Find('all', array('conditions' => array('level1_id' => $_POST ['level1code'],
                                        'level2_id' => $_POST['level2code'], 'level3_id' => $_POST ['level3code'], 'level4_id' => $_POST ['level4code'], 'prop_level1_list_id' => $_POST ['levellist1code'], 'prop_level2_list_id' => $_POST['levellist2code'],
                                        'prop_level3_list_id' => $_POST['levellist3code'], 'prop_level4_list_id' => 0)));
                                if ($check == NULL) {
                                    $savequery = $this->villagelevelmapping->query("insert into ngdrstab_conf_lnk_village_location_mapping (village_id,level1_id,prop_level1_list_id,level2_id,prop_level2_list_id,level3_id,prop_level3_list_id,level4_id,prop_level4_list_id,state_id) values(?,?,?,?,?,?,?,?,?,?)", array($_POST['village_id'], $_POST['level1code'], $_POST['levellist1code'], $_POST['level2code'], $_POST['levellist2code'], $_POST['level3code'], $_POST['levellist3code'], $_POST['level4code'], $record[0]['Level4']['prop_level4_list_id'], $this->Auth->user('state_id')));
                                } else {
                                    $savequery = $this->villagelevelmapping->query("UPDATE ngdrstab_conf_lnk_village_location_mapping SET prop_level4_list_id = ? WHERE level1_id=? and village_id =? and prop_level1_list_id =? and level2_id = ? and level3_id =? and level4_id =?"
                                            . " and prop_level2_list_id =? and prop_level3_list_id =? and prop_level4_list_id = ?", array($record[0]['Level4']['prop_level4_list_id'], $_POST['level1code'], $_POST['village_id'], $_POST['levellist1code'], $_POST['level2code'], $_POST['level3code'], $_POST['level4code'], $_POST['levellist2code'], $_POST['levellist3code'], 0));
                                }


                                $resultarray = array('prop_level4_list_id' => $record[0]['Level4']['prop_level4_list_id'],
                                    'id' => $lastinsertid);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnotsavemsg');
                                exit;
                            }
                        } else {
                            $this->Level4->id = $_POST['id'];

                            if ($this->Level4->save($data)) {
                                $record = $this->Level4->Find('all', array('conditions' => array('id' => $_POST['id'])));
                                $resultarray = array('prop_level4_list_id' => $record[0]['Level4']['prop_level4_list_id'],
                                    'id' => $_POST['id']);
                                echo json_encode($resultarray);
                                exit;
                            } else {
                                echo json_encode('lblnoteditmsg');
                                exit;
                            }
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $e->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    function checkusersro() {
        // echo 'hi';exit;
        try {
            $this->loadModel('User');
            $c = Sanitize::html($_POST['username']);

            $this->User->findbyusername($c);
            exit;
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function get_district_name() {
        try {
            if (isset($_GET['state'])) {
//                $division = $_GET['division'];
                $state = $_GET['state'];
                // echo $state; exit;
                $districtname = ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_en'), 'conditions' => array('state_id' => array($state))));
//                pr($districtname);exit;
                echo json_encode($districtname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function get_taluka_name1() {
        try {
            if (isset($_GET['district'])) {
                $district = $_GET['district'];

                $talukaname = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_en'), 'conditions' => array('district_id' => array($district))));
                echo json_encode($talukaname);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function regoffice() {

        try {
            if (isset($_GET['taluka_id'])) {
                $taluka = $_GET['taluka_id'];


                $options1['conditions'] = array('ov.taluka_id' => trim($taluka));
                $options1['joins'] = array(array('table' => 'ngdrstab_trn_office_village_linking', 'alias' => 'ov', 'type' => 'INNER', 'conditions' => array('ov.office_id=office.office_id')),
                );
                $options1['fields'] = array('office.office_id', 'office.office_name_en');
                $office = ClassRegistry::init('office')->find('list', $options1);
                $result_array = array('office' => $office);
                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function employee12march() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('salutation');
            $this->loadModel('qualification');
            $this->loadModel('designation');
            $this->loadModel('office');
            $this->loadModel('department');
            $this->loadModel('employee');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('employeerecord', NULL);
            $this->set('hfpwd', NULL);


//              $this->set('employeerecord', NULL);
            $created_date = date('Y/m/d');
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('corp_coun', ClassRegistry::init('corporationclass')->find('list', array('fields' => array('id', 'class_description_en'), 'order' => array('class_description_en' => 'ASC'))));
            $this->set('officedec', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdec', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
//            $this->set('employeerecord', $this->employee->find('all'));

            $employeerecord = $this->employee->query("select * from ngdrstab_mst_employee A inner join  ngdrstab_mst_user B on A.emp_code= B.emp_code");
//            echo $employeerecord;exit;
//            $empcode=$employeerecord['employee']['emp_code'];
//           
//            $empcode_user=$this->employee->query("select * from ngdrstab_mst_user where emp_code=?", array($roleid));


            $this->set('employeerecord', $employeerecord);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('type', ClassRegistry::init('authenticate_type')->find('list', array('fields' => array('user_auth_type_id', 'auth_type_desc'))));
            $lang = $this->Session->read("sess_langauge");
            $this->set('role', ClassRegistry::init('role')->find('list', array('fields' => array('role.role_id', 'role.role_name_' . $lang), 'conditions' => array('display_flag' => 'Y'))));
            $salutation = $this->salutation->find('list', array('fields' => array('salutation.salutation_id', 'salutation.salutation_desc_' . $laug)));
            $this->set('salutation', $salutation);

            $qualification = $this->qualification->find('list', array('fields' => array('qualification.qualification_id', 'qualification.qualification_desc_' . $laug)));
            $this->set('qualification', $qualification);

            $designation = $this->designation->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en')));
            $this->set('designation', $designation);

            $office = $this->office->find('list', array('fields' => array('office_id', 'office.office_name_en')));
            $this->set('office', $office);

            $department = $this->department->find('list', array('fields' => array('department.dept_id', 'department.dept_name_en')));
            $this->set('department', $department);

            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_en'), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);
            $this->loadModel('District');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);
            $this->loadModel('taluka');
            $taluka = $this->taluka->find('list', array('fields' => array('id', 'taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
            $this->set('taluka', $taluka);

            $this->loadModel('id_type');
            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'order' => array('identificationtype_desc_en' => 'ASC')));
            $this->set('idtype', $idtype);

            $this->set('Empcode', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'order' => array('emp_code' => 'ASC'))));

            $this->loadModel('hintquestion');
            $hintquestion = $this->hintquestion->find('list', array('fields' => array('id', 'questions_en'), 'order' => array('questions_en' => 'ASC')));
            $this->set('hintquestion', $hintquestion);
            //adding field list dynamically from language list
            $fieldlist = array();
            $fieldlist['emp_code']['text'] = 'is_required,is_alphanumdashslash,is_maxlength20';
            $fieldlist['designation_id']['select'] = 'is_select_req';
            $fieldlist['office_id']['select'] = 'is_select_req';
            $fieldlist['salutation']['select'] = 'is_select_req';
            $fieldlist['emp_fname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['emp_mname']['text'] = 'is_alphaspace,is_minmaxlength20'; //EMPTY ALLOW
            $fieldlist['emp_lname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['qualification_id']['select'] = 'is_select_req';
            $fieldlist['dept_id']['select'] = 'is_select_req';
//            $fieldlist['reporting_officer_email_id']['text'] = 'is_email';
            $fieldlist['building_no']['text'] = 'is_alphanumspacedashdotslashroundbrackets,is_minmaxlength20';
            $fieldlist['flat_no']['text'] = 'is_numeric';
            $fieldlist['road_name']['text'] = 'is_alphanumeric,is_minmaxlength20';
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['dist_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets,is_minmaxlength20';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['village']['text'] = 'is_required,is_alphaspacedashdotcommacolon,is_maxlength20';
            $fieldlist['pincode']['text'] = 'is_pincode';
            $fieldlist['contact_no']['text'] = 'is_required,is_mobileindian'; //9999999999
            $fieldlist['contact_no1']['text'] = 'is_mobileindian';
//contact_no
            $fieldlist['email_id']['text'] = 'is_email,is_maxlength30';
            $fieldlist['id_type']['select'] = 'is_select_req';
            $fieldlist['uid_no']['text'] = 'is_required,is_uidnum';
            $fieldlist['hint_question']['select'] = 'is_select_req';
            $fieldlist['hint_answer']['text'] = 'is_required,is_alphanumeric';
            //  $fieldlist['mobile_no']['text'] = 'is_mobileindian';
//dependent field
            $fieldlist['corp_coun_id']['select'] = 'is_select_req';
            $fieldlist['authetication_type']['select'] = 'is_select_req';
            // $fieldlist['username']['text'] = 'is_required,is_username';
            //$fieldlist['password']['text'] = 'is_required,is_password';
            // $fieldlist['r_password']['text'] = 'is_required,is_password';
            $fieldlist['full_name']['text'] = 'is_alphaspace';
            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
            $fieldlist['role_id']['select'] = 'is_select_req';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            $emp_id = $this->employee->query("select max(emp_id) as empid from ngdrstab_mst_employee");
            $empid = $emp_id[0][0]['empid'];
            if ($empid != Null) {
                $empid = $empid + 1;
            } else {
                $empid = 1;
            }


            $this->set('empid', $empid);

            $empcode = 'EMP0' . $empid;

            $this->set('empcode', $empcode);
            if ($this->request->is('post')) {

                $officeid = $this->request->data['employee']['office_id'];
                $this->request->data['employee']['emp_id'] = $empid;
                $this->request->data['employee']['user_id'] = $this->Auth->User("user_id");
                $this->request->data['employee']['req_ip'] = $this->request->clientIp();
                if ($this->request->data['hfupdateflag'] != 'Y') {
                    $this->request->data['employee']['emp_code'] = $empcode;
                } else {
                    $empcode = $this->request->data['employee']['emp_code'];
                }
                $this->request->data['employee']['usercreate_flag'] = $_POST['usercreate_flag'];
                //server side

                if (isset($this->request->data['employee']['password']) && isset($this->request->data['employee']['r_password']) && isset($this->request->data['employee']['username'])) {
                    $this->request->data['employee']['password'] = $this->decrypt($this->request->data['employee']['password'], $this->Session->read("salt"));
                    $this->request->data['employee']['username'] = $this->decrypt($this->request->data['employee']['username'], $this->Session->read("salt"));
                    $this->request->data['employee']['r_password'] = $this->decrypt($this->request->data['employee']['r_password'], $this->Session->read("salt"));
                    $this->request->data['employee'] = $this->istrim($this->request->data['employee']);

                    $fieldlistnew = $this->modifyemployeefieldlist($fieldlist, $this->request->data['employee']);
                    $errarr = $this->validatedata($this->request->data['employee'], $fieldlistnew);

                    $newpassword = $this->request->data['employee']['password'] = sha1($this->request->data['employee']['password']);
                    $newpassword1 = $this->request->data['employee']['r_password'] = sha1($this->request->data['employee']['r_password']);
                }
                if ($this->ValidationError($errarr)) {
                    if ($this->request->data['hfupdateflag'] == 'Y') {

                        $this->request->data['employee']['emp_code'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {

//                             pr($this->request->data['employee']);exit;
                        if ($this->employee->save($this->request->data['employee'])) {
                            $this->Session->setFlash(__($actionvalue));

                            if ($_POST['usercreate_flag'] == 'Y') {
                                $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                $authetication_type = $this->request->data['employee']['authetication_type'];
                                //$username = $this->request->data['employee']['username'];
                                //$password = $this->request->data['employee']['password'];
                                $full_name = $this->request->data['employee']['full_name'];
                                $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                $mobile_no = $this->request->data['employee']['contact_no'];
                                $email_id = $this->request->data['employee']['email_id'];
                                $bioflag = $this->request->data['biometric_capture_flag'];
                                $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                $req_ip = $this->request->data['employee']['req_ip'];
                                $stateid = $this->Auth->User("state_id");
//                           
                                if ($this->request->data['hfupdateflag'] == 'Y') {
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];


//                               
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    //working
                                    //$updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                           
                                } else {
//                                    echo 1;exit;
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];

                                    $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                            . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");

                                    if ($savequery == NULL) {

                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
                                        $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));

                                        // pr($getusername);exit;
                                        $userid = $getusername[0][0]['user_id'];
                                        $username = $getusername[0][0]['username'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                    }
                                }
                            }

                            $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                        }
                    } else {
                        if ($newpassword == $newpassword1) {
//                        pr($this->request->data['employee']);exit;
                            if ($this->employee->save($this->request->data['employee'])) {
                                $this->Session->setFlash(__($actionvalue));

                                if ($_POST['usercreate_flag'] == 'Y') {
                                    $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                    $authetication_type = $this->request->data['employee']['authetication_type'];
                                    $username = $this->request->data['employee']['username'];
                                    $password = $this->request->data['employee']['password'];
                                    $full_name = $this->request->data['employee']['full_name'];
                                    $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                    $mobile_no = $this->request->data['employee']['contact_no'];
                                    $email_id = $this->request->data['employee']['email_id'];
                                    $bioflag = $this->request->data['biometric_capture_flag'];
                                    $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                    $req_ip = $this->request->data['employee']['req_ip'];
                                    $stateid = $this->Auth->User("state_id");
//                           
                                    if ($this->request->data['hfupdateflag'] == 'Y') {
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];


//                               
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");

                                        $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                                $updatequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,emp_code,mobile_no,created,state_id,req_ip,biometric_capture_flag)"
//                                        . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "')");
//                               pr($updatequery);exit;
                                    } else {
//                                    echo 1;exit;
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,email_id,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                                . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $email_id . "','" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");

                                        if ($savequery == NULL) {

                                            $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                            $moduleid = $getmodelid[0][0]['module_id'];
                                            $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));

                                            // pr($getusername);exit;
                                            $userid = $getusername[0][0]['user_id'];
                                            $username = $getusername[0][0]['username'];

                                            $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                    . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                        }
                                    }
                                }

                                $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                            }
                        } else {
                            $errarr['re_user_pass_error'] = 'Password Did not Match';
                            $this->Session->setFlash(__('Password Did not Match'));
                            // $this->redirect(array('action' => 'citizenregistration'));
                        }
                    }
                }
            }
            $this->Session->write("salt", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            //  return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function employee1march() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('salutation');
            $this->loadModel('qualification');
            $this->loadModel('designation');
            $this->loadModel('office');
            $this->loadModel('department');
            $this->loadModel('employee');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('employeerecord', NULL);

//              $this->set('employeerecord', NULL);
            $created_date = date('Y/m/d');
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('corp_coun', ClassRegistry::init('corporationclass')->find('list', array('fields' => array('id', 'class_description_en'), 'order' => array('class_description_en' => 'ASC'))));
            $this->set('officedec', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdec', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
//            $this->set('employeerecord', $this->employee->find('all'));

            $employeerecord = $this->employee->query("select * from ngdrstab_mst_employee A inner join  ngdrstab_mst_user B on A.emp_code= B.emp_code");
//            echo $employeerecord;exit;
//            $empcode=$employeerecord['employee']['emp_code'];
//           
//            $empcode_user=$this->employee->query("select * from ngdrstab_mst_user where emp_code=?", array($roleid));


            $this->set('employeerecord', $employeerecord);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('type', ClassRegistry::init('authenticate_type')->find('list', array('fields' => array('user_auth_type_id', 'auth_type_desc'))));
            $lang = $this->Session->read("sess_langauge");
            $this->set('role', ClassRegistry::init('role')->find('list', array('fields' => array('role.role_id', 'role.role_name_' . $lang), 'conditions' => array('display_flag' => 'Y'))));
            $salutation = $this->salutation->find('list', array('fields' => array('salutation.salutation_id', 'salutation.salutation_desc_' . $laug)));
            $this->set('salutation', $salutation);

            $qualification = $this->qualification->find('list', array('fields' => array('qualification.qualification_id', 'qualification.qualification_desc_' . $laug)));
            $this->set('qualification', $qualification);

            $designation = $this->designation->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en')));
            $this->set('designation', $designation);

            $office = $this->office->find('list', array('fields' => array('office_id', 'office.office_name_en')));
            $this->set('office', $office);

            $department = $this->department->find('list', array('fields' => array('department.dept_id', 'department.dept_name_en')));
            $this->set('department', $department);

            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_en'), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);
            $this->loadModel('District');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);
            $this->loadModel('taluka');
            $taluka = $this->taluka->find('list', array('fields' => array('id', 'taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
            $this->set('taluka', $taluka);

            $this->loadModel('id_type');
            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'order' => array('identificationtype_desc_en' => 'ASC')));
            $this->set('idtype', $idtype);

            $this->set('Empcode', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'order' => array('emp_code' => 'ASC'))));

            $this->loadModel('hintquestion');
            $hintquestion = $this->hintquestion->find('list', array('fields' => array('id', 'questions_en'), 'order' => array('questions_en' => 'ASC')));
            $this->set('hintquestion', $hintquestion);
            //adding field list dynamically from language list
            $fieldlist = array();
            $fieldlist['emp_code']['text'] = 'is_required,is_alphanumdashslash,is_maxlength20';
            $fieldlist['designation_id']['select'] = 'is_select_req';
            $fieldlist['office_id']['select'] = 'is_select_req';
            $fieldlist['salutation']['select'] = 'is_select_req';
            $fieldlist['emp_fname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['emp_mname']['text'] = 'is_alphaspace,is_minmaxlength20'; //EMPTY ALLOW
            $fieldlist['emp_lname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['qualification_id']['select'] = 'is_select_req';
            $fieldlist['dept_id']['select'] = 'is_select_req';
//            $fieldlist['reporting_officer_email_id']['text'] = 'is_email';
            $fieldlist['building_no']['text'] = 'is_alphanumspacedashdotslashroundbrackets,is_minmaxlength20';
            $fieldlist['flat_no']['text'] = 'is_numeric';
            $fieldlist['road_name']['text'] = 'is_alphanumeric,is_minmaxlength20';
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['dist_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets,is_minmaxlength20';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['village']['text'] = 'is_required,is_alphaspacedashdotcommacolon,is_maxlength20';
            $fieldlist['pincode']['text'] = 'is_pincode';
            $fieldlist['contact_no']['text'] = 'is_required,is_mobileindian'; //9999999999
            $fieldlist['contact_no1']['text'] = 'is_mobileindian';
//contact_no
            $fieldlist['email_id']['text'] = 'is_email,is_maxlength30';
            $fieldlist['id_type']['select'] = 'is_select_req';
            $fieldlist['uid_no']['text'] = 'is_required,is_uidnum';
            $fieldlist['hint_question']['select'] = 'is_select_req';
            $fieldlist['hint_answer']['text'] = 'is_required,is_alphanumeric';
            //  $fieldlist['mobile_no']['text'] = 'is_mobileindian';
//dependent field
            $fieldlist['corp_coun_id']['select'] = 'is_select_req';
            $fieldlist['authetication_type']['select'] = 'is_select_req';
            $fieldlist['username']['text'] = 'is_required,is_username';
            $fieldlist['password']['text'] = 'is_required,is_password';
            $fieldlist['r_password']['text'] = 'is_required,is_password';
            $fieldlist['full_name']['text'] = 'is_alphaspace';
            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
            $fieldlist['role_id']['select'] = 'is_select_req';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            $emp_id = $this->employee->query("select max(emp_id) as empid from ngdrstab_mst_employee");
            $empid = $emp_id[0][0]['empid'];
            if ($empid != Null) {
                $empid = $empid + 1;
            } else {
                $empid = 1;
            }


            $this->set('empid', $empid);

            $empcode = 'EMP0' . $empid;

            $this->set('empcode', $empcode);
            if ($this->request->is('post')) {

                $officeid = $this->request->data['employee']['office_id'];
                $this->request->data['employee']['emp_id'] = $empid;
                $this->request->data['employee']['user_id'] = $this->Auth->User("user_id");
                $this->request->data['employee']['req_ip'] = $this->request->clientIp();
                if ($this->request->data['hfupdateflag'] != 'Y') {
                    $this->request->data['employee']['emp_code'] = $empcode;
                } else {
                    $empcode = $this->request->data['employee']['emp_code'];
                }
                $this->request->data['employee']['usercreate_flag'] = $_POST['usercreate_flag'];
                //server side
                $this->request->data['employee']['password'] = $this->decrypt($this->request->data['employee']['password'], $this->Session->read("salt"));
                $this->request->data['employee']['username'] = $this->decrypt($this->request->data['employee']['username'], $this->Session->read("salt"));
                $this->request->data['employee']['r_password'] = $this->decrypt($this->request->data['employee']['r_password'], $this->Session->read("salt"));
                $this->request->data['employee'] = $this->istrim($this->request->data['employee']);

                $fieldlistnew = $this->modifyemployeefieldlist($fieldlist, $this->request->data['employee']);
                $errarr = $this->validatedata($this->request->data['employee'], $fieldlistnew);

                $newpassword = $this->request->data['employee']['password'] = sha1($this->request->data['employee']['password']);
                $newpassword1 = $this->request->data['employee']['r_password'] = sha1($this->request->data['employee']['r_password']);
                if ($this->ValidationError($errarr)) {
                    if ($this->request->data['hfupdateflag'] == 'Y') {

                        $this->request->data['employee']['emp_code'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($newpassword == $newpassword1) {
//                        pr($this->request->data['employee']);exit;
                        if ($this->employee->save($this->request->data['employee'])) {
                            $this->Session->setFlash(__($actionvalue));

                            if ($_POST['usercreate_flag'] == 'Y') {
                                $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                $authetication_type = $this->request->data['employee']['authetication_type'];
                                $username = $this->request->data['employee']['username'];
                                $password = $this->request->data['employee']['password'];
                                $full_name = $this->request->data['employee']['full_name'];
                                $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                $mobile_no = $this->request->data['employee']['mobile_no'];
                                $bioflag = $this->request->data['biometric_capture_flag'];
                                $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                $req_ip = $this->request->data['employee']['req_ip'];
                                $stateid = $this->Auth->User("state_id");
//                            pr($office_id);
//                            pr($emp_code);exit;
//                            pr('hi');exit;$officeid
//pr("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,password,full_name,employee_id,mobile_no,state_id,req_ip,biometric_capture_flag)"$created_date
//       . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $office_id . "," . $roleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . "," . $stateid . ",'" . $req_ip . "','" . $bioflag . "')");exit;


                                if ($this->request->data['hfupdateflag'] == 'Y') {
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];


                                    $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                                $updatequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,emp_code,mobile_no,created,state_id,req_ip,biometric_capture_flag)"
//                                        . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "')");
//                               pr($updatequery);exit;
                                } else {
//                                    echo 1;exit;
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];

                                    $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                            . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");

                                    if ($savequery == NULL) {

                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
                                        $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));

                                        // pr($getusername);exit;
                                        $userid = $getusername[0][0]['user_id'];
                                        $username = $getusername[0][0]['username'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                    }
                                }
                            }

                            $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                        }
                    } else {
                        $errarr['re_user_pass_error'] = 'Password Did not Match';
                        $this->Session->setFlash(__('Password Did not Match'));
                        // $this->redirect(array('action' => 'citizenregistration'));
                    }
                }
            }
            $this->Session->write("salt", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            //  return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function modifyemployeefieldlist_old($fieldlist, $data) {


        if (isset($data['usercreate_flag']) == 'N') {
            unset($fieldlist['corp_coun_id']);
            unset($fieldlist['authetication_type']);
            unset($fieldlist['username']);
            unset($fieldlist['password']);
            unset($fieldlist['r_password']);
            unset($fieldlist['full_name']);
            unset($fieldlist['mobile_no']);
            unset($fieldlist['role_id']);
        }

        return $fieldlist;
    }

    //working update delete save 12 march
    public function employee() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('salutation');
            $this->loadModel('qualification');
            $this->loadModel('designation');
            $this->loadModel('office');
            $this->loadModel('department');
            $this->loadModel('employee');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('employeerecord', NULL);
            $this->set('hfpwd', NULL);


//              $this->set('employeerecord', NULL);
            $created_date = date('Y/m/d');
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('corp_coun', ClassRegistry::init('corporationclass')->find('list', array('fields' => array('id', 'class_description_en'), 'order' => array('class_description_en' => 'ASC'))));
            $this->set('officedec', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdec', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
//            $this->set('employeerecord', $this->employee->find('all'));

            $employeerecord = $this->employee->query("select * from ngdrstab_mst_employee A inner join  ngdrstab_mst_user B on A.emp_code= B.emp_code");
//            echo $employeerecord;exit;
//            $empcode=$employeerecord['employee']['emp_code'];
//           
//            $empcode_user=$this->employee->query("select * from ngdrstab_mst_user where emp_code=?", array($roleid));


            $this->set('employeerecord', $employeerecord);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $allrule = $this->NGDRSErrorCode->query('select e.error_code ,e.pattern_rule_client ,e.error_messages_' . $laug . ' from ngdrstab_mst_errorcodes e, ngdrstab_mst_identificationtype i where e.error_code_id=i.error_code_id ');
            $this->set('allrule', $allrule);

            $this->set('type', ClassRegistry::init('authenticate_type')->find('list', array('fields' => array('user_auth_type_id', 'auth_type_desc'))));
            $lang = $this->Session->read("sess_langauge");
            $this->set('role', ClassRegistry::init('role')->find('list', array('fields' => array('role.role_id', 'role.role_name_' . $lang), 'conditions' => array('display_flag' => 'Y'))));
            $salutation = $this->salutation->find('list', array('fields' => array('salutation.salutation_id', 'salutation.salutation_desc_' . $laug)));
            $this->set('salutation', $salutation);

            $qualification = $this->qualification->find('list', array('fields' => array('qualification.qualification_id', 'qualification.qualification_desc_' . $laug)));
            $this->set('qualification', $qualification);

            $designation = $this->designation->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en')));
            $this->set('designation', $designation);

            $office = $this->office->find('list', array('fields' => array('office_id', 'office.office_name_en')));
            $this->set('office', $office);

            $department = $this->department->find('list', array('fields' => array('department.dept_id', 'department.dept_name_en')));
            $this->set('department', $department);

            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_en'), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);
            $this->loadModel('District');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);
            $this->loadModel('taluka');
            $taluka = $this->taluka->find('list', array('fields' => array('id', 'taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
            $this->set('taluka', $taluka);

            $this->loadModel('id_type');
            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'conditions' => array('emp_reg_flag' => 'Y'), 'order' => array('identificationtype_desc_en' => 'ASC')));
//             $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'order' => array('identificationtype_desc_en' => 'ASC')));
            $this->set('idtype', $idtype);

            $this->set('Empcode', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'order' => array('emp_code' => 'ASC'))));

            $this->loadModel('hintquestion');
            $hintquestion = $this->hintquestion->find('list', array('fields' => array('id', 'questions_en'), 'order' => array('questions_en' => 'ASC')));
            $this->set('hintquestion', $hintquestion);
            //adding field list dynamically from language list
            $fieldlist = array();
            $fieldlist['emp_code']['text'] = 'is_required,is_alphanumdashslash,is_maxlength20';
            $fieldlist['designation_id']['select'] = 'is_select_req';
            $fieldlist['office_id']['select'] = 'is_select_req';
            $fieldlist['salutation']['select'] = 'is_select_req';
            $fieldlist['emp_fname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['emp_mname']['text'] = 'is_alphaspace,is_minmaxlength20'; //EMPTY ALLOW
            $fieldlist['emp_lname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['qualification_id']['select'] = 'is_select_req';
            $fieldlist['dept_id']['select'] = 'is_select_req';
//            $fieldlist['reporting_officer_email_id']['text'] = 'is_email';
            $fieldlist['building_no']['text'] = 'is_alphanumspacedashdotslashroundbrackets,is_minmaxlength20';
            $fieldlist['flat_no']['text'] = 'is_numeric';
            $fieldlist['road_name']['text'] = 'is_alphanumeric,is_minmaxlength20';
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['dist_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets,is_minmaxlength20';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['village']['text'] = 'is_required,is_alphaspacedashdotcommacolon,is_maxlength20';
            $fieldlist['pincode']['text'] = 'is_pincode';
            $fieldlist['contact_no']['text'] = 'is_required,is_mobileindian'; //9999999999
            $fieldlist['contact_no1']['text'] = 'is_mobileindian';
//contact_no
            $fieldlist['email_id']['text'] = 'is_email,is_maxlength30';
            $fieldlist['id_type']['select'] = 'is_select_req';
//            $fieldlist['uid_no']['text'] = 'is_required,is_uidnum';
            $fieldlist['hint_question']['select'] = 'is_select_req';
            $fieldlist['hint_answer']['text'] = 'is_required,is_alphanumeric';
            //  $fieldlist['mobile_no']['text'] = 'is_mobileindian';
//dependent field
            $fieldlist['corp_coun_id']['select'] = 'is_select_req';
            $fieldlist['authetication_type']['select'] = 'is_select_req';
            $fieldlist['username']['text'] = 'is_required,is_username';
            $fieldlist['password']['text'] = 'is_required,is_password';
            $fieldlist['r_password']['text'] = 'is_required,is_password';
            $fieldlist['full_name']['text'] = 'is_alphaspace';
            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
            $fieldlist['role_id']['select'] = 'is_select_req';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            //   pr($this->request->data);
            // if(){
            $emp_id = $this->employee->query("select max(emp_id) as empid from ngdrstab_mst_employee");
            $empid = $emp_id[0][0]['empid'];
            if ($empid != Null) {
                $empid = $empid + 1;
            } else {
                $empid = 1;
            }


            $this->set('empid', $empid);

            $empcode = 'EMP0' . $empid;
            // }
            $this->set('empcode', $empcode);
            if ($this->request->is('post')) {
                //pr($empcode);exit;
//pr($this->request->data['employee']);exit;
                $officeid = $this->request->data['employee']['office_id'];
                $this->request->data['employee']['emp_id'] = $empid;
                $this->request->data['employee']['user_id'] = $this->Auth->User("user_id");
                $this->request->data['employee']['req_ip'] = $this->request->clientIp();
                if ($this->request->data['hfupdateflag'] != 'Y') {

                    $this->request->data['employee']['emp_code'] = $empcode;
                } else {
                    $empcode = $this->request->data['employee']['emp_code'];
                }
                $this->request->data['employee']['usercreate_flag'] = $_POST['usercreate_flag'];
                //server side

                if (isset($this->request->data['employee']['password']) && isset($this->request->data['employee']['r_password']) && isset($this->request->data['employee']['username'])) {
                    $this->request->data['employee']['password'] = $this->decrypt($this->request->data['employee']['password'], $this->Session->read("salt"));
                    $this->request->data['employee']['username'] = $this->decrypt($this->request->data['employee']['username'], $this->Session->read("salt"));
                    $this->request->data['employee']['r_password'] = $this->decrypt($this->request->data['employee']['r_password'], $this->Session->read("salt"));
                    $this->request->data['employee'] = $this->istrim($this->request->data['employee']);
                    $newpassword = $this->request->data['employee']['password'] = sha1($this->request->data['employee']['password']);
                    $newpassword1 = $this->request->data['employee']['r_password'] = sha1($this->request->data['employee']['r_password']);
                }
//     pr($this->request->data['employee']);exit;  
                $fieldlistnew = $this->modifyemployeefieldlist($fieldlist, $this->request->data['employee']);

                $errarr = $this->validatedata($this->request->data['employee'], $fieldlistnew);
//pr($errarr);exit;


                if ($this->ValidationError($errarr)) {
                    if ($this->request->data['hfupdateflag'] == 'Y') {

                        $this->request->data['employee']['emp_id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {

//                             pr($this->request->data['employee']);exit;
                        if ($this->employee->save($this->request->data['employee'])) {
                            $this->Session->setFlash(__($actionvalue));

                            if ($_POST['usercreate_flag'] == 'Y') {
                                $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                $authetication_type = $this->request->data['employee']['authetication_type'];
                                //$username = $this->request->data['employee']['username'];
                                //$password = $this->request->data['employee']['password'];
                                $full_name = $this->request->data['employee']['full_name'];
                                $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                $mobile_no = $this->request->data['employee']['contact_no'];
                                $email_id = $this->request->data['employee']['email_id'];
                                $bioflag = $this->request->data['biometric_capture_flag'];
                                $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                $req_ip = $this->request->data['employee']['req_ip'];
                                $stateid = $this->Auth->User("state_id");
//                           
                                if ($this->request->data['hfupdateflag'] == 'Y') {
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];


//                               
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    //working
                                    //$updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                           
                                } else {
//                                    echo 1;exit;
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];

                                    $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                            . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");

                                    if ($savequery == NULL) {

                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
                                        $getusername = $this->User12->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));

                                        // pr($getusername);exit;
                                        $userid = $getusername[0][0]['user_id'];
                                        $username = $getusername[0][0]['username'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                    }
                                }
                            }

                            $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                        }
                    } else {
                        if ($newpassword == $newpassword1) {
//                        pr($this->request->data['employee']);exit;
                            if ($this->employee->save($this->request->data['employee'])) {
                                $this->Session->setFlash(__($actionvalue));

                                if ($_POST['usercreate_flag'] == 'Y') {
                                    $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                    $authetication_type = $this->request->data['employee']['authetication_type'];
                                    $username = $this->request->data['employee']['username'];
                                    $password = $this->request->data['employee']['password'];
                                    $full_name = $this->request->data['employee']['full_name'];
                                    $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                    $mobile_no = $this->request->data['employee']['contact_no'];
                                    $email_id = $this->request->data['employee']['email_id'];
                                    $bioflag = $this->request->data['biometric_capture_flag'];
                                    $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                    $req_ip = $this->request->data['employee']['req_ip'];
                                    $stateid = $this->Auth->User("state_id");
//                           
                                    if ($this->request->data['hfupdateflag'] == 'Y') {
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                        $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                                $updatequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,emp_code,mobile_no,created,state_id,req_ip,biometric_capture_flag)"
//                                        . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "')");
//                               pr($updatequery);exit;
                                    } else {
//                                    echo 1;exit;
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,email_id,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                                . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $email_id . "','" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");
                                        if ($savequery == NULL) {
                                            $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                            $moduleid = $getmodelid[0][0]['module_id'];
                                            $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));
                                            // pr($getusername);exit;
                                            $userid = $getusername[0][0]['user_id'];
                                            $username = $getusername[0][0]['username'];
                                            $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                    . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                        }
                                    }
                                }

                                $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                            }
                        } else {
                            $errarr['re_user_pass_error'] = 'Password Did not Match';
                            $this->Session->setFlash(__('Password Did not Match'));
                            // $this->redirect(array('action' => 'citizenregistration'));
                        }
                    }
                }
            }
            $this->Session->write("salt", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            //  return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function employee_30march19() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('salutation');
            $this->loadModel('qualification');
            $this->loadModel('designation');
            $this->loadModel('office');
            $this->loadModel('department');
            $this->loadModel('employee');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('employeerecord', NULL);
            $this->set('hfpwd', NULL);


//              $this->set('employeerecord', NULL);
            $created_date = date('Y/m/d');
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('corp_coun', ClassRegistry::init('corporationclass')->find('list', array('fields' => array('id', 'class_description_en'), 'order' => array('class_description_en' => 'ASC'))));
            $this->set('officedec', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdec', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
//            $this->set('employeerecord', $this->employee->find('all'));

            $employeerecord = $this->employee->query("select * from ngdrstab_mst_employee A inner join  ngdrstab_mst_user B on A.emp_code= B.emp_code");
//            echo $employeerecord;exit;
//            $empcode=$employeerecord['employee']['emp_code'];
//           
//            $empcode_user=$this->employee->query("select * from ngdrstab_mst_user where emp_code=?", array($roleid));


            $this->set('employeerecord', $employeerecord);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $allrule = $this->NGDRSErrorCode->query('select e.error_code ,e.pattern_rule_client ,e.error_messages_' . $laug . ' from ngdrstab_mst_errorcodes e, ngdrstab_mst_identificationtype i where e.error_code_id=i.error_code_id ');
            $this->set('allrule', $allrule);

            $this->set('type', ClassRegistry::init('authenticate_type')->find('list', array('fields' => array('user_auth_type_id', 'auth_type_desc'))));
            $lang = $this->Session->read("sess_langauge");
            $this->set('role', ClassRegistry::init('role')->find('list', array('fields' => array('role.role_id', 'role.role_name_' . $lang), 'conditions' => array('display_flag' => 'Y'))));
            $salutation = $this->salutation->find('list', array('fields' => array('salutation.salutation_id', 'salutation.salutation_desc_' . $laug)));
            $this->set('salutation', $salutation);

            $qualification = $this->qualification->find('list', array('fields' => array('qualification.qualification_id', 'qualification.qualification_desc_' . $laug)));
            $this->set('qualification', $qualification);

            $designation = $this->designation->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en')));
            $this->set('designation', $designation);

            $office = $this->office->find('list', array('fields' => array('office_id', 'office.office_name_en')));
            $this->set('office', $office);

            $department = $this->department->find('list', array('fields' => array('department.dept_id', 'department.dept_name_en')));
            $this->set('department', $department);

            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_en'), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);
            $this->loadModel('District');
            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);
            $this->loadModel('taluka');
            $taluka = $this->taluka->find('list', array('fields' => array('id', 'taluka_name_en'), 'order' => array('taluka_name_en' => 'ASC')));
            $this->set('taluka', $taluka);

            $this->loadModel('id_type');
            $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'conditions' => array('emp_reg_flag' => 'Y'), 'order' => array('identificationtype_desc_en' => 'ASC')));
//             $idtype = $this->id_type->find('list', array('fields' => array('identificationtype_id', 'identificationtype_desc_en'), 'order' => array('identificationtype_desc_en' => 'ASC')));
            $this->set('idtype', $idtype);

            $this->set('Empcode', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'order' => array('emp_code' => 'ASC'))));

            $this->loadModel('hintquestion');
            $hintquestion = $this->hintquestion->find('list', array('fields' => array('id', 'questions_en'), 'order' => array('questions_en' => 'ASC')));
            $this->set('hintquestion', $hintquestion);
            //adding field list dynamically from language list
            $fieldlist = array();
            $fieldlist['emp_code']['text'] = 'is_required,is_alphanumdashslash,is_maxlength20';
            $fieldlist['designation_id']['select'] = 'is_select_req';
            $fieldlist['office_id']['select'] = 'is_select_req';
            $fieldlist['salutation']['select'] = 'is_select_req';
            $fieldlist['emp_fname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['emp_mname']['text'] = 'is_alphaspace,is_minmaxlength20'; //EMPTY ALLOW
            $fieldlist['emp_lname']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['qualification_id']['select'] = 'is_select_req';
            $fieldlist['dept_id']['select'] = 'is_select_req';
//            $fieldlist['reporting_officer_email_id']['text'] = 'is_email';
            $fieldlist['building_no']['text'] = 'is_alphanumspacedashdotslashroundbrackets,is_minmaxlength20';
            $fieldlist['flat_no']['text'] = 'is_numeric';
            $fieldlist['road_name']['text'] = 'is_alphanumeric,is_minmaxlength20';
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['dist_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets,is_minmaxlength20';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength20';
            $fieldlist['village']['text'] = 'is_required,is_alphaspacedashdotcommacolon,is_maxlength20';
            $fieldlist['pincode']['text'] = 'is_pincode';
            $fieldlist['contact_no']['text'] = 'is_required,is_mobileindian'; //9999999999
            $fieldlist['contact_no1']['text'] = 'is_mobileindian';
//contact_no
            $fieldlist['email_id']['text'] = 'is_email,is_maxlength30';
            $fieldlist['id_type']['select'] = 'is_select_req';
//            $fieldlist['uid_no']['text'] = 'is_required,is_uidnum';
            $fieldlist['hint_question']['select'] = 'is_select_req';
            $fieldlist['hint_answer']['text'] = 'is_required,is_alphanumeric';
            //  $fieldlist['mobile_no']['text'] = 'is_mobileindian';
//dependent field
            $fieldlist['corp_coun_id']['select'] = 'is_select_req';
            $fieldlist['authetication_type']['select'] = 'is_select_req';
            $fieldlist['username']['text'] = 'is_required,is_username';
            $fieldlist['password']['text'] = 'is_required,is_password';
            $fieldlist['r_password']['text'] = 'is_required,is_password';
            $fieldlist['full_name']['text'] = 'is_alphaspace';
            $fieldlist['mobile_no']['text'] = 'is_required,is_mobileindian';
            $fieldlist['role_id']['select'] = 'is_select_req';
//            $fieldlist['itr_number']['text'] = 'is_required,is_alphanumeric';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            $emp_id = $this->employee->query("select max(emp_id) as empid from ngdrstab_mst_employee");
            $empid = $emp_id[0][0]['empid'];
            if ($empid != Null) {
                $empid = $empid + 1;
            } else {
                $empid = 1;
            }


            $this->set('empid', $empid);

            $empcode = 'EMP0' . $empid;

            $this->set('empcode', $empcode);
            if ($this->request->is('post')) {
//pr($this->request->data['employee']);exit;
                $officeid = $this->request->data['employee']['office_id'];
                $this->request->data['employee']['emp_id'] = $empid;
                $this->request->data['employee']['user_id'] = $this->Auth->User("user_id");
                $this->request->data['employee']['req_ip'] = $this->request->clientIp();
                if ($this->request->data['hfupdateflag'] != 'Y') {
                    $this->request->data['employee']['emp_code'] = $empcode;
                } else {
                    $empcode = $this->request->data['employee']['emp_code'];
                }
                $this->request->data['employee']['usercreate_flag'] = $_POST['usercreate_flag'];
                //server side

                if (isset($this->request->data['employee']['password']) && isset($this->request->data['employee']['r_password']) && isset($this->request->data['employee']['username'])) {
                    $this->request->data['employee']['password'] = $this->decrypt($this->request->data['employee']['password'], $this->Session->read("salt"));
                    $this->request->data['employee']['username'] = $this->decrypt($this->request->data['employee']['username'], $this->Session->read("salt"));
                    $this->request->data['employee']['r_password'] = $this->decrypt($this->request->data['employee']['r_password'], $this->Session->read("salt"));
                    $this->request->data['employee'] = $this->istrim($this->request->data['employee']);
                    $newpassword = $this->request->data['employee']['password'] = sha1($this->request->data['employee']['password']);
                    $newpassword1 = $this->request->data['employee']['r_password'] = sha1($this->request->data['employee']['r_password']);
                }
//     pr($this->request->data['employee']);exit;  
                $fieldlistnew = $this->modifyemployeefieldlist($fieldlist, $this->request->data['employee']);

                $errarr = $this->validatedata($this->request->data['employee'], $fieldlistnew);
//pr($errarr);exit;


                if ($this->ValidationError($errarr)) {
                    if ($this->request->data['hfupdateflag'] == 'Y') {

                        $this->request->data['employee']['emp_code'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {

//                             pr($this->request->data['employee']);exit;
                        if ($this->employee->save($this->request->data['employee'])) {
                            $this->Session->setFlash(__($actionvalue));

                            if ($_POST['usercreate_flag'] == 'Y') {
                                $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                $authetication_type = $this->request->data['employee']['authetication_type'];
                                //$username = $this->request->data['employee']['username'];
                                //$password = $this->request->data['employee']['password'];
                                $full_name = $this->request->data['employee']['full_name'];
                                $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                $mobile_no = $this->request->data['employee']['contact_no'];
                                $email_id = $this->request->data['employee']['email_id'];
                                $bioflag = $this->request->data['biometric_capture_flag'];
                                $roleid = $this->request->data['employee']['role_id'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                $req_ip = $this->request->data['employee']['req_ip'];
                                $stateid = $this->Auth->User("state_id");
//                           
                                if ($this->request->data['hfupdateflag'] == 'Y') {
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];


//                               
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    //working
                                    //$updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                    $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                           
                                } else {
//                                    echo 1;exit;
                                    $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                    $moduleid = $getmodelid[0][0]['module_id'];

                                    $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                            . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");

                                    if ($savequery == NULL) {

                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
                                        $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));

                                        // pr($getusername);exit;
                                        $userid = $getusername[0][0]['user_id'];
                                        $username = $getusername[0][0]['username'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                    }
                                }
                            }

                            $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                        }
                    } else {
                        if ($newpassword == $newpassword1) {
//                        pr($this->request->data['employee']);exit;
                            if ($this->employee->save($this->request->data['employee'])) {
                                $this->Session->setFlash(__($actionvalue));

                                if ($_POST['usercreate_flag'] == 'Y') {
                                    $corp_coun_id = $this->request->data['employee']['corp_coun_id'];
                                    $authetication_type = $this->request->data['employee']['authetication_type'];
                                    $username = $this->request->data['employee']['username'];
                                    $password = $this->request->data['employee']['password'];
                                    $full_name = $this->request->data['employee']['full_name'];
                                    $emp_code = $this->request->data['employee']['emp_code'];
//                             
//                            $office_id=$this->request->data['employee']['office_id'];
                                    $mobile_no = $this->request->data['employee']['contact_no'];
                                    $email_id = $this->request->data['employee']['email_id'];
                                    $bioflag = $this->request->data['biometric_capture_flag'];
                                    $roleid = $this->request->data['employee']['role_id'];
                                    $itr_num = $this->request->data['employee']['itr_number'];
//                            $user_id = $this->request->data['employee']['user_id'];
//                            $created_date = $this->request->data['employee']['created'];
                                    $req_ip = $this->request->data['employee']['req_ip'];
                                    $stateid = $this->Auth->User("state_id");
//                           
                                    if ($this->request->data['hfupdateflag'] == 'Y') {
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];
//                                updatequery = $this->User->query( "update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",password='" . $password . "',full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='".$emp_code."'");
                                        $updatequery = $this->User->query("update ngdrstab_mst_user set corp_coun_id=" . $corp_coun_id . ",authetication_type='" . $authetication_type . "',username='" . $username . "',office_id=" . $officeid . ",role_id=" . $roleid . ",module_id=" . $moduleid . ",full_name='" . $full_name . "',employee_id='" . $emp_code . "',mobile_no=" . $mobile_no . ",email_id='" . $email_id . "',created='" . $created_date . "',state_id=" . $stateid . ",req_ip='" . $req_ip . "',biometric_capture_flag='" . $bioflag . "',emp_code='" . $emp_code . "' where emp_code='" . $emp_code . "'");
//                                $updatequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,emp_code,mobile_no,created,state_id,req_ip,biometric_capture_flag)"
//                                        . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "')");
//                               pr($updatequery);exit;
                                    } else {
//                                    echo 1;exit;
                                        $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                        $moduleid = $getmodelid[0][0]['module_id'];

                                        $savequery = $this->User->query("insert into ngdrstab_mst_user (corp_coun_id,authetication_type,username,office_id,role_id,module_id,password,full_name,employee_id,mobile_no,email_id,created,state_id,req_ip,biometric_capture_flag,emp_code)"
                                                . " values(" . $corp_coun_id . ",'" . $authetication_type . "','" . $username . "'," . $officeid . "," . $roleid . "," . $moduleid . ",'" . $password . "','" . $full_name . "','" . $emp_code . "'," . $mobile_no . ",'" . $email_id . "','" . $created_date . "'," . $stateid . ",'" . $req_ip . "','" . $bioflag . "','" . $emp_code . "')");
                                        if ($savequery == NULL) {
                                            $getmodelid = $this->User->query("select user_id,module_id from ngdrstab_mst_role where role_id=?", array($roleid));
                                            $moduleid = $getmodelid[0][0]['module_id'];
                                            $getusername = $this->User->query("select user_id,username from ngdrstab_mst_user where username=?", array($username));
                                            // pr($getusername);exit;
                                            $userid = $getusername[0][0]['user_id'];
                                            $username = $getusername[0][0]['username'];
                                            $savequery = $this->User->query("insert into ngdrstab_mst_userroles (user_id,username,module_id,role_id,created,req_ip,state_id)"
                                                    . " values(" . $userid . ",'" . $username . "'," . $moduleid . "," . $roleid . ",'" . $created_date . "','" . $req_ip . "'," . $stateid . ")");
                                        }
                                    }
                                }

                                $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                            }
                        } else {
                            $errarr['re_user_pass_error'] = 'Password Did not Match';
                            $this->Session->setFlash(__('Password Did not Match'));
                            // $this->redirect(array('action' => 'citizenregistration'));
                        }
                    }
                }
            }
            $this->Session->write("salt", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            //  return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function modifyemployeefieldlist($fieldlist, $data) {
//pr($data);exit;
        if (isset($data['usercreate_flag']) == 'N') {
            unset($fieldlist['corp_coun_id']);
            unset($fieldlist['authetication_type']);
            unset($fieldlist['username']);
            unset($fieldlist['password']);
            unset($fieldlist['r_password']);
            unset($fieldlist['full_name']);
            unset($fieldlist['mobile_no']);
            unset($fieldlist['role_id']);
        }

        if ($data['emp_code']) {
            unset($fieldlist['username']);
            unset($fieldlist['password']);
            unset($fieldlist['r_password']);
        }

        return $fieldlist;
    }

    public function employee_delete($emp_code = null) {
//         pr($emp_code);
        $this->autoRender = false;
        $this->loadModel('employee');
        $this->loadModel('User');
        try {
            if (isset($emp_code)) {
                $deleterecordemployee = $this->employee->query("DELETE from ngdrstab_mst_employee where emp_code='" . $emp_code . "'");
                if (empty($deleterecordemployee)) {
                    $deleterecorduser = $this->User->query("DELETE from ngdrstab_mst_user where emp_code='" . $emp_code . "'");

                    $this->Session->setFlash(__('lbldeletemsg'));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'employee'));
                }
            }
        } catch (exception $ex) {
            pr($ex);
            exit;
        }
    }

    //end
    public function employee_delete_old($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('employee');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'article') {
                $this->employee->id = $id;
                if ($this->employee->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'employee'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function officenew_old() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'mainlanguage', 'office', 'language', 'mainlanguage'));

            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $language = $this->Session->read("sess_langauge");
            $this->set('laug', $language);
            $created_date = date('Y/m/d');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $officerecord = $this->office->query("select distinct of.office_name_ll,of.dept_id,of.flat,of.building,of.road,of.locality,of.city,
                                                of.taluka_id,of.district_id,of.state_id,of.pincode,of.officc_contact_no,of.office_email_id,
                                                of.reporting_office_id,of.shift_id,of.hierarchy_id,of.id,of.locality,
                                                
                                                        dep.dept_name_en,of.office_name_en,of.city,state.state_name_en,dis.district_name_en from ngdrstab_mst_office of
                                                        join ngdrstab_mst_department dep on dep.dept_id=of.dept_id 
                                                        join ngdrstab_conf_admblock1_state state on state.state_id=of.state_id
                                                        join ngdrstab_conf_admblock3_district dis on dis.district_id=of.district_id");

            $this->set('officerecord', $officerecord);
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('hierarchydata', ClassRegistry::init('officehierarchy')->find('list', array('fields' => array('hierarchy_id', 'hierarchy_desc_' . $language), 'order' => array('hierarchy_desc_' . $language => 'ASC'))));
            $this->set('reportingofficedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_name_' . $language), 'order' => array('office_name_' . $language => 'ASC'))));
            $this->set('department', ClassRegistry::init('department')->find('list', array('fields' => array('dept_id', 'dept_name_' . $language), 'order' => array('dept_name_' . $language => 'ASC'))));
            $this->set('State', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $language), 'order' => array('state_name_' . $language => 'ASC'))));
            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $language), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $language), 'order' => array('taluka_name_' . $language => 'ASC'))));
            $this->set('officesift', ClassRegistry::init('officeshift')->find('list', array('fields' => array('shift_id', 'desc_' . $language), 'order' => array('desc_' . $language => 'ASC'))));
            $fieldlist = array();

            $fieldlist['dept_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['office_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedotroundbrackets,is_maxlength20';
                } else {
                    //list for all unicode fieldsis_alphaspacemaxlenghth
                    $fieldlist['office_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }

            $fieldlist['flat']['text'] = 'is_alphanumspacedash,is_maxlength100';
            $fieldlist['building']['text'] = 'is_required,is_alphanumspacedashdotslash,is_maxlength100';
            $fieldlist['road']['text'] = 'is_required,is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets,is_maxlength100';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength100';
            $fieldlist['village_id']['text'] = 'is_required,is_alphaspacedashdotcommacolonroundbrackets,is_maxlength100';
            $fieldlist['pincode']['text'] = 'is_required,is_pincode';
            $fieldlist['officc_contact_no']['text'] = 'is_required,is_mobileindian,is_maxlengthmobile10';
            $fieldlist['office_email_id']['text'] = 'is_email,is_maxlength50';
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['reporting_office_id']['select'] = 'is_select_req';
            $fieldlist['hierarchy_id']['select'] = 'is_select_req';

            $this->set('fieldlist', $fieldlist);

            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['officenew']['csrftoken']);
//                  pr($this->request->data);exit;
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['officenew']['req_ip'] = $this->request->clientIp();
                    $this->request->data['officenew']['user_id'] = $user_id;
                    $this->request->data['officenew']['created_date'] = $created_date;

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['officenew']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
//                    pr($this->request->data['office']);exit;

                    $this->request->data['officenew'] = $this->istrim($this->request->data['officenew']);
                    $errarr = $this->validatedata($this->request->data['officenew'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
//                               pr($this->request->data);exit;
                        if ($this->office->save($this->request->data['officenew'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'officenew'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'bank_branch'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function officenew() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'mainlanguage', 'office', 'language', 'mainlanguage'));

            $userid = $this->Session->read("session_user_id");
//            pr();exit;
            $result = substr($userid, 4);
            $userid = substr($result, 0, -4);
            $stateid = $this->Auth->User("state_id");
            $language = $this->Session->read("sess_langauge");
            $this->set('laug', $language);
            $created_date = date('Y/m/d');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $officerecord = $this->office->query("select distinct of.*,of.office_name_ll,of.office_name_en,of.dept_id,of.flat,of.building,of.road,of.locality,of.city,
                                                of.taluka_id,of.district_id,of.state_id,of.pincode,of.officc_contact_no,of.office_email_id,
                                                of.reporting_office_id,of.shift_id,of.hierarchy_id,of.id,of.locality,
                                                
                                                        dep.dept_name_en,of.office_name_en,of.city,state.state_name_en,dis.district_name_en from ngdrstab_mst_office of
                                                        join ngdrstab_mst_department dep on dep.dept_id=of.dept_id 
                                                        join ngdrstab_conf_admblock1_state state on state.state_id=of.state_id
                                                        join ngdrstab_conf_admblock3_district dis on dis.district_id=of.district_id");

            $this->set('officerecord', $officerecord);
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('hierarchydata', ClassRegistry::init('officehierarchy')->find('list', array('fields' => array('hierarchy_id', 'hierarchy_desc_' . $language), 'order' => array('hierarchy_desc_' . $language => 'ASC'))));
            $this->set('reportingofficedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_name_' . $language), 'order' => array('office_name_' . $language => 'ASC'))));
            $this->set('department', ClassRegistry::init('department')->find('list', array('fields' => array('dept_id', 'dept_name_' . $language), 'order' => array('dept_name_' . $language => 'ASC'))));
            $this->set('State', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $language), 'order' => array('state_name_' . $language => 'ASC'))));
            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $language), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $language), 'order' => array('taluka_name_' . $language => 'ASC'))));
            $this->set('officesift', ClassRegistry::init('officeshift')->find('list', array('fields' => array('shift_id', 'desc_' . $language), 'order' => array('desc_' . $language => 'ASC'))));
            $this->set('timeslot', ClassRegistry::init('timeslot')->find('list', array('fields' => array('slot_id', 'slot_time_minute'))));

            $this->set('village', ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('village_id', 'village_name_' . $language), 'order' => array('village_name_' . $language => 'ASC'))));

            $fieldlist = array();

            $fieldlist['dept_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['office_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_maxlength20';
                } else {
                    //list for all unicode fieldsis_alphaspacemaxlenghth
                    $fieldlist['office_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }

            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $fieldlist['flat']['text'] = 'is_alphanumspacedash';
            $fieldlist['building']['text'] = 'is_alphanumspacedashdotslash';
            $fieldlist['road']['text'] = 'is_alphanumspacedashdotcommaroundbrackets';
            $fieldlist['locality']['text'] = 'is_alphanumspacedashdotcommaroundbrackets';
            $fieldlist['city']['text'] = 'is_alphaspace';
            $fieldlist['pincode']['text'] = 'is_pincode_empty';
            $fieldlist['officc_contact_no']['text'] = 'is_mobileindian';
            $fieldlist['office_email_id']['text'] = 'is_email';

            $fieldlist['reporting_office_id']['select'] = 'is_select_req';
            $fieldlist['hierarchy_id']['select'] = 'is_select_req';
            $fieldlist['shift_id']['select'] = 'is_select_req';
            $fieldlist['slot_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);

            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);

            if ($this->request->is('post')) {
//                  pr($this->request->data);exit;
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $duplicateflag = 'S';
                    $this->request->data['officenew']['req_ip'] = $this->request->clientIp();
                    $this->request->data['officenew']['user_id'] = $userid;
                    $this->request->data['officenew']['created_date'] = $created_date;

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['officenew']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
//                    pr($this->request->data['office']);exit;

                    $this->request->data['officenew'] = $this->istrim($this->request->data['officenew']);
                    $errarr = $this->validatedata($this->request->data['officenew'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {

                        $duplicate['Table'] = 'ngdrstab_mst_office';
                        $duplicate['Fields'] = array('office_name_en', 'office_name_ll');
                        $duplicate['Action'] = $duplicateflag; //U    
                        $duplicate['PrimaryKey'] = 'id';
                        $checkd = $this->check_duplicate($duplicate, $this->request->data['officenew']);
                        if ($checkd) {
                            if ($this->office->save($this->request->data['officenew'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'officenew'));
                                $this->set('officerecord', $this->office->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        } else {
                            $this->Session->setFlash(__('lblduplicatemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'bank_branch'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {

            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_officenew($id = null) {
        try {

            $this->autoRender = false;
            $this->loadModel('office');

            if (isset($id) && is_numeric($id)) {

                $this->officenew()->id = $id;

                if ($this->office->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'officenew'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function ratefactor() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ratefactor');
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $language = $this->Session->read("sess_langauge");
            $this->set('laug', $language);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);


            $this->set('constuctiontype', ClassRegistry::init('constructiontype')->find('list', array('fields' => array('construction_type_id', 'construction_type_desc_' . $language), 'order' => array('construction_type_desc_en' => 'ASC'))));
            $this->set('depreciation', ClassRegistry::init('depreciation')->find('list', array('fields' => array('deprication_type_id', 'deprication_type_desc_' . $language), 'order' => 'deprication_type_id asc')));
            $ratefactor = $this->ratefactor->query("select a.*,b.construction_type_desc_$language,c.deprication_type_desc_$language
                               from ngdrstab_mst_rate_factor a
                               inner join ngdrstab_mst_construction_type b on b.construction_type_id=a.constructiontype_id
                               inner join ngdrstab_mst_depreciation_type c on c.deprication_type_id=a.depreciation_id");
            $this->set('ratefactor', $ratefactor);

            $fieldlist = array();

            $fieldlist['constructiontype_id']['select'] = 'is_select_req';
            $fieldlist['depreciation_id']['select'] = 'is_select_req';
            $fieldlist['rate_factor']['text'] = 'is_required,is_integerdecimalornot,is_maxlength10';
            $this->set('fieldlist', $fieldlist);
            //setting the error message to empty as it shows error at first time
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }

            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['ratefactor']['csrftoken']);
                $this->request->data['ratefactor']['state_id'] = $this->Auth->User("state_id");
                $this->request->data['ratefactor']['user_id'] = $this->Auth->User("user_id");
                //  $this->request->data['ratefactor']['created_date'] = date('Y/m/d');
                $this->request->data['ratefactor']['req_ip'] = $this->request->clientIp();
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
                if ($_POST['actiontype'] == '1') {
                    $check = $this->ratefactor->query("SELECT MAX(rate_factor_id) FROM ngdrstab_mst_rate_factor");
                    $ratefactorid = $check[0][0]['max'];
                    if ($ratefactorid != Null) {
                        $ratefactorid = $ratefactorid + 1;
                    } else {
                        $ratefactorid = 1;
                    }
                    $this->request->data['ratefactor']['rate_factor_id'] = $ratefactorid;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['ratefactor']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['ratefactor'] = $this->istrim($this->request->data['ratefactor']);

                    $errarr = $this->validatedata($this->request->data['ratefactor'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        if ($this->ratefactor->save($this->request->data['ratefactor'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'ratefactor'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                    if ($_POST['actiontype'] == 2) {
                        $this->redirect(array('controller' => 'Masters', 'action' => 'ratefactor'));
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function ratefactor_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('ratefactor');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->ratefactor->id = $id;
                if ($this->ratefactor->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'ratefactor'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function extintfielddetails() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('extinterfacefielddetails');
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $user_id = $this->Session->read("session_user_id");
            $stateid = $this->Auth->User("state_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->set('interface', ClassRegistry::init('external_interface')->find('list', array('fields' => array('interface_id', 'interface_desc_en'), 'order' => array('interface_desc_en' => 'ASC'))));
            $interfacerecord = $this->extinterfacefielddetails->query("select a.*,b.interface_desc_en
                               from ngdrstab_mst_extinterface_details a
                               inner join ngdrstab_mst_external_interface b on b.interface_id=a.interface_id");
            $this->set('interfacerecord', $interfacerecord);
            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['interface_id']['select'] = 'is_select_req';
            $fieldlist['ext_interface_param_fld']['text'] = 'is_required,is_alphaspace';
            $fieldlist['ext_interface_param_fld_type']['text'] = 'is_required,is_alphaspace,is_maxlength255';
            $fieldlist['ext_interface_param_fld_length']['text'] = 'is_required,is_numeric';
            $fieldlist['ext_interface_param_inout_type']['text'] = 'is_required,is_alphaspace,is_maxlength255';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['extintfielddetails']['csrftoken']);

                $this->request->data['extintfielddetails']['user_id'] = $this->Auth->User("user_id");
                // $this->request->data['extintfielddetails']['created_date'] = $created_date;
                $this->request->data['extintfielddetails']['req_ip'] = $this->request->clientIp();
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $check = $this->extinterfacefielddetails->query("SELECT MAX(ext_interface_param_id) FROM ngdrstab_mst_extinterface_details");
                    $extid = $check[0][0]['max'];
                    if ($extid != Null) {
                        $extid = $extid + 1;
                    } else {
                        $extid = 1;
                    }
                    $this->request->data['extintfielddetails']['ext_interface_param_id'] = $extid;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['extintfielddetails']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['extintfielddetails'] = $this->istrim($this->request->data['extintfielddetails']);
                    $errarr = $this->validatedata($this->request->data['extintfielddetails'], $fieldlist);
                    if ($this->ValidationError($errarr)) {
                        if ($this->extinterfacefielddetails->save($this->request->data['extintfielddetails'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'extintfielddetails'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                        if ($actiontype == 2) {
                            $this->redirect(array('controller' => 'Masters', 'action' => 'extintfielddetails'));
                        }
//                        if ($actiontype == '3') {
//                            $this->set('actiontypeval', $actiontype);
//                            if ($hfid != NULL) {
//                                $this->extinterfacefielddetails->id = $hfid;
//                                if ($this->extinterfacefielddetails->delete()) {
//                                    $this->Session->setFlash(__('lbldeletemsg'));
//                                    $this->redirect(array('controller' => 'Masters', 'action' => 'extintfielddetails'));
//                                } else {
//                                    $this->Session->setFlash(__('lblnotdeletemsg'));
//                                }
//                            }
//                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_extintfielddetails($id = null) {
        $this->autoRender = false;
        $this->loadModel('extinterfacefielddetails');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->extinterfacefielddetails->id = $id;
                if ($this->extinterfacefielddetails->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'extintfielddetails'));
                }
            }
        } catch (exception $ex) {
            
        }
    }

    public function officehierarchynew() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('officehierarchy');
            $this->loadModel('mainlanguage');
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $language = $this->Session->read('sess_langauge');
            $this->set('laug', $language);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id'))), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $stateid = $this->Auth->User('state_id');
            $local_langauge = $this->mainlanguage->find('all', array('conditions' => array('state_id' => $stateid), 'order' => array('id' => 'ASC')));
            $this->set('language2', $local_langauge);
            $this->set('officname', ClassRegistry::init('officehierarchy')->find('list', array('fields' => array('hierarchy_id', 'hierarchy_desc_' . $language), 'order' => array('hierarchy_desc_en' => 'ASC'))));
            $officehrcy = $this->officehierarchy->query("select a.*,b.hierarchy_desc_en as aen,b.hierarchy_desc_ll as all,
                                                        b.hierarchy_desc_ll1 as all1,b.hierarchy_desc_ll2 as all2,b.hierarchy_desc_ll3 as all3,b.hierarchy_desc_ll4 as all4
                                                        from ngdrstab_mst_office_hierarchy a
                                                        left outer join  ngdrstab_mst_office_hierarchy b on a.hierarchy_report_id=b.hierarchy_id
                                                        order by a.hierarchy_id");
            $this->set('officehrcy', $officehrcy);
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['hierarchy_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedotroundbrackets,is_maxlength100';
                } else {
                    $fieldlist['hierarchy_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['hierarchy_report_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['officehierarchynew']['csrftoken']);
                $this->request->data['officehierarchynew']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['officehierarchynew']['user_id'] = $this->Auth->User('user_id');
                //  $this->request->data['officehierarchynew']['created_date'] = date('Y/m/d H:i:s');
                $this->request->data['officehierarchynew']['req_ip'] = $this->request->clientIp();
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
                if ($_POST['actiontype'] == '1') {
                    $check = $this->officehierarchy->query("SELECT MAX(hierarchy_id) FROM ngdrstab_mst_office_hierarchy");
                    $hierarchy_id = $check[0][0]['max'];
                    if ($hierarchy_id != Null) {
                        $hierarchy_id = $hierarchy_id + 10;
                    } else {
                        $hierarchy_id = 10;
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['officehierarchynew']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $this->request->data['officehierarchynew']['hierarchy_id'] = $hierarchy_id;
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['officehierarchynew'] = $this->istrim($this->request->data['officehierarchynew']);
                    $errarr = $this->validatedata($this->request->data['officehierarchynew'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        if ($this->officehierarchy->save($this->request->data['officehierarchynew'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'officehierarchynew'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'officehierarchynew'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function officehierarchynew_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('officehierarchy');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->officehierarchy->id = $id;
                if ($this->officehierarchy->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'officehierarchynew'));
                }
            }
        } catch (exception $ex) {
            
        }
    }

    public function operator() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('operators');
            $this->loadModel('mainlanguage');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);


            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $local_langauge = $this->mainlanguage->find('all', array('conditions' => array('state_id' => $stateid), 'order' => array('id' => 'ASC')));
            $this->set('language2', $local_langauge);

            $operator = $this->operators->query("select * from ngdrstab_mst_operators");

            $this->set('operator', $operator);

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['operator']['csrftoken']);
                $this->request->data['operators']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['operators']['user_id'] = $this->Auth->User('user_id');
                // $this->request->data['operators']['created_date'] = date('Y/m/d H:i:s');
                $this->request->data['operators']['req_ip'] = $_SERVER['REMOTE_ADDR'];

                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);

                if ($_POST['actiontype'] == '1') {
//                    $check = $this->operator->query("SELECT MAX(operator_id) FROM ngdrstab_mst_operators");
//                    $operator_id = $check[0][0]['max'];
//                    if($operator_id != Null){
//                        $operator_id = $operator_id + 1;
//                    } else {
//                        $operator_id = 1;
//                    }

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['operator']['operator_id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        //$this->request->data['operators']['operator_id'];
                        $actionvalue = "lblsavemsg";
                    }

//                        pr($this->request->data); exit;
                    if ($this->operators->save($this->request->data['operator'])) {
                        $this->Session->setFlash(__($actionvalue));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'operator'));
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'operator'));
                }
                if ($_POST['actiontype'] == '3') {
                    if ($_POST['hfid'] != NULL) {

                        if ($this->operators->delete($_POST['hfid'])) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'operator'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function document_status_desc() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('document_status_description');

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('document_status_descriptionrecord', $this->document_status_description->find('all'));
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['document_status_description']['req_ip'] = $req_ip;
            $this->request->data['document_status_description']['user_id'] = $user_id;
            // $this->request->data['document_status_description']['created_date'] = $created_date;
            $this->request->data['document_status_description']['state_id'] = $stateid;
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['document_status_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['document_status_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            //this array of error is set here to display those correspondent fields error  in the ctp.
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['document_status_description']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['document_status_description']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['document_status_description'] = $this->istrim($this->request->data['document_status_description']);
                        $errarr = $this->validatedata($this->request->data['document_status_description'], $fieldlist);
                        if ($this->ValidationError($errarr)) {
                            if ($this->document_status_description->save($this->request->data['document_status_description'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'document_status_desc'));
                                $this->set('document_status_descriptionrecord', $this->document_status_description->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_document_status_desc($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('document_status_description');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'document_status_description') {
                $this->document_status_description->id = $id;
                if ($this->document_status_description->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'document_status_desc'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function employee_office_incharge_link() {
        try {
            $this->check_role_escalation();
            $this->loadModel('employee');
            $this->loadModel('emp_office_link');
            $this->loadModel('office');
            $this->loadModel('State');

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');


            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->employee->virtualFields = array(
                'full_name' => "CONCAT(employee.emp_fname, ' ', employee.emp_lname)"
            );
            $emp = $this->employee->find('list', array('fields' => array('employee.emp_id', 'employee.full_name')));
            $this->set('emp', $emp);


            $this->set('state', $state[0]['State']['state_name_en']);
            $office = $this->office->find('list', array('fields' => array('office.office_id', 'office.office_name_' . $language)));
            $this->set('office', $office);

            $office_link = $this->emp_office_link->query('select DISTINCT eo.emp_id,e.emp_fname,e.emp_mname,e.emp_lname ,eo.jurisdiction_date from ngdrstab_mst_emp_office_link eo ,ngdrstab_mst_employee e where eo.emp_id=e.emp_id');

            $this->set('office_link', $office_link);

            $fieldlist = array();
            $fieldlist['emp_id']['select'] = 'is_select_req';
            //  $fieldlist['office_id']['checkbox'] = 'is_select_req';
            $fieldlist['jurisdiction_date']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));



            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['officeincharge_link']['csrftoken']);

                $state_id = $this->Auth->User('state_id');
                $user_id = $this->Auth->User('user_id');
                $created_date = date('Y/m/d H:i:s');
                $req_ip = $_SERVER['REMOTE_ADDR'];

                $c = count($this->request->data['officeincharge_link']['office_id']);

                for ($i = 0; $i < $c; $i++) {
                    $this->emp_office_link->deleterecord($this->request->data['officeincharge_link']['emp_id']);

                    $data[$i] = array('emp_id' => $this->request->data['officeincharge_link']['emp_id'],
                        'office_id' => $this->request->data['officeincharge_link']['office_id'][$i],
                        'user_id' => $user_id,
                        'state_id' => $state_id,
                        'jurisdiction_date' => date('Y-m-d', strtotime(str_replace('/', '-', $this->request->data['officeincharge_link']['jurisdiction_date']))),
                        // 'created_date' => $created_date,
                        'req_ip' => $req_ip
                    );

//             
                }
                if (isset($data)) {
                    $this->emp_office_link->saveAll($data);

                    $this->Session->setFlash(__('lblsavemsg'));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'employee_office_incharge_link'));
                } else {
                    $this->Session->setFlash(__('Record Already exist'));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'employee_office_incharge_link'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    function delete_office_emplink() {
        try {
            if (isset($_POST['emp_id'])) {
                $this->loadModel('emp_office_link');
                if ($this->emp_office_link->deleterecord($_POST['emp_id'])) {
                    echo 1;
                } else {
                    echo 0;
                }
                exit;
            }
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    function get_officeid() {
        try {
            if (isset($_POST['emp_id'])) {
                $this->loadModel('emp_office_link');

                $result = $this->emp_office_link->query('select office_id from ngdrstab_mst_emp_office_link where emp_id=?', array(trim($_POST['emp_id'])));
                $a = array();
                for ($i = 0; $i < count($result); $i++) {
                    $a[$i] = $result[$i][0]['office_id'];
                }

                $str = implode(", ", $a);
                echo $str;
                exit;
            }
        } catch (Exception $ex) {
            pr($ex);
            exit;
        }
    }

    public function timeslot() {
        try {
            $this->check_role_escalation();
            $this->loadModel('timeslot');
            $this->loadModel('State');
            $this->loadModel('User');

            $this->set('selectoffice', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', 'S');
            $this->set('timeslotrecord', NULL);
            $this->loadModel('District');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $District = $this->District->find('list', array('fields' => array('id', 'district_name_en'), 'order' => array('district_name_en' => 'ASC')));
            $this->set('District', $District);

            $timeslotrecord = $this->timeslot->query("select a.district_id,a.id, a.slot_time_minute,b.district_name_en from ngdrstab_mst_timeslot a
                                                 inner join ngdrstab_conf_admblock3_district b on b.id=a.district_id");

            $this->set('timeslotrecord', $timeslotrecord);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->request->data['timeslot']['req_ip'] = $this->request->clientIp();
            $this->request->data['timeslot']['user_id'] = $user_id;
            //$this->request->data['timeslot']['created_date'] = $created_date;
            $this->request->data['timeslot']['state_id'] = $stateid;
            //adding field list dynamically from language list
            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['slot_time_minute']['text'] = 'is_required,is_positiveinteger,is_maxlengthtimeslot5';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['timeslot']['csrftoken']);


                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['timeslot']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['timeslot'] = $this->istrim($this->request->data['timeslot']);
                        $errarr = $this->validatedata($this->request->data['timeslot'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->timeslot->save($this->request->data['timeslot'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'timeslot'));
                                $timeslotrecord = $this->timeslot->find('all');
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
            }
            $this->set_csrf_token();
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function timeslot_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('timeslot');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->timeslot->id = $id;
                if ($this->timeslot->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'timeslot'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function reason() {
        try {
            $this->check_role_escalation();
            $this->loadModel('reason');
            $this->loadModel('State');
            $this->loadModel('User');

            $this->set('selectoffice', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', 'S');
            $this->set('reasonrecord', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');

            $reasonrecord = $this->reason->find('all');
            $this->set('reasonrecord', $reasonrecord);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);


            $this->request->data['reason']['req_ip'] = $req_ip;
            $this->request->data['reason']['user_id'] = $user_id;
            //  $this->request->data['reason']['created_date'] = $created_date;
            $this->request->data['reason']['state_id'] = $stateid;
            //adding field list dynamically from language list
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['reason_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['reason_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['reason']['csrftoken']);

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['reason']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['reason'] = $this->istrim($this->request->data['reason']);
                        $errarr = $this->validatedata($this->request->data['reason'], $fieldlist);
//                        pr($this->request->data['reason']['reason_desc_en']);exit; 
//                        $reason = $this->request->data['reason']['reason_desc_en'];
//                        $reason1 = $this->reason->query("select reason_desc_en from ngdrstab_mst_reasons_for_skip_valuation where reason_desc_en like '%$reason%' ");

                        if ($this->ValidationError($errarr)) {
                            $duplicate['Table'] = 'ngdrstab_mst_reasons_for_skip_valuation';
                            $duplicate['Fields'] = array('reason_desc_en', 'reason_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U 
                            $duplicate['PrimaryKey'] = 'id';

                            $checkd = $this->check_duplicate($duplicate, $this->request->data['reason']);
                            if ($checkd) {
                                if ($this->reason->save($this->request->data['reason'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'reason'));
                                    $this->set('reasonrecord', $this->reason->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//   
                        }
                        if ($actiontype == 3) {
                            $this->set('hfupdateflag', 'Y');
                        }

                        if ($actiontype == '4') {

                            $this->set('actiontypeval', $actiontype);
                            if ($hfid != NULL) {
                                $this->reason->id = $hfid;
                                if ($this->reason->delete()) {
                                    $this->Session->setFlash(__('lbldeletemsg'));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'reason'));
                                } else {
                                    $this->Session->setFlash(__('lblnotdeletemsg'));
                                }
                            }
                            $reasonrecord = $this->reason->find('all');
                        }
                        if ($actiontype == '2') {
                            $this->set('actiontypeval', $actiontype);
                            $reasonrecord = $this->reason->find('all');
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_reason($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('reason');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'officehierarchy') {
                $this->reason->id = $id;
                if ($this->reason->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'reason'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function statelogoupload() {
        try {
            $this->check_role_escalation();
            $this->loadModel('state_logo');
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfdelete', NULL);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);

            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);

            $this->set('state_list', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $language), 'order' => array('state_name_en' => 'ASC'))));

            $statelogo = $this->state_logo->query("select a.*,b.state_name_$language
                                                        from ngdrstab_conf_state_logo a
                                                        inner join  ngdrstab_conf_admblock1_state b on a.state_id=b.state_id
                                                        order by b.state_name_$language");
            $this->set('statelogo', $statelogo);



            $fieldlist = array();

            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['logo_path']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['state_logo']['csrftoken']);
                if (!empty($this->data)) {
                    if ($_POST['actiontype'] == '1') {
                        $stateid = $this->data['state_logo']['state_id'];
                        $statename = $this->state_logo->query("SELECT state_name_en FROM ngdrstab_conf_admblock1_state where state_id=?", array($stateid));
                        $statename = $statename[0][0]['state_name_en'];
                        //Check if image has been uploaded
                        if (!empty($this->data['state_logo']['logo_path']['name'])) {

                            if ($this->image_validation($this->data['state_logo']['logo_path'])) {

                                $file = $this->data['state_logo']['logo_path']; //put the  data into a var for easy use
                                $ext = substr(strtolower(strrchr($file['name'], '.')), 1); //get the extension
                                $arr_ext = array('jpg', 'jpeg', 'gif', 'png'); //set allowed extensions

                                if (in_array($ext, $arr_ext)) {
                                    $temp = explode(".", $file['name']);
                                    $newfilename = $stateid . '_' . $statename . '.' . end($temp);
//                                move_uploaded_file($_FILES["file"]["tmp_name"], "../img/imageDirectory/" . $newfilename);
//                             pr($file);
//                             pr($newfilename);exit;
                                    //do the actual uploading of the file. First arg is the tmp name, second arg is
                                    //where we are putting it                        
                                    if (move_uploaded_file($file['tmp_name'], WWW_ROOT . 'img/state_logos_img' . DS . $newfilename)) {

                                        $file['name'] = 'state_logos_img/' . $newfilename;
                                        //prepare the filename for database entry
                                        $this->request->data['state_logo']['logo_path'] = $file['name'];
                                        if ($this->request->data['hfupdateflag'] == 'Y') {
                                            $this->request->data['state_logo']['id'] = $this->request->data['hfid'];
                                            $actionvalue = "Updated";
                                        } else {
                                            $actionvalue = "Uploaded";
                                        }
                                        if ($this->state_logo->save($this->request->data['state_logo'])) {
                                            $this->Session->setFlash(__("The File $actionvalue  Successfully"), 'default', array('class' => 'success'));
                                            $this->redirect('statelogoupload');
                                        } else {
                                            $this->Session->setFlash(__("The data could not be $actionvalue. Please, try again."), 'default', array('class' => 'errors'));
                                        }
                                    }
                                }
                            } else {
                                $this->Session->setFlash(__('Image format not suported'));
                            }
                        } else {
                            $this->Session->setFlash(__('The data could not be saved. Please, Choose your image.'), 'default', array('class' => 'errors'));
                        }
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'statelogoupload'));
                }
                if ($_POST['actiontype'] == '3') {
                    if ($_POST['hfid'] != NULL) {
                        $path = $this->state_logo->query("SELECT logo_path FROM ngdrstab_conf_state_logo where id=" . $_POST['hfid']);
                        $path = 'img/' . $path[0][0]['logo_path'];
                        $delete = $this->state_logo->query("delete from ngdrstab_conf_state_logo where id =" . $_POST['hfid']);
                        if ($delete == NULL && unlink($path)) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'statelogoupload'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function statelogo() {

        $this->loadModel('state_logo');
        $this->autoRender = false;
        $state_id = $this->Auth->user('state_id');

        $langaugelist = $this->state_logo->query("select S.state_name_en,A.logo_path from ngdrstab_conf_state_logo A 
                inner join ngdrstab_conf_admblock1_state S on S.state_id=A.state_id 
inner join ngdrs_current_state    as cstate ON cstate.state_id= A.state_id          
");
        //pr($langaugelist);
        if ($langaugelist) {
            return $langaugelist[0][0];
        } else {
            return NULL;
        }
    }

    function conf_reg_info() {
        $this->loadModel('State');
        $this->loadModel('conf_reg_bool_info');
        $language = $this->Session->read('sess_langauge');
        $this->set('language', $language);
        $stateid = $this->Auth->User('state_id');
        if ($this->Session->read("user_role_id") == '999906') {
            $conf_info = $this->conf_reg_bool_info->find('all', array('conditions' => array('state_id' => $stateid, 'delete_flag' => 'N', 'admin_flag' => 'Y'), 'order' => 'display_order ASC'));
        } else {
            $conf_info = $this->conf_reg_bool_info->find('all', array('conditions' => array('state_id' => $stateid, 'delete_flag' => 'N'), 'order' => 'display_order ASC'));
        }
        $this->set('conf_info', $conf_info);

        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        //languages are loaded firstly from config (from table)
        $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                array(
                    'table' => 'ngdrstab_conf_language',
                    'alias' => 'conf',
                    'type' => 'inner',
                    'foreignKey' => false,
                    'conditions' => array('conf.language_id = mainlanguage.id')
                )), 'order' => 'conf.language_id ASC'));
        $this->set('languagelist', $languagelist);

        $fieldlist = array();
        $fieldlist['info_value']['text'] = 'is_numeric';
        $fieldlist['display_order']['text'] = 'is_numeric';
        $this->set('fieldlist', $fieldlist);
        $this->set('result_codes', $this->getvalidationruleset($fieldlist));


        if ($this->request->is('post')) {
            $this->check_csrf_token($this->request->data['config_boolean']['csrftoken']);
            $info = $this->conf_reg_bool_info->find('first', array('conditions' => array('reginfo_id' => $_POST['info_id'])));
            if ($_POST['is_boolean_' . $_POST['info_id']] == 'Y') {
                $data = array('info_value' => $_POST['info_value'],
                    'display_order' => $_POST['display_order'],
                    'is_boolean' => $_POST['is_boolean_' . $_POST['info_id']],
                    'conf_bool_value' => $_POST['conf_bool_value_' . $_POST['info_id']]);
            } else {
                $data = array('info_value' => $_POST['info_value'],
                    'display_order' => $_POST['display_order'],
                    'is_boolean' => $_POST['is_boolean_' . $_POST['info_id']]
                );
            }

            $this->conf_reg_bool_info->id = $info['conf_reg_bool_info']['id'];
//            pr($this->request->data);exit;
            if ($this->conf_reg_bool_info->save($data)) {
                $this->Session->setFlash(__('lbleditmsg'));
                $this->redirect(array('controller' => 'Masters', 'action' => 'conf_reg_info'));
            }
        }
        $this->set_csrf_token();
    }

    public function behavioural() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('Behavioural');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'),
                'joins' => array(array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $this->set('behaviouralrecord', $this->Behavioural->find('all'));
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['Behavioural']['req_ip'] = $req_ip;
            $this->request->data['Behavioural']['user_id'] = $user_id;
            //  $this->request->data['Behavioural']['created_date'] = $created_date;
            $this->request->data['Behavioural']['state_id'] = $stateid;
            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['behavioral_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength200';
                } else {
                    $fieldlist['behavioral_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to200";
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Behavioural']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Behavioural']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['Behavioural'] = $this->istrim($this->request->data['Behavioural']);
                        $errarr = $this->validatedata($this->request->data['Behavioural'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_conf_behavioral';
                            $duplicate['Fields'] = array('behavioral_desc_en', 'behavioral_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U   
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['Behavioural']);
                            if ($checkd) {
                                if ($this->Behavioural->save($this->request->data['Behavioural'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'Behavioural'));
                                    $this->set('unitrecord', $this->Behavioural->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_behavioural($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('Behavioural');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'behavioural') {
                $this->Behavioural->id = $id;
                if ($this->Behavioural->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'Behavioural'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

//    public function behaviouraldetails() {
//        try {
//            $this->check_role_escalation();
//            $this->loadModel('State');
//            $this->loadModel('User');
//            $this->loadModel('BehaviouralDetails');
////              $this->loadModel('Behavioural');
//            $this->loadModel('NGDRSErrorCode');
//            $result_codes = $this->NGDRSErrorCode->find("all");
//            $this->set('result_codes', $result_codes);
//            $this->loadModel('language');
//            $this->loadModel('mainlanguage');
//            //languages are loaded firstly from config (from table)
//            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
//                    array(
//                        'table' => 'ngdrstab_conf_language',
//                        'alias' => 'conf',
//                        'type' => 'inner',
//                        'foreignKey' => false,
//                        'conditions' => array('conf.language_id = mainlanguage.id')
//                    )), 'order' => 'conf.language_id ASC'
//            ));
//            $this->set('languagelist', $languagelist);
//            $Behaviourallist = ClassRegistry::init('Behavioural')->find('list', array('fields' => array('Behavioural.behavioral_id', 'Behavioural.behavioral_desc_en'), 'order' => array('behavioral_desc_en' => 'ASC')));
//            $this->set('Behaviourallist', $Behaviourallist);
//
//            $behaviouraldetailsrecord = $this->BehaviouralDetails->query("select distinct a.behavioral_details_desc_en,a.behavioral_details_desc_ll,a.behavioral_details_desc_ll1 ,a.behavioral_details_desc_ll2,a.behavioral_details_desc_ll3,a.behavioral_details_desc_ll4,a.id,a.behavioral_id,b.behavioral_desc_en from ngdrstab_conf_behavioral_details a
//                                                 inner join ngdrstab_conf_behavioral b on b.behavioral_id=a.behavioral_id");
//            $this->set('behaviouraldetailsrecord', $behaviouraldetailsrecord);
//            $this->set('actiontypeval', NULL);
//            $this->set('hfactionval', NULL);
//            $this->set('hfid', NULL);
//            $this->set('hfupdateflag', NULL);
//            $user_id = $this->Auth->User("user_id");
//            $stateid = $this->Auth->User("state_id");
//            $laug = $this->Session->read("sess_langauge");
//            $this->set('laug', $laug);
//            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
//            $this->set('state', $state[0]['State']['state_name_' . $laug]);
//            $date = date('Y/m/d H:i:s');
//            $created_date = date('Y/m/d');
//            $req_ip = $_SERVER['REMOTE_ADDR'];
//            $this->request->data['BehaviouralDetails']['req_ip'] = $req_ip;
//            $this->request->data['BehaviouralDetails']['user_id'] = $user_id;
//            // $this->request->data['BehaviouralDetails']['created_date'] = $created_date;
//            $this->request->data['BehaviouralDetails']['state_id'] = $stateid;
//            $fieldlist = array();
//            $fieldlist['behavioral_id']['select'] = 'is_select_req';
//            foreach ($languagelist as $languagecode) {
//                if ($languagecode['mainlanguage']['language_code'] == 'en') {
//                    $fieldlist['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength200';
//                } else {
//                    $fieldlist['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
//                }
//            }
//            $this->set('fieldlist', $fieldlist);
//            foreach ($fieldlist as $key => $valrule) {
//                $errarr[$key . '_error'] = "";
//            }
//            $this->set("errarr", $errarr);
//            if ($this->request->is('post')) {
//              
//                $actiontype = $_POST['actiontype'];
//                $hfid = $_POST['hfid'];
//                $this->set('hfid', $hfid);
//                $hfactionval = $_POST['hfaction'];
//                if ($actiontype == '1') {
//                    $this->set('actiontypeval', $actiontype);
//                    $this->set('hfactionval', $hfactionval);
//
//                    if ($hfactionval == 'S') {
//                        if ($this->request->data['hfupdateflag'] == 'Y') {
//                            $this->request->data['BehaviouralDetails']['id'] = $this->request->data['hfid'];
//                            $actionvalue = "lbleditmsg";
//                        } else {
//                            $actionvalue = "lblsavemsg";
//                        }
//                        $this->request->data['BehaviouralDetails'] = $this->istrim($this->request->data['BehaviouralDetails']);
//                        $errarr = $this->validatedata($this->request->data['BehaviouralDetails'], $fieldlist);
//                        $flag = 0;
//                        foreach ($errarr as $dd) {
//                            if ($dd != "") {
//                                $flag = 1;
//                            }
//                        }
//                        if ($flag == 1) {
//                            $this->set("errarr", $errarr);
//                        } else {
//                            if ($this->BehaviouralDetails->save($this->request->data['BehaviouralDetails'])) {
//                                $this->Session->setFlash(__($actionvalue));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'behaviouraldetails'));
//                                $this->set('behaviouraldetailsrecord', $this->BehaviouralDetails->find('all'));
//                            } else {
//                                $this->Session->setFlash(__('lblnotsavemsg'));
//                            }
//                        }
//                    }
//                }
//                if ($actiontype == 2) {
//                    $this->set('hfupdateflag', 'Y');
//                }
//            }
//            $this->Session->write("randamkey", rand(111111, 999999));
//        } catch (Exception $exc) {
//            $this->Session->setFlash(
//                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
//            );
//            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
//        }
//
//        $this->set_csrf_token();
//    }

    public function behaviouraldetails() {
        try {
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('BehaviouralDetails');
//              $this->loadModel('Behavioural');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $Behaviourallist = ClassRegistry::init('Behavioural')->find('list', array('fields' => array('Behavioural.behavioral_id', 'Behavioural.behavioral_desc_en'), 'order' => array('behavioral_desc_en' => 'ASC')));
            $this->set('Behaviourallist', $Behaviourallist);

            $behaviouraldetailsrecord = $this->BehaviouralDetails->query("select distinct a.behavioral_details_desc_en,a.behavioral_details_desc_ll,a.behavioral_details_desc_ll1 ,a.behavioral_details_desc_ll2,a.behavioral_details_desc_ll3,a.behavioral_details_desc_ll4,a.id,a.behavioral_id,b.behavioral_desc_en from ngdrstab_conf_behavioral_details a
                                                 inner join ngdrstab_conf_behavioral b on b.behavioral_id=a.behavioral_id");
            $this->set('behaviouraldetailsrecord', $behaviouraldetailsrecord);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);

            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['BehaviouralDetails']['req_ip'] = $req_ip;
            $this->request->data['BehaviouralDetails']['user_id'] = $user_id;
            // $this->request->data['BehaviouralDetails']['created_date'] = $created_date;
            $this->request->data['BehaviouralDetails']['state_id'] = $stateid;
            $fieldlist = array();
            $fieldlist['behavioral_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength200';
                } else {
                    $fieldlist['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['BehaviouralDetails']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['BehaviouralDetails']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['BehaviouralDetails'] = $this->istrim($this->request->data['BehaviouralDetails']);
                        $errarr = $this->validatedata($this->request->data['BehaviouralDetails'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_conf_behavioral_details';
                            $duplicate['Fields'] = array('behavioral_details_desc_en', 'behavioral_details_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U    
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['BehaviouralDetails']);
                            if ($checkd) {
                                if ($this->BehaviouralDetails->save($this->request->data['BehaviouralDetails'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'BehaviouralDetails'));
                                    $this->set('behaviouraldetailsrecord', $this->BehaviouralDetails->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_behavioural_details($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('BehaviouralDetails');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'behavioural') {
                $this->BehaviouralDetails->id = $id;
                if ($this->BehaviouralDetails->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'behaviouraldetails'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function behavioralpattens() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('BehavioralPattens');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $Behaviourallist = ClassRegistry::init('Behavioural')->find('list', array('fields' => array('Behavioural.behavioral_id', 'Behavioural.behavioral_desc_en'), 'order' => array('behavioral_desc_en' => 'ASC')));
            $this->set('Behaviourallist', $Behaviourallist);
            $Behaviouraldetaillist = ClassRegistry::init('BehaviouralDetails')->find('list', array('fields' => array('BehaviouralDetails.behavioral_details_id', 'BehaviouralDetails.behavioral_details_desc_en'), 'order' => array('behavioral_details_desc_en' => 'ASC')));
            $this->set('Behaviouraldetaillist', $Behaviouraldetaillist);
            $behaviouralpattenrecord = $this->BehavioralPattens->query("select distinct a.behavioral_details_id, a.id,a.behavioral_id, a.pattern_desc_en,a.pattern_desc_ll, a.pattern_desc_ll1,a.pattern_desc_ll2,a.pattern_desc_ll3,a.pattern_desc_ll4, c.behavioral_details_desc_en, b.behavioral_desc_en from ngdrstab_conf_behavioral_patterns a
                                                 inner join ngdrstab_conf_behavioral b on b.behavioral_id=a.behavioral_id
                                                 inner join ngdrstab_conf_behavioral_details c on c.behavioral_details_id=a.behavioral_details_id");
            $this->set('behaviouralpattenrecord', $behaviouralpattenrecord);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $state = $this->State->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('state', $state[0]['State']['state_name_' . $laug]);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['behavioralpattens']['req_ip'] = $req_ip;
            $this->request->data['behavioralpattens']['user_id'] = $user_id;
            // $this->request->data['behavioralpattens']['created_date'] = $created_date;
            $this->request->data['behavioralpattens']['state_id'] = $stateid;
            $fieldlist = array();
            $fieldlist['behavioral_id']['select'] = 'is_select_req';
            $fieldlist['behavioral_details_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['pattern_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength200';
                } else {
                    $fieldlist['pattern_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['behavioralpattens']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $check = $this->BehavioralPattens->query("SELECT MAX(field_id) FROM ngdrstab_conf_behavioral_patterns");
                    $field_id = $check[0][0]['max'];
                    if ($field_id != Null) {
                        $field_id = $field_id + 1;
                    } else {
                        $field_id = 1;
                    }
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['behavioralpattens']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['behavioralpattens']['field_id'] = $field_id;
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['behavioralpattens'] = $this->istrim($this->request->data['behavioralpattens']);
                        $errarr = $this->validatedata($this->request->data['behavioralpattens'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_conf_behavioral_patterns';
                            $duplicate['Fields'] = array('pattern_desc_en', 'pattern_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U
                            $duplicate['PrimaryKey'] = 'id';

                            $checkd = $this->check_duplicate($duplicate, $this->request->data['behavioralpattens']);
                            if ($checkd) {
                                if ($this->BehavioralPattens->save($this->request->data['behavioralpattens'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'behavioralpattens'));
                                    $this->set('behaviouralpattenrecord', $this->BehavioralPattens->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_behavioural_pattens($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('BehavioralPattens');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'behavioural') {
                $this->BehavioralPattens->id = $id;
                if ($this->BehavioralPattens->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'behavioralpattens'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function local_governing_body() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('local_governing_body');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->set('governingbody', $this->local_governing_body->find('all'));
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->request->data['local_governing_body']['req_ip'] = $req_ip;
            $this->request->data['local_governing_body']['user_id'] = $user_id;
            // $this->request->data['local_governing_body']['created_date'] = $created_date;
            $this->request->data['local_governing_body']['state_id'] = $stateid;

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $fieldlist = array();
//              $fieldlist['behavioral_id']['select'] = 'is_numeric';


            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['class_description_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedash,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['class_description_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $fieldlist['class_type']['text'] = 'is_required,is_alpha,is_maxlength1';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr); //this array of error is set here to display those correspondent fields error  in the ctp.

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['local_governing_body']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['local_governing_body']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['local_governing_body'] = $this->istrim($this->request->data['local_governing_body']);
                        $errarr = $this->validatedata($this->request->data['local_governing_body'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_conf_admblock_local_governingbody';
                            $duplicate['Fields'] = array('class_description_en', 'class_description_ll');
                            $duplicate['Action'] = $duplicateflag; //U 
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['local_governing_body']);
                            if ($checkd) {
                                if ($this->local_governing_body->save($this->request->data['local_governing_body'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'local_governing_body'));
                                    $this->set('unitrecord', $this->local_governing_body->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                }
                if ($actiontype == 2) {
                    $this->set('hfupdateflag', 'Y');
                }

                if ($actiontype == '5') {
                    $this->set('actiontypeval', $actiontype);
                    $this->redirect(array('controller' => 'Masters', 'action' => 'local_governing_body'));
                    $this->set('local_governing_bodyrecord', $this->local_governing_body->find('all'));
                }
            }
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_local_governing_body($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('local_governing_body');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'local_governing_body') {
                $this->local_governing_body->id = $id;
                if ($this->local_governing_body->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'local_governing_body'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function ratesearch() {
        try {
            // $this->check_role_escalation();
            $this->loadModel('RateSearch');
            $this->set('actiontypeval', NULL);
            $this->set('hfsearch_id', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
//            $this->loadModel('NGDRSErrorCode');
//            $result_codes = $this->NGDRSErrorCode->find("all");
//            $this->set('result_codes', $result_codes);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);


            $this->set('Developedlandtypedata', ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('developed_land_types_id', 'developed_land_types_desc_en'), 'order' => array('developed_land_types_desc_en' => 'ASC'))));
            $this->set('Usagemainmaindata', ClassRegistry::init('Usagemainmain')->find('list', array('fields' => array('usage_main_catg_id', 'usage_main_catg_desc_en'), 'order' => array('usage_main_catg_desc_en' => 'ASC'))));

            $RateSearch = $this->RateSearch->query("select distinct r.village_id,r.usage_main_catg_id,r.usage_sub_catg_id,r.usage_sub_sub_catg_id,r.valutation_zone_id,
                                                        r.valutation_subzone_id,r.taluka_id,r.district_id,r.division_id,r.ulb_type_id,r.construction_type_id,
                                                        r.road_vicinity_id,r.usage_main_cat_id,r.search_id,r.developed_land_types_id,d.developed_land_types_desc_en, u.usage_main_catg_desc_en from ngdrstab_conf_rate_search r
                                                       inner join ngdrstab_mst_developed_land_types d on d.developed_land_types_id=cast(r.developed_land_types_id as numeric)
                                                       inner join ngdrstab_mst_usage_main_category u on u.usage_main_catg_id=r.usage_main_cat_id");
            $this->set('ratesearch', $RateSearch);
            $fieldlist = array();
            $fieldlist['developed_land_types_id']['select'] = 'is_select_req';
            $fieldlist['usage_main_cat_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['RateSearch']['csrftoken']);
//                pr($this->request->data);exit;
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfsearch_id', $_POST['hfsearch_id']);
                if ($_POST['actiontype'] == '1') {
                    $check = $this->RateSearch->query("SELECT MAX(developed_land_types_id) FROM ngdrstab_conf_rate_search");
                    $developed_land_types_id = $check[0][0]['max'];
                    if ($developed_land_types_id != Null) {
                        $developed_land_types_id = $developed_land_types_id + 1;
                    } else {
                        $developed_land_types_id = 1;
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['RateSearch']['search_id'] = $this->request->data['hfsearch_id'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $this->request->data['RateSearch']['developed_land_types_id'] = $developed_land_types_id;
                        $actionvalue = "lblsavemsg";
                    }
                    //  $this->request->data = $this->istrim($this->request->data);
                    $errarr = $this->validatedata($this->request->data['RateSearch'], $fieldlist);

                    //   pr($errarr);exit;
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {

                        if ($this->RateSearch->save($this->request->data)) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'ratesearch'));
                        } else {
                            $this->Session->setFlash(__("lblnotsavemsg"));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function ratesearch_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('RateSearch');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->RateSearch->id = $id;
                if ($this->RateSearch->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'ratesearch'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function locgovbodylist() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('corporationclasslist');
            $this->loadModel('mainlanguage');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $stateid = $this->Auth->User('state_id');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('corpclassdata', ClassRegistry::init('corporationclass')->find('list', array('fields' => array('ulb_type_id', 'class_description_' . $laug), 'order' => array('class_description_en' => 'ASC'))));

            $locgovbodylist = $this->corporationclasslist->query("select a.id,a.ulb_type_id,a.class_type,a.governingbody_name_en,
                            a.governingbody_name_ll,governingbody_name_ll1,governingbody_name_ll2,governingbody_name_ll3,
                            governingbody_name_ll4,b.class_description_$laug 
                            from ngdrstab_conf_admblock_local_governingbody_list a
                            left outer join ngdrstab_conf_admblock_local_governingbody b on b.ulb_type_id=a.ulb_type_id
                            where a.state_id=?", array($stateid));
            $this->set('locgovbodylist', $locgovbodylist);
//            pr($locgovbodylist);exit;
            $fieldlist = array();
            $fieldlist['ulb_type_id']['select'] = 'is_select_req';
            $fieldlist['class_type']['text'] = 'is_required,is_alpha,is_maxlength1';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['governingbody_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedashslash,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['governingbody_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['locgovbodylist']['csrftoken']);
                $this->request->data['locgovbodylist']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['locgovbodylist']['user_id'] = $this->Auth->User('user_id');
                // $this->request->data['locgovbodylist']['created_date'] = date('Y/m/d H:i:s');
                $this->request->data['locgovbodylist']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
//               pr($this->request->data);exit;
                if ($_POST['actiontype'] == '1') {
                    $duplicateflag = 'S';
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['locgovbodylist']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['locgovbodylist'] = $this->istrim($this->request->data['locgovbodylist']);
                    $errarr = $this->validatedata($this->request->data['locgovbodylist'], $fieldlist);

//                        PR($errarr);exit;
                    $flag = 0;
                    //check the array is empty or not
                    //is the error present or not if error present it will inccrease the flag by 1 else it will save data if error array is 0.
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    //if the error array consist of any of errors then process set  else save data
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
//                    pr($this->request->data);exit;
                        $duplicate['Table'] = 'ngdrstab_conf_admblock_local_governingbody_list';
                        $duplicate['Fields'] = array('governingbody_name_en', 'governingbody_name_ll');
                        $duplicate['Action'] = $duplicateflag; //U     
                        $duplicate['PrimaryKey'] = 'id';
                        $checkd = $this->check_duplicate($duplicate, $this->request->data['locgovbodylist']);
                        if ($checkd) {
                            if ($this->corporationclasslist->save($this->request->data['locgovbodylist'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'locgovbodylist'));
                                $this->set('unitrecord', $this->corporationclasslist->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        } else {
                            $this->Session->setFlash(__('lblduplicatemsg'));
                        }
                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'locgovbodylist'));
                }
//                if ($_POST['actiontype'] == '3') {
//                    if ($_POST['hfid'] != NULL) {
//                        $this->corporationclasslist->id = $_POST['hfid'];
//                        if ($this->corporationclasslist->delete()) {
//                            $this->Session->setFlash(__('lbldeletemsg'));
//                            $this->redirect(array('controller' => 'Masters', 'action' => 'locgovbodylist'));
//                        } else {
//                            $this->Session->setFlash(__('lblnotdeletemsg'));
//                        }
//                    }
//                }
            }
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }

        $this->set_csrf_token();
    }

    public function locgovbodylist_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('corporationclasslist');
        try {
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->corporationclasslist->id = $id;
                if ($this->corporationclasslist->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'locgovbodylist'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function upload_format() {
        try {
            $this->check_role_escalation();
            $this->loadModel('upload_file_format');
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->request->data['upload_file_format']['req_ip'] = $req_ip;
            $this->request->data['upload_file_format']['user_id'] = $user_id;
            //  $this->request->data['upload_file_format']['created_date'] = $created_date;
            $this->request->data['upload_file_format']['state_id'] = $stateid;
            $this->set('fileupload', $this->upload_file_format->find('all'));
            $fieldlist = array();
            $fieldlist['field_type']['text'] = 'is_required,is_alpha';
            $fieldlist['upload_size']['text'] = 'is_required,is_numeric';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            $actiontype = 0;

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['upload_file_format']['csrftoken']);
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
                if ($_POST['actiontype'] == '1') {
                    $duplicateflag = 'S';
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['upload_file_format']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $duplicate['Table'] = 'ngdrstab_mst_upload_format';
                    $duplicate['Fields'] = array('field_type', 'field_type');
                    $duplicate['Action'] = $duplicateflag; //U     
                    $duplicate['PrimaryKey'] = 'state_id';
                    $checkd = $this->check_duplicate($duplicate, $this->request->data['upload_file_format']);
                    if ($checkd) {
                        if ($this->upload_file_format->save($this->request->data['upload_file_format'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'upload_format'));
                            $this->set('fileupload', $this->upload_file_format->find('all'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    } else {
                        $this->Session->setFlash(__('lblduplicatemsg'));
                    }
                }
                if ($actiontype == '5') {
                    $this->set('actiontypeval', $actiontype);
                    $this->redirect(array('controller' => 'Masters', 'action' => 'upload_format'));
                    $this->set('fileupload', $this->upload_file_format->find('all'));
                }
                if ($_POST['actiontype'] == '4') {
                    if ($_POST['hfid'] != NULL) {
                        $this->upload_file_format->id = $_POST['hfid'];
                        if ($this->upload_file_format->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'upload_format'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function delete_upload_format($hfid = NULL) {
        $this->loadModel('upload_file_format');
        if ($hfid != NULL) {
            $this->upload_file_format->id = $hfid;
            if ($this->upload_file_format->delete()) {
                $this->Session->setFlash(__('lbldeletemsg'));
                $this->redirect(array('controller' => 'Masters', 'action' => 'upload_format'));
            } else {
                $this->Session->setFlash(__('lblnotdeletemsg'));
            }
        }

        $this->redirect(array('controller' => 'Masters', 'action' => 'upload_format'));
    }

    //----------- Prohibited Property Details-------------------------------

    public function proprodts() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('proprodts');
            $this->loadModel('mainlanguage');
            $this->loadModel('proprodtsattr');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfproid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hflevel1list', 0);
            $this->set('hflevel2list', 0);
            $this->set('hflevel3list', 0);
            $this->set('hflevel4list', 0);
            $this->set('hflevel2', 0);
            $this->set('hflevel3', 0);
            $this->set('hflevel4', 0);

//            $this->loadModel('NGDRSErrorCode');
//            $result_codes = $this->NGDRSErrorCode->find("all");
//            $this->set('result_codes', $result_codes);
            // $laug = $this->Session->read("sess_langauge");

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $configure1 = ClassRegistry::init('levelconfig')->find('all', array('conditions' => array('state_id' => $stateid)));
            $this->set('configure1', $configure1);
            $this->set('attributes', ClassRegistry::init('attribute_parameter')->find('list', array('fields' => array('attribute_id', 'eri_attribute_name'), 'conditions' => array('state_id' => $stateid))));
            $this->set('configure', ClassRegistry::init('damblkdpnd')->query("select * from ngdrstab_conf_state_district_div_level where state_id=$stateid"));
            $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('corp', ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('id', 'governingbody_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('governingbody_name_' . $language => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('taluka_name_' . $language => 'ASC'))));
            $this->set('village', ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('id', 'village_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('village_name_' . $language => 'ASC'))));
            $this->set('level1', ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('level_1_desc_' . $language => 'ASC'))));
            $this->set('levellist1', ClassRegistry::init('Level1')->find('list', array('fields' => array('prop_level1_list_id', 'list_1_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('list_1_desc_' . $language => 'ASC'))));
            $this->set('level2', ClassRegistry::init('Level2_property')->find('list', array('fields' => array('level_2_id', 'level_2_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('level_2_desc_' . $language => 'ASC'))));
            $this->set('levellist2', ClassRegistry::init('Level2')->find('list', array('fields' => array('prop_level2_list_id', 'list_2_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('list_2_desc_' . $language => 'ASC'))));
            $this->set('level3', ClassRegistry::init('Level3_property')->find('list', array('fields' => array('level_3_id', 'level_3_desc_' . $language), 'order' => array('level_3_desc_' . $language => 'ASC'))));
            $this->set('levellist3', ClassRegistry::init('Level3')->find('list', array('fields' => array('prop_leve3_list_id', 'list_3_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('list_3_desc_' . $language => 'ASC'))));
            $this->set('level4', ClassRegistry::init('Level4_property')->find('list', array('fields' => array('level_4_id', 'level_4_desc_' . $language), 'order' => array('level_4_desc_' . $language => 'ASC'))));
            $this->set('levellist4', ClassRegistry::init('Level4')->find('list', array('fields' => array('prop_level4_list_id', 'list_4_desc_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('list_4_desc_' . $language => 'ASC'))));

            $proprodts = $this->proprodts->query("select * from ngdrstab_mst_prohibited_prop_list");
            $this->set('proprodts', $proprodts);
            $attribute = $this->proprodts->query("select a.*,b.eri_attribute_name
                    from ngdrstab_trn_prohibited_attribute a
                    inner join ngdrstab_mst_attribute_parameter b on b.attribute_id = a.paramter_id
                    where b.state_id=?", array($stateid));
            $this->set('attribute', $attribute);


            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['corporation_class_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $fieldlist['level1_id']['select'] = 'is_select_req';
            $fieldlist['level1_list_id']['select'] = 'is_select_req';
            $fieldlist['level2_id']['select'] = 'is_select_req';
            $fieldlist['level2_list_id']['select'] = 'is_select_req';
            $fieldlist['level3_id']['select'] = 'is_select_req';
            $fieldlist['level3_list_id']['select'] = 'is_select_req';
            $fieldlist['level4_id']['select'] = 'is_select_req';
            $fieldlist['level4_list_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['prohibition_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                    $fieldlist['prohibition_remark_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['prohibition_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlist['prohibition_remark_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }

            $fieldlist['referance']['text'] = 'is_required,is_numeric';
            $fieldlist['court_order_date']['text'] = 'is_required';
            $fieldlist['paramter_id']['checkbox'] = 'is_required';
            //$fieldlist['paramter_value']['text']='is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist)); //this array of error is set here to display those correspondent fields error  in the ctp.


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['proprodts']['csrftoken']);

                $this->request->data['proprodts']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['proprodts']['user_id'] = $this->Auth->User('user_id');
                //$this->request->data['proprodts']['created_date'] = date('Y/m/d H:i:s');
                $this->request->data['proprodts']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $this->request->data['proprodts']['prohibition_end_flag'] = $_POST['is_clear'];

                $your_date = $this->request->data['proprodts']['prohibition_end_date'];
                if ($_POST['is_clear'] == 'Y' && $_POST['hfupdateflag'] != 'Y') {
                    $res = explode("/", $your_date);
                    $changedDate = $res[2] . "-" . $res[0] . "-" . $res[1];
                    $this->request->data['proprodts']['prohibition_end_date'] = $changedDate;
                }

                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
//               pr($this->request->data);exit;
                if ($_POST['actiontype'] == '1') {

                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['proprodts']['id'] = $this->request->data['hfid'];
                        $prohibited_id = $_POST['hfproid'];
                        $id = $this->proprodts->query("select a.id from ngdrstab_trn_prohibited_attribute a
                                                                        inner join ngdrstab_mst_prohibited_prop_list b on b.prohibited_id = a.prohibited_id
                                                                        where a.prohibited_id=?", array($prohibited_id));
                        foreach ($id as $id1) {
                            $temp = $id1[0]['id'];
                            $delete = $this->proprodts->query("Delete from ngdrstab_trn_prohibited_attribute where id=?", array($temp));
                        }
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    if ($this->proprodts->save($this->request->data['proprodts'])) {
                        $lastinsertid = $this->proprodts->getLastInsertId();
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $prohibited_id = $this->request->data['hfproid'];

                            if ($this->request->data['proprodts']['upload']['tmp_name'] != '') {
                                if ($this->request->data['proprodts']['upload']['error'] == 0) {
                                    if ($this->validfile($this->request->data['proprodts']['upload'])) {
                                        $file_ext = pathinfo($this->request->data['proprodts']['upload']['name'], PATHINFO_EXTENSION);

                                        $new_name = $prohibited_id . '_file.' . $file_ext;

                                        $createFolder1 = WWW_ROOT . '/' . 'prohibited/';
                                        if (!file_exists($createFolder1)) {
                                            mkdir($createFolder1); // creates folder if  not found
                                        }
                                        if (file_exists($createFolder1 . '/' . $new_name)) {
                                            unlink($createFolder1 . '/' . $new_name);
                                        }
                                        $success = move_uploaded_file($this->request->data['proprodts']['upload']['tmp_name'], $createFolder1 . '/' . $new_name);
                                        $this->proprodts->id = $prohibited_id;

                                        $this->proprodts->save(array('upload_file' => $new_name));
                                    } else {
                                        $this->Session->setFlash(__("File format not suported"));
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                                    }
                                } else {
                                    $this->Session->setFlash(__('Error in file'));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                                }
                            }
                        } else {
                            $prohibited_id = $this->proprodts->query("select prohibited_id from ngdrstab_mst_prohibited_prop_list where id=?", array($lastinsertid));
                            $prohibited_id = $prohibited_id[0][0]['prohibited_id'];
                            if ($this->request->data['proprodts']['upload']['tmp_name'] != '') {
                                if ($this->request->data['proprodts']['upload']['error'] == 0) {
                                    if ($this->validfile($this->request->data['proprodts']['upload'])) {

                                        $file_ext = pathinfo($this->request->data['proprodts']['upload']['name'], PATHINFO_EXTENSION);

                                        $new_name = $prohibited_id . '_file.' . $file_ext;

                                        $createFolder1 = WWW_ROOT . '/' . 'prohibited/';
                                        if (!file_exists($createFolder1)) {
                                            mkdir($createFolder1); // creates folder if  not found
                                        }
                                        if (file_exists($createFolder1 . '/' . $new_name)) {
                                            unlink($createFolder1 . '/' . $new_name);
                                        }
                                        $success = move_uploaded_file($this->request->data['proprodts']['upload']['tmp_name'], $createFolder1 . '/' . $new_name);
                                        $this->proprodts->id = $prohibited_id;

                                        $this->proprodts->save(array('upload_file' => $new_name));
                                    } else {
                                        $this->Session->setFlash(__("File format not suported"));
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                                    }
                                } else {
                                    $this->Session->setFlash(__('Error in file'));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                                }
                            }
                        }

                        $paramter_id = $this->request->data['proprodts']['paramter_id'];
                        $paramter_value = $_POST['paramter_value'];
                        $tempdata = array();
                        if (!empty($paramter_id) && !empty($paramter_value)) {
                            foreach ($paramter_id as $index => $selected) {
                                $data['prohibited_id'] = $prohibited_id;
                                $data['paramter_id'] = $paramter_id[$index];
                                $data['paramter_value'] = $paramter_value[$index];
                                $data['state_id'] = $this->Auth->User('state_id');
                                $data['user_id'] = $this->Auth->User('user_id');
                                // $data['created_date'] = date('Y/m/d H:i:s');
                                $data['req_ip'] = $_SERVER['REMOTE_ADDR'];
                                array_push($tempdata, $data);
                            }
                            if ($this->proprodtsattr->saveAll($tempdata)) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                            } else {
                                $this->Session->setFlash(__("lblnotsavemsg"));
                            }
                        }
                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                }

                if ($_POST['actiontype'] == '3') {

                    if ($_POST['hfproid'] != NULL) {
                        $prohibited_id = $_POST['hfproid'];

                        $id = $this->proprodts->query("select a.id from ngdrstab_trn_prohibited_attribute a
                                                                        inner join ngdrstab_mst_prohibited_prop_list b on b.prohibited_id = a.prohibited_id
                                                                        where a.prohibited_id=?", array($prohibited_id));
                        $delete = 0;
                        foreach ($id as $id1) {
                            $temp = $id1[0]['id'];

                            $delete = $this->proprodts->query("Delete from ngdrstab_trn_prohibited_attribute where id=?", array($temp));
                        }
                        $delete1 = $this->proprodts->query("Delete from ngdrstab_mst_prohibited_prop_list where prohibited_id=?", array($prohibited_id));
                        if ($delete == NULL && $delete1 == NULL) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function delete_prohibition($prohibited_id = NULL) {

        $this->loadModel('proprodts');

        $id = $this->proprodts->query("select a.id from ngdrstab_trn_prohibited_attribute a
                                                                        inner join ngdrstab_mst_prohibited_prop_list b on b.prohibited_id = a.prohibited_id
                                                                        where a.prohibited_id=?", array($prohibited_id));
        $delete = 0;
        foreach ($id as $id1) {
            $temp = $id1[0]['id'];

            $delete = $this->proprodts->query("Delete from ngdrstab_trn_prohibited_attribute where id=?", array($temp));
        }
        $delete1 = $this->proprodts->query("Delete from ngdrstab_mst_prohibited_prop_list where prohibited_id=?", array($prohibited_id));
        if ($delete == NULL && $delete1 == NULL) {
            $this->Session->setFlash(__('lbldeletemsg'));
            $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
        } else {
            $this->Session->setFlash(__('lblnotdeletemsg'));
        }

        $this->redirect(array('controller' => 'Masters', 'action' => 'proprodts'));
    }

    public function get_corp_list() {
        try {

            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('damblkdpnd');
            $this->loadModel('valuationzone');
            $this->loadModel('VillageMapping');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['district']) and is_numeric($data['district'])) {
                $district = $data['district'];
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);

                $corplist = ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corporationclasslist.id', 'corporationclasslist.governingbody_name_' . $this->Session->read("sess_langauge")), 'conditions' => array('id' => ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.corp_id'), 'conditions' => array('district_id' => array($district)))))));
                $result_array = array('corp' => $corplist);
                $json2array['corp'] = $corplist;

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else if (isset($data['taluka']) and is_numeric($data['taluka'])) {
                $taluka = $data['taluka'];

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);

                $corplist = ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corporationclasslist.id', 'corporationclasslist.governingbody_name_' . $this->Session->read("sess_langauge")), 'conditions' => array('id' => ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.corp_id'), 'conditions' => array('taluka_id' => array($taluka)))))));
                $result_array = array('corp' => $corplist);
                $json2array['corp'] = $corplist;

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            //$this->redirect(array('action' => 'error404'));
        }
    }

    public function taluka_change_event() {
        try {

            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('damblkdpnd');
            $this->loadModel('valuationzone');
            $this->loadModel('VillageMapping');

            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['tal']) and is_numeric($data['tal'])) {
                $tal = $data['tal'];

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);

                $villagelist = ClassRegistry::init('VillageMapping')->find('list', array('fields' => array('VillageMapping.id', 'VillageMapping.village_name_en'), 'conditions' => array('taluka_id' => $tal)));
                $result_array = array('village' => $villagelist);
                $json2array['village'] = $villagelist;

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            //$this->redirect(array('action' => 'error404'));
        }
    }

    public function corp_change_event() {
        try {

            $this->autoRender = FALSE;
            $data = $this->request->data;

            $this->loadModel('damblkdpnd');
            $this->loadModel('VillageMapping');

            $stateid = $this->Auth->User("state_id");
            if (isset($data['corp'])) {
                $corp = $data['corp'];

                $villagelist = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.id', 'damblkdpnd.village_name_en'), 'conditions' => array('corp_id' => $corp)));
                $result_array = array('village' => $villagelist);

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['village'] = $villagelist;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function village_change_event() {
        try {
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['village_id'])) {
                $villageid = $data['village_id'];
//$landtypelist = ClassRegistry::init('Developedlandtype')->find('list', array('fields' => array('Developedlandtype.id', 'Developedlandtype.developed_land_types_desc_' . $lang), 'conditions' => array('id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.developed_land_types_id'), 'conditions' => array('village_id' => $villageid))))));
                $level1id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level1_id'), 'conditions' => array('village_id' => $villageid)));
                $level1 = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1id)));

                $result_array = array('data1' => NULL,
                    'data2' => $level1);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
//$json2array['landtype'] = $landtypelist;
                $json2array['level1'] = $level1;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function Level1_change_event() {
        try {
//            echo'hi';
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('Levels_1_property');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['level1list']) && isset($data['village_id'])) {
                $level1id = $data['level1list'];
//$level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id))))));
                $level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $level1id, 'village_id' => $_POST['village_id']))))));
                $level1listflag = 0;
                if ($level1list != NULL) {
                    $level1listflag = 1;
                }
//pr($level1list);
//$level2descid = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id)));
                $level2 = ClassRegistry::init('Level2_property')->find('list', array('fields' => array('Level2_property.level_2_id', 'Level2_property.level_2_desc_' . $lang), 'conditions' => array('level_2_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level2_id'), 'conditions' => array('level1_id' => $level1id, 'village_id' => $_POST['village_id']))))));
                $level2flag = 0;
                if ($level2 != NULL) {
                    $level2flag = 1;
                }
                $result_array = array('data1' => $level1list,
                    'data2' => $level2,
                    'level1listflag' => $level1listflag,
                    'level2flag' => $level2flag);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['level1list'] = $level1list;
                $json2array['level2'] = $level2;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function Level2_change_event() {
        try {
//            echo'hi';
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('Level2_property');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['level2list']) && isset($data['village_id'])) {
                $level2id = $data['level2list'];
//$level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id))))));
                $level2list = ClassRegistry::init('Level2')->find('list', array('fields' => array('Level2.prop_level2_list_id', 'Level2.list_2_desc_' . $lang), 'conditions' => array('prop_level2_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level2_list_id'), 'conditions' => array('level2_id' => $level2id, 'village_id' => $_POST['village_id']))))));
                $level2listflag = 0;
                if ($level2list != NULL) {
                    $level2listflag = 1;
                }
//pr($level1list);
//$level2descid = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id)));
                $level3 = ClassRegistry::init('Level3_property')->find('list', array('fields' => array('Level3_property.level_3_id', 'Level3_property.level_3_desc_' . $lang), 'conditions' => array('level_3_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level3_id'), 'conditions' => array('level2_id' => $level2id, 'village_id' => $_POST['village_id']))))));
                $level3flag = 0;
                if ($level3 != NULL) {
                    $level3flag = 1;
                }
                $result_array = array('data1' => $level2list,
                    'data2' => $level3,
                    'level2listflag' => $level2listflag,
                    'level3flag' => $level3flag);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['level2list'] = $level2list;
                $json2array['level3'] = $level3;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function Level3_change_event() {
        try {
//            echo'hi';
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('Level3_property');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['level3list']) && isset($data['village_id'])) {
                $level3id = $data['level3list'];
//$level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id))))));
                $level3list = ClassRegistry::init('Level3')->find('list', array('fields' => array('Level3.prop_leve3_list_id', 'Level3.list_3_desc_' . $lang), 'conditions' => array('prop_leve3_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level3_list_id'), 'conditions' => array('level3_id' => $level3id, 'village_id' => $_POST['village_id']))))));
                $level3listflag = 0;
                if ($level3list != NULL) {
                    $level3listflag = 1;
                }
//pr($level1list);
//$level2descid = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id)));
                $level4 = ClassRegistry::init('Level4_property')->find('list', array('fields' => array('Level4_property.level_4_id', 'Level4_property.level_4_desc_' . $lang), 'conditions' => array('level_4_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level4_id'), 'conditions' => array('level3_id' => $level3id, 'village_id' => $_POST['village_id']))))));
                $level4flag = 0;
                if ($level4 != NULL) {
                    $level4flag = 1;
                }
                $result_array = array('data1' => $level3list,
                    'data2' => $level4,
                    'level3listflag' => $level3listflag,
                    'level4flag' => $level4flag);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['level3list'] = $level3list;
                $json2array['level4'] = $level4;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function Level4_change_event() {
        try {
//            echo'hi';
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('Level4_property');
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            if (isset($data['level4list']) && isset($data['village_id'])) {
                $level4id = $data['level4list'];
//$level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('village_id' => $level1id))))));
                $level4list = ClassRegistry::init('Level4')->find('list', array('fields' => array('Level4.prop_level4_list_id', 'Level4.list_4_desc_' . $lang), 'conditions' => array('prop_level4_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level4_list_id'), 'conditions' => array('level4_id' => $level4id, 'village_id' => $_POST['village_id']))))));


                $result_array = array('data1' => $level4list);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['level4list'] = $level4list;

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function district_change_event() {
        try {
            $this->autoRender = FALSE;
            $data = $this->request->data;
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
            if (isset($data['dist'])) {
                $dist = $data['dist'];
                $talukalist = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_en'), 'conditions' => array('district_id' => $dist)));

                $result_array = array('subdiv' => NULL, 'taluka' => $talukalist, 'circle' => NULL, 'corp' => NULL, 'village' => NULL);

                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['taluka'] = $talukalist;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            // //pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    //---------------END----------------------------------------------------

    public function conc_jurisdiction() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('conc_jurisdiction');
            $this->loadModel('mainlanguage');
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('officename', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('office', NULL);

            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
//            $language = $this->Session->read('sess_langauge');
//            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('user', ClassRegistry::init('User')->find('list', array('fields' => array('user_id', 'username'), 'conditions' => array('state_id' => $stateid))));


            $grid = $this->conc_jurisdiction->query("select a.*,b.office_name_$laug,c.username
                    from ngdrstab_trn_concurrent_jurisdiction a
                    inner join ngdrstab_mst_office b on b.office_id = a.office_id
                    inner join ngdrstab_mst_user c on a.map_user_id = c.user_id");
            $this->set('grid', $grid);

            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['map_user_id']['select'] = 'is_select_req';
            $fieldlist['office_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['conc_jurisdiction']['csrftoken']);
                $this->request->data['conc_jurisdiction'] = $this->istrim($this->request->data['conc_jurisdiction']);
                $errarr = $this->validatedata($this->request->data['conc_jurisdiction'], $fieldlist);
                if ($this->validationError($errarr)) {
                    $this->request->data['conc_jurisdiction']['state_id'] = $this->Auth->User('state_id');
                    $this->request->data['conc_jurisdiction']['user_id'] = $this->Auth->User('user_id');
                    // $this->request->data['conc_jurisdiction']['created_date'] = date('Y/m/d H:i:s');
                    $this->request->data['conc_jurisdiction']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                    $this->set('actiontypeval', $_POST['actiontype']);
                    $this->set('hfid', $_POST['hfid']);
                    if ($_POST['actiontype'] == '1') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['conc_jurisdiction']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        if ($this->conc_jurisdiction->save($this->request->data['conc_jurisdiction'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'conc_jurisdiction'));
                        } else {
                            $this->Session->setFlash(__("lblnotsavemsg"));
                        }
                    }
                    if ($_POST['actiontype'] == 2) {
                        $this->redirect(array('controller' => 'Masters', 'action' => 'conc_jurisdiction'));
                    }

//                    if ($_POST['actiontype'] == '3') {
//                        if ($_POST['hfid'] != NULL) {
//                            $this->conc_jurisdiction->id = $_POST['hfid'];
//                            if ($this->conc_jurisdiction->delete()) {
//                                $this->Session->setFlash(__('lbldeletemsg'));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'conc_jurisdiction'));
//                            } else {
//                                $this->Session->setFlash(__('lblnotdeletemsg'));
//                            }
//                        }
//                    }

                    if ($_POST['actiontype'] == 4) {
                        // for permenent office name
                        $user_id = $this->request->data['conc_jurisdiction']['map_user_id'];
                        $officedata = $this->conc_jurisdiction->query("select a.office_name_$laug,a.office_id 
                                                   from ngdrstab_mst_office a 
                                                   inner join ngdrstab_mst_user b on a.office_id = b.office_id
                                                   where b.user_id=?", array($user_id));

                        if ($officedata != NULL) {
                            $officename = $officedata[0][0]['office_name_en'];
                            $this->set('officename', $officename);
                            $office_id = $officedata[0][0]['office_id'];
                            $officenew = array("$office_id" => $office_id);
                            $officenewid = ClassRegistry::init('conc_jurisdiction')->find('list', array('fields' => array('office_id'), 'conditions' => array('map_user_id' => $user_id)));
                            $result = array_merge($officenewid, $officenew);
                        } else {
                            $result = NULL;
                            $this->set('officename', '');
                            $this->Session->setFlash(__('Permenent office not defined'));
                        }
                        //for additional Office dropdownlist
                        $office = ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_' . $laug), 'conditions' => array('not' => array('office_id' => $result)), 'order' => array('office_name_' . $laug => 'ASC')));
                        if ($office != NULL) {
                            $this->set('office', $office);
                        } else {
                            $this->Session->setFlash(__('All office are already mapped'));
                        }
                        //Grid for specific user
                        $grid = $this->conc_jurisdiction->query("select a.*,b.office_name_$laug,c.username
                    from ngdrstab_trn_concurrent_jurisdiction a
                    inner join ngdrstab_mst_office b on b.office_id = a.office_id
                    inner join ngdrstab_mst_user c on a.map_user_id = c.user_id
                    where a.map_user_id=?", array($user_id));
                        $this->set('grid', $grid);
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_conc($id) {
        try {
            $this->autoRender = false;
            $this->loadModel('conc_jurisdiction');

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'behavioural') {
                $this->conc_jurisdiction->id = $id;


                if ($this->conc_jurisdiction->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'conc_jurisdiction'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function searchrate() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('User');

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('grid', NULL);
            $this->set('grid1', NULL);

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);

            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('village', NULL);
            $this->set('taluka', NULL);

            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);

            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));




            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['searchrate']['csrftoken']);
                $this->set('taluka', $json2array['taluka']);
                $this->set('village', $json2array['village']);

                $this->set('actiontypeval', $_POST['actiontype']);
//                $this->set('hfid', $_POST['hfid']);
//               pr($this->request->data);exit;
                if ($_POST['actiontype'] == '1') {
                    $villageid = $this->request->data['searchrate']['village_id'];
                    $talid = $this->request->data['searchrate']['taluka_id'];
                    if ($villageid == null || $villageid == '') {
                        $result = $this->User->query("select b.taluka_name_en,c.developed_land_types_desc_en,l.usage_main_catg_desc_en,l.usage_main_catg_desc_ll,
                    m.usage_sub_catg_desc_en,m.usage_sub_catg_desc_ll,n.usage_sub_sub_catg_desc_en,a.prop_rate,
                    d.valuation_zone_desc_en,concat(e.from_desc_en,'-',e.to_desc_en) as subzone_desc
                    from ngdrstab_mst_rate a
                    inner join ngdrstab_conf_admblock5_taluka b on b.taluka_id = a.taluka_id	
                    inner join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                    inner join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
                    inner join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
                    left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
		    inner join ngdrstab_mst_valuation_zone d on d.valutation_zone_id = a.valutation_zone_id
		    left outer join ngdrstab_mst_valuation_subzone e on e.id = a.valutation_subzone_id
                    where a.village_id IS NULL and a.taluka_id=?", array($talid));
                        $this->set('grid1', $result);
                    } else {
                        $result = $this->User->query("select b.village_name_$lang,c.developed_land_types_desc_$lang,
                    d.level_1_desc_$lang, h.list_1_desc_$lang,l.usage_main_catg_desc_$lang,
                    m.usage_sub_catg_desc_$lang,n.usage_sub_sub_catg_desc_$lang,a.prop_rate
                    from ngdrstab_mst_rate a
                    inner join ngdrstab_conf_admblock7_village_mapping b on b.village_id = a.village_id	
                    inner join ngdrstab_mst_developed_land_types c on c.developed_land_types_id = a.developed_land_types_id
                    inner join ngdrstab_mst_location_levels_1_property d on d.level_1_id = a.level1_id
                    inner join ngdrstab_mst_loc_level_1_prop_list h on h.prop_level1_list_id = a.level1_list_id 
                    inner join ngdrstab_mst_usage_main_category l on l.usage_main_catg_id = a.usage_main_catg_id
                    inner join ngdrstab_mst_usage_sub_category m on m.usage_sub_catg_id = a.usage_sub_catg_id
                    left outer join ngdrstab_mst_usage_sub_sub_category n on n.usage_sub_sub_catg_id = a.usage_sub_sub_catg_id
                    where a.village_id = ?", array($villageid));
                        $this->set('grid', $result);
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'searchrate'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function delete_emp($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('emptransfer');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'behavioural') {
                $this->emptransfer->id = $id;
                if ($this->emptransfer->delete($transfer_id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'emptransfer'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function designation_change_event() {
        try {
            $this->check_role_escalation();
            $this->loadModel('employee');
            if (isset($_GET['desi'])) {
                $desi = $_GET['desi'];
                $employeelist = ClassRegistry::init('employee')->find('list', array('fields' => array('employee.designation_id', 'employee.emp_fname'), 'conditions' => array('designation_id' => $desi)));
                $result_array = array('employee' => $employeelist);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['employee'] = $employeelist;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));
                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function office_change_event() {
        try {
            $this->check_role_escalation();
            $this->loadModel('office');
            if (isset($_GET['office'])) {
                $office = $_GET['office'];
                $officelist = ClassRegistry::init('office')->find('list', array('fields' => array('office.office_id', 'office.office_name_en'), 'conditions' => array('office_id  !=' => $office)));
                $result_array = array('office' => $officelist);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['office'] = $officelist;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));
                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function behavoiurconfig() {
        try {
            $this->check_role_escalation();
            $this->loadModel('Behavioural');
            $this->loadModel('BehaviouralDetails');
            $this->loadModel('BehavioralPattens');
            $this->loadModel('mainlanguage');
            $this->loadModel('NGDRSErrorCode');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $this->set('Behaviouraldata', ClassRegistry::init('Behavioural')->find('list', array('fields' => array('behavioral_id', 'behavioral_desc_en'), 'order' => array('behavioral_desc_en' => 'ASC'))));
//              $this->set('Behaviouraldata1', ClassRegistry::init('Behavioural')->find('list', array('fields' => array('behavioral_id', 'behavioral_desc_en'), 'order' => array('behavioral_desc_en' => 'ASC'))));
            $this->set('Behaviouraldetailsdata', ClassRegistry::init('BehaviouralDetails')->find('list', array('fields' => array('behavioral_details_id', 'behavioral_details_desc_en'), 'order' => array('behavioral_details_desc_en' => 'ASC'))));

            $this->set('behaviouralrecord', $this->Behavioural->find('all'));

            $behaviouraldetailsrecord = $this->BehaviouralDetails->query("select distinct a.behavioral_details_desc_en,a.behavioral_details_desc_ll,a.behavioral_details_desc_ll1 ,a.behavioral_details_desc_ll2,a.behavioral_details_desc_ll3,a.behavioral_details_desc_ll4,a.id,a.behavioral_id,b.behavioral_desc_en from ngdrstab_conf_behavioral_details a
                                                 inner join ngdrstab_conf_behavioral b on b.behavioral_id=a.behavioral_id");
            $this->set('behaviouraldetailsrecord', $behaviouraldetailsrecord);
            $behaviouralpattenrecord = $this->BehavioralPattens->query("select distinct a.behavioral_details_id, a.id,a.behavioral_id, a.pattern_desc_en,a.pattern_desc_ll, a.pattern_desc_ll1,a.pattern_desc_ll2,a.pattern_desc_ll3,a.pattern_desc_ll4, c.behavioral_details_desc_en, b.behavioral_desc_en from ngdrstab_conf_behavioral_patterns a
                                                 inner join ngdrstab_conf_behavioral b on b.behavioral_id=a.behavioral_id
                                                 inner join ngdrstab_conf_behavioral_details c on c.behavioral_details_id=a.behavioral_details_id");
            $this->set('behaviouralpattenrecord', $behaviouralpattenrecord);

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist1 = array();
            $fieldlist2 = array();
            $fieldlist3 = array();

//            $fieldlist1 = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist1['behavioral_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength40';
                    $fieldlist2['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength30';
                    $fieldlist3['pattern_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength30';
                } else {
                    $fieldlist1['behavioral_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlist2['behavioral_details_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                    $fieldlist3['pattern_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }


            $fieldlist2['behavioral_id']['select'] = 'is_select_req';


            $fieldlist3['behavioral_id1']['select'] = 'is_select_req';
            $fieldlist3['behavioral_details_id']['select'] = 'is_select_req';


//            foreach ($fieldlist1 as $key => $valrule) {
//                $errarr[$key . '_error'] = "";
//            }
//            $this->set("errarr", $errarr);
//
//            foreach ($fieldlist2 as $key => $valrule) {
//                $errarr[$key . '_error'] = "";
//            }
//            $this->set("errarr", $errarr);
//
//
//            foreach ($fieldlist3 as $key => $valrule) {
//                $errarr[$key . '_error'] = "";
//            }
//            $this->set("errarr", $errarr);


            $this->set('fieldlist1', $fieldlist1);
            $this->set('fieldlist2', $fieldlist2);
            $this->set('fieldlist3', $fieldlist3);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist1));
            $this->set('result_codes', $this->getvalidationruleset($fieldlist2));
            $this->set('result_codes', $this->getvalidationruleset($fieldlist3));

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Behavioural']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->set('actiontypeval', $actiontype);
                $this->set('hfactionval', $hfactionval);

                if ($actiontype == '1') {

                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Behavioural']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['Behavioural'] = $this->istrim($this->request->data['Behavioural']);
                        $errarr = $this->validatedata($this->request->data['Behavioural'], $fieldlist1);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
//                            pr($this->request->data);exit;
                            if ($this->Behavioural->save($this->request->data['Behavioural'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'behavoiurconfig'));
                                $this->set('behaviouralrecord', $this->Behavioural->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
                    }
                }
                // BehaviouralDetails save function
                if ($actiontype == '2') {
                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['BehaviouralDetails']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
//                      pr($this->request->data);exit;
                        $this->request->data['BehaviouralDetails'] = $this->istrim($this->request->data['BehaviouralDetails']);
                        $errarr = $this->validatedata($this->request->data['BehaviouralDetails'], $fieldlist2);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }

                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
//                              pr($this->request->data); exit;

                            if ($this->BehaviouralDetails->save($this->request->data['BehaviouralDetails'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'behavoiurconfig'));
                                $this->set('behaviouraldetailsrecord', $this->BehaviouralDetails->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        }
//                
                    }
                }
                //Save BehavioralPattens 

                if ($actiontype == '3') {


                    $check = $this->BehavioralPattens->query("SELECT MAX(field_id) FROM ngdrstab_conf_behavioral_patterns");
                    $field_id = $check[0][0]['max'];
                    if ($field_id != Null) {
                        $field_id = $field_id + 1;
                    } else {
                        $field_id = 1;
                    }

                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['BehavioralPattens']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $this->request->data['BehavioralPattens']['behavioral_id'] = $this->request->data['BehavioralPattens']['behavioral_id1'];
                            $this->request->data['BehavioralPattens']['field_id'] = $field_id;
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['BehavioralPattens'] = $this->istrim($this->request->data['BehavioralPattens']);
                        $errarr = $this->validatedata($this->request->data['BehavioralPattens'], $fieldlist3);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                            if ($flag == 1) {
                                $this->set("errarr", $errarr);
                            } else {
//                          pr($this->request->data);exit;
                                if ($this->BehavioralPattens->save($this->request->data['BehavioralPattens'])) {

                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'behavoiurconfig'));
                                    $this->set('behavioralpattensrecord', $this->BehavioralPattens->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            }
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function articledepndfeild_master() {
        try {

            $this->check_role_escalation();
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');

            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);


            array_map(array($this, 'loadmodel'), array('State', 'User', 'article_fee_items', 'mainlanguage'));
            $actiontypeval = $hfid = $hfupdateflag = NULL;

            $stateid = $this->Auth->User('state_id');
            $language2 = $this->mainlanguage->find('all', array('conditions' => array('state_id' => $stateid), 'order' => array('id' => 'ASC')));
            $feetype = ClassRegistry::init('fee_type')->find('list', array('fields' => array('fee_type_id', 'fee_type_desc_' . $laug), 'order' => array('fee_type_desc_' . $laug => 'ASC')));


            $fees_items = $this->article_fee_items->query("select a.*,b.fee_type_desc_" . $laug . ",c.usage_param_type_desc_" . $laug . "
                                                 from ngdrstab_mst_article_fee_items a
                                                 left outer join ngdrstab_mst_fee_type b on b.fee_type_id = a.fee_param_type_id
                                                 left outer join ngdrstab_mst_items_types c on c.usage_param_type_id=a.fee_param_type_id
                                                 where a.sd_calc_flag=?", array('N'));

            $this->set(compact('actiontypeval', 'hfid', 'hfupdateflag', 'language', 'language2', 'feetype', 'itemtype', 'fees_items'));

            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['fee_item_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fieldsis_alphaspacemaxlenghth
                    // $fieldlist['fee_item_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . "is_maxlength255";

                    $fieldlist['fee_item_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                ///  pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['fees_items']['csrftoken']);
                $frm = $this->request->data['fees_items'];
                $frm['state_id'] = $this->Auth->User('state_id');
                $frm['user_id'] = $this->Auth->User('user_id');
                $frm['created_date'] = date('Y/m/d H:i:s');
                $frm['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $frm['sd_calc_flag'] = 'N';
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);
                if ($_POST['actiontype'] == '1') {
                    $check = $this->article_fee_items->query("SELECT MAX(fee_item_id) FROM ngdrstab_mst_article_fee_items");
                    $fee_item_id = $check[0][0]['max'];
                    if ($fee_item_id != Null) {
                        $fee_item_id = $fee_item_id + 1;
                    } else {
                        $fee_item_id = 1;
                    }
                    if (!$this->request->data['hfid']) {
                        $prmCode = $this->article_fee_items->find('first', array('fields' => array('MAX(fee_param_code) AS param_code'), 'conditions' => array('fee_param_type_id' => array(1, 5))));
                        $frm['fee_param_code'] = ++$prmCode[0]['param_code'];
                        $frm['fee_param_type_id'] = 1;
                    }
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $frm['fee_item_id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $frm['fee_item_id'] = $fee_item_id;
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['article_fee_items'] = $this->istrim($frm);
//                    pr($this->istrim($frm));exit; 
                    $article_items = $this->request->data['article_fee_items']['fee_item_desc_en'];

//                   pr($article_items);exit;
                    $article_items1 = $this->article_fee_items->query("select fee_item_desc_en from ngdrstab_mst_article_fee_items where fee_item_desc_en like '%$article_items%' ");
                    if (empty($article_items1)) {
                        $errarr = $this->validatedata($this->request->data['article_fee_items'], $fieldlist);
                        if ($this->ValidationError($errarr)) {

                            if ($this->article_fee_items->save($frm)) {
                                $this->Session->setFlash(__($actionvalue));

                                $this->redirect(array('controller' => 'Masters', 'action' => 'articledepndfeild_master'));
                            } else {
                                $this->Session->setFlash(__("lblnotsavemsg"));
//                        $this->redirect('article_fee_items');
                            }
                        }
                    } else {
                        $this->Session->setFlash(__('Fee Item Already Exist'));
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    return $this->redirect(array('controller' => 'Masters', 'action' => 'articledepndfeild_master'));
                }
                if ($_POST['actiontype'] == '3') {
                    if ($_POST['hfid'] != NULL) {
                        $this->article_fee_items->id = $_POST['hfid'];
                        if ($this->article_fee_items->delete()) {
                            $this->Session->setFlash(__('lbldeletemsg'));
                            return $this->redirect(array('controller' => 'Masters', 'action' => 'articledepndfeild_master'));
                        } else {
                            $this->Session->setFlash(__('lblnotdeletemsg'));
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function articledepndfeild_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('article_fee_items');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->article_fee_items->fee_item_id = $id;
                if ($this->article_fee_items->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('controller' => 'Masters', 'action' => 'articledepndfeild_master'));
                }

                // }
            }
        } catch (exception $ex) {
            pr($ex);
            exit;
        }
    }

    public function document_execution_type() {
        try {
            $this->check_role_escalation();
            $this->loadModel('document_execution_type');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('documentrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $documentrecord = $this->document_execution_type->find('all');
            $this->set('documentrecord', $documentrecord);

            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['execution_type_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fieldsis_alphaspacemaxlenghth
                    $fieldlist['execution_type_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['document_execution_type']['csrftoken']);

                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['document_execution_type']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['document_execution_type']['req_ip'] = $this->request->clientIp();
                        $this->request->data['document_execution_type']['user_id'] = $user_id;
                        // $this->request->data['document_execution_type']['created_date'] = $created_date;
                        $this->request->data['document_execution_type']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['document_execution_type']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['document_execution_type'] = $this->istrim($this->request->data['document_execution_type']);

//                            pr($this->request->data['document_execution_type']['execution_type_en']);exit;
                        if (empty($doc1)) {
                            $errarr = $this->validatedata($this->request->data['document_execution_type'], $fieldlist);
                            if ($this->ValidationError($errarr)) {

                                $duplicate['Table'] = 'ngdrstab_mst_document_execution_type';
                                $duplicate['Fields'] = array('execution_type_en', 'execution_type_ll');
                                $duplicate['Action'] = $duplicateflag; //U 
                                $duplicate['PrimaryKey'] = 'id';
                                $checkd = $this->check_duplicate($duplicate, $this->request->data['document_execution_type']);
                                if ($checkd) {
                                    if ($this->document_execution_type->save($this->request->data['document_execution_type'])) {
                                        $this->Session->setFlash(__($actionvalue));
                                        $this->redirect(array('controller' => 'Masters', 'action' => 'document_execution_type'));
                                        $this->set('documentrecord', $this->document_execution_type->find('all'));
                                    } else {
                                        $this->Session->setFlash(__('lblnotsavemsg'));
                                    }
                                } else {
                                    $this->Session->setFlash(__('lblduplicatemsg'));
                                }
                            }
                        }
//                        
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function document_execution_type_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('document_execution_type');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->document_execution_type->id = $id;
                if ($this->document_execution_type->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'document_execution_type'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

//    public function errorcode() {
//        try {
//            $this->check_role_escalation();
//            $this->loadModel('State');
//            $this->loadModel('State');
//            $this->loadModel('NGDRSErrorCode');
//            $this->set('selecterrorcode', NULL);
//            $this->set('actiontypeval', NULL);
//            $this->set('hfactionval', NULL);
//            $this->set('hfid', NULL);
//            $this->set('hfupdateflag', NULL);
////$this->set('laug', NULL);
//
//            $this->loadModel('language');
//            $this->loadModel('mainlanguage');
////languages are loaded firstly from config (from table)
//            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
//                    array(
//                        'table' => 'ngdrstab_conf_language',
//                        'alias' => 'conf',
//                        'type' => 'inner',
//                        'foreignKey' => false,
//                        'conditions' => array('conf.language_id = mainlanguage.id')
//                    )), 'order' => 'conf.language_id ASC'
//            ));
//            $this->set('languagelist', $languagelist);
//            $this->set('errorcoderecord', NULL);
//            $user_id = $this->Auth->User("user_id");
//            $stateid = $this->Auth->User("state_id");
//            $laug = $this->Session->read("sess_langauge");
//            $this->set('laug', $laug);
//            $date = date('Y/m/d H:i:s');
//            $created_date = date('Y/m/d');
//            $user_id = $this->Auth->User("user_id");
//            $this->request->data['errorcode'] ['req_ip'] = $this->request->clientIp();
//            $this->request->data['errorcode']['user_id'] = $user_id;
//            $this->request->data['errorcode']['created'] = $created_date;
//            $this->request->data['errorcode']['state_id'] = $stateid;
//            $errcode = $this->NGDRSErrorCode->find('list', array('fields' => array('error_code', 'error_code'), 'order' => array('error_code_id' => 'ASC')));
//            $this->set('errorcodedata', $errcode);
//            $errorcoderecord = $this->NGDRSErrorCode->find('all');
//            $this->set('errorcoderecord', $errorcoderecord);
//            $fieldlist = array();
//            $fielderrorarray = array();
//            foreach ($languagelist as $languagecode) {
//                if ($languagecode ['mainlanguage']['language_code'] == 'en') {
//                    $fieldlist['error_messages_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_maxlength255';
//                } else {
//                    $fieldlist['error_messages_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",is_maxlength255";
//                }
//            }
//            $fieldlist['error_code']['select'] = '';
//            $this->set('fieldlist', $fieldlist);
//            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
//
//            if ($this->request->is('post')) {
//                $this->check_csrf_token($this->request->data['errorcode']['csrftoken']);
//                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
//                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
//                $json = $file->read(true, 'r');
//                $alerts = json_decode($json, TRUE);
//                //   PR($alerts);EXIT;
//                $actiontype = $_POST['actiontype'];
//                $hfid = $_POST['hfid'];
//                $this->set('hfid', $hfid);
//                $hfactionval = $_POST['hfaction'];
//                if ($actiontype == '1') {
//                    $this->set('actiontypeval', $actiontype);
//                    $this->set('hfactionval', $hfactionval);
//                    unset($this->request->data['errorcode']['error_code']);
//                    if ($hfactionval == 'S') {
//                        if ($this->request->data['hfupdateflag'] == 'Y') {
//                            $this->request->data['errorcode']['error_code_id'] = $this->request->data['hfid'];
//                            $actionvalue = "lbleditmsg";
//                            // $adbc = $alerts['errorcode']['btnupdate'][$laug];
//                        } else {
//                            $actionvalue = "lblsavemsg";
//                            ///   $adbc = $alerts['errorcode']['btnadd'][$laug];
//                        }
//                        $this->request->data['errorcode'] = $this->istrim($this->request->data['errorcode']);
//                        $errarr = $this->validatedata($this->request->data['errorcode'], $fieldlist);
//                        if ($this->ValidationError($errarr)) {
//                            if ($this->NGDRSErrorCode->save($this->request->data['errorcode'])) {
//                                // $this->Session->setFlash("$adbc");
//                                $this->Session->setFlash($actionvalue);
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'errorcode'));
//                                $this->set('errorcoderecord', $this->NGDRSErrorCode->find('all'));
//                            } else {
//                                //  $this->Session->setFlash($alerts['errorcode']['btndelete'][$laug]);
//                                $this->Session->setFlash("deleted");
//                            }
//                        }
//                    }
//                    if ($actiontype == 2) {
//                        $this->set('hfupdateflag', 'Y');
//                    }
//                }
//            }
//            $this->Session->write("randamkey", rand(111111, 999999));
//        } catch (Exception $ex) {
//            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage()));
//            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
//        }
//        $this->set_csrf_token();
//    }
//
//    public function errorcode_delete($id = null) {
//        try {
//            $this->autoRender = false;
//            $this->loadModel('NGDRSErrorCode');
//            $laug = $this->Session->read("sess_langauge");
//            $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
//            $json = $file->read(true, 'r');
//            $alerts = json_decode($json, TRUE);
//            $id = $this->decrypt($id, $this->Session->read("randamkey"));
//            if (isset($id) && is_numeric($id)) {
//                $this->NGDRSErrorCode->error_code_id = $id;
//                if ($this->NGDRSErrorCode->delete($id)) {
//                    $this->Session->setFlash($alerts['divisionnew']['btndelete'][$laug]);
//                    return $this->redirect(array('action' => 'errorcode'));
//                }
//            }
//        } catch (exception $ex) {
//            
//        }
//    }
    public function errorcode() {
        try {
            $this->check_role_escalation();
            $this->loadModel('State');
            $this->loadModel('State');
            $this->loadModel('NGDRSErrorCode');
            $this->set('selecterrorcode', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
//$this->set('laug', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
//languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $this->set('errorcoderecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $user_id = $this->Auth->User("user_id");


            $errcode = $this->NGDRSErrorCode->find('list', array('fields' => array('error_code', 'error_code'), 'order' => array('error_code_id' => 'ASC')));
            $this->set('errorcodedata', $errcode);
            $errorcoderecord = $this->decode_special_char($this->NGDRSErrorCode->find('all'));
            $this->set('errorcoderecord', $errorcoderecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode ['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['error_messages_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_maxlength100';
                } else {
                    $fieldlist['error_messages_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
            $fieldlist['error_code']['text'] = 'is_alphaunderscore'; //ID
            ///    $fieldlist['hfaction']['text'] = ''; //Y/N
            //    $fieldlist['hfid']['text'] = 'is_integer'; //ID
            //  $fieldlist['hfupdateflag']['text'] = ''; //Y/N
            $fieldlist['error_code_id']['text'] = 'is_integer'; //ID
            //$fieldlist['error_code']['text'] = 'is_integer';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {

                $this->check_csrf_token($this->request->data['errorcode']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                //   PR($alerts);EXIT;
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);

                    if ($hfactionval == 'S') {
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['errorcode']['error_code_id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['errorcode']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            ///   $adbc = $alerts['errorcode']['btnadd'][$laug];
                        }
                        $this->request->data['errorcode']['req_ip'] = $this->request->clientIp();
                        $this->request->data['errorcode']['user_id'] = $user_id;
                        $this->request->data['errorcode']['actiontype'] = $actiontype;
                        $this->request->data['errorcode']['hfaction'] = $hfactionval;
                        $this->request->data['errorcode']['hfaction'] = $hfid;
                        $this->request->data['errorcode']['created'] = $created_date;
                        $this->request->data['errorcode']['state_id'] = $stateid;
//                        $this->request->data['errorcode']['hfaction'] = $hfupdateflag;

                        $this->request->data['errorcode'] = $this->istrim($this->request->data['errorcode']);
                        // pr($this->request->data['errorcode']);
                        $errarr = $this->validatedata($this->request->data['errorcode'], $fieldlist);
                        // pr($errarr);exit;
                        if ($this->ValidationError($errarr)) {
                            unset($this->request->data['errorcode']['error_code']);
                            $this->request->data['errorcode'] = $this->encode_special_char($this->request->data['errorcode']);
                            if ($this->NGDRSErrorCode->save($this->request->data['errorcode'])) {
                                // $this->Session->setFlash("$adbc");
                                $this->Session->setFlash($actionvalue);
                                $this->redirect(array('controller' => 'Masters', 'action' => 'errorcode'));
                                $this->set('errorcoderecord', $this->NGDRSErrorCode->find('all'));
                            } else {
                                //  $this->Session->setFlash($alerts['errorcode']['btndelete'][$laug]);
                                $this->Session->setFlash("deleted");
                            }
                        }
                        $this->Session->setFlash("Please check validation error");
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
            $this->Session->write("randamkey", rand(111111, 999999));
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage()));
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function errorcode_delete($id = null) {
        try {
            $this->autoRender = false;
            $this->loadModel('NGDRSErrorCode');
            $laug = $this->Session->read("sess_langauge");
            $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
            $json = $file->read(true, 'r');
            $alerts = json_decode($json, TRUE);
            $id = $this->decrypt($id, $this->Session->read("randamkey"));
            if (isset($id) && is_numeric($id)) {
                $this->NGDRSErrorCode->error_code_id = $id;
                if ($this->NGDRSErrorCode->delete($id)) {
                    $this->Session->setFlash($alerts['divisionnew']['btndelete'][$laug]);
                    return $this->redirect(array('action' => 'errorcode'));
                }
            }
        } catch (exception $ex) {
            
        }
    }

//   public function office_village_linking() {
//       try {
//        $this->loadModel('office_village_linking');
//        $language = $this->Session->read("sess_langauge");
//        $this->set('language', $language);
//        $user_id = $this->Auth->User("user_id");
//        $this->set('actiontypeval', NULL);
//        $this->set('hfid', NULL);
//        $this->set('hfupdateflag', NULL);
//        $this->set('hfactionval', NULL);
//        $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'order' => array('district_name_' . $language => 'ASC'))));
//        $this->set('corpclasslist', ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corp_id', 'governingbody_name_' . $language), 'order' => array('governingbody_name_' . $language => 'ASC'))));
//        $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('id', 'taluka_name_ll'), 'order' => array('taluka_name_ll' => 'ASC'))));
//        $this->set('officedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_' . $language), 'order' => array('office_name_' . $language => 'ASC'))));
//          $fieldlist = array();
//            $fieldlist['district_id']['select'] = 'is_select_req';
//            $fieldlist['taluka_id']['select'] = 'is_select_req';
////             $fieldlist['corp_id']['select'] = 'is_emptyornumallow';
//               $fieldlist['office_id']['select'] = 'is_select_req';
//            $this->set('fieldlist', $fieldlist);
//          $this->set('result_codes', $this->getvalidationruleset($fieldlist));
//        if ($this->request->is('post')) {
//            $this->check_csrf_token($this->request->data['office_village_linking']['csrftoken']);
//            $data ['district_id']= $this->request->data['office_village_linking']['district_id'];
//            $data ['taluka_id']= $this->request->data['office_village_linking']['taluka_id'];
//             $data ['office_id']= $this->request->data['office_village_linking']['office_id'];
//              $data ['corp_id']= $this->request->data['office_village_linking']['corp_id'];
//            
//            
//            if(!is_numeric($data['corp_id'])){
//                unset($data['corp_id']);
//            }
//            $actiontype = $_POST['actiontype'];
//            $hfactionval = $_POST['hfaction'];
//            $hfid = $_POST['hfid'];
//            $this->set('hfid', $hfid);
//            if ($actiontype == '1') {
//                $this->set('actiontypeval', $actiontype);
//                $this->set('hfactionval', $hfactionval);
//            }
//
//            if ($hfactionval == 'S') {
//                $this->request->data['office_village_linking']['req_ip'] = $this->request->clientIp();
//                $this->request->data['office_village_linking']['user_id'] = $user_id;
//                // $this->request->data['language']['created_date'] = $created_date;
//                if ($this->request->data['hfupdateflag'] == 'Y') {
//                    $this->request->data['office_village_linking']['id'] = $this->request->data['hfid'];
//                    $actionvalue = "lbleditmsg";
//                } else {
//                    $actionvalue = "lblsavemsg";
//                }
//                unset($data['zazzz']);
//
//                $deletevillage = $this->office_village_linking->deleteAll($data);
//
////                       pr($this->request->data);exit;
////                         unset($this->request->data['office_village_linking']['zazzz']);
//                
//                
//              
//                if(isset($this->request->data['village_id'])){
//                      //pr($this->request->data);exit;
//                foreach ($this->request->data['village_id'] as $key => $value) {
//                    $data['village_id'] = $value;
////                           pr($data);exit;
//                    unset($data['zazzz']);
//
//                    //$value=['village_id'][''];
//                     $this->office_village_linking->create();
//                    $this->office_village_linking->Save($data);
//                }
//                }
//                $this->Session->setFlash(__($actionvalue));
//                $this->redirect(array('controller' => 'Masters', 'action' => 'office_village_linking'));
//            }
//        }
//        $this->set_csrf_token();
//        } catch (Exception $ex) {
//            pr($ex->getMessage());exit;
//            $this->Session->setFlash(
//                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
//            );
//         return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
//        }
//    }

    public function Verifycode() {
        $this->loadModel('conf_reg_bool_info');
        $regconf = $this->conf_reg_bool_info->find("all", array('conditions' => array('reginfo_id' => 63)));
        $regconfvillagemappingcode = $regconf[0]['conf_reg_bool_info']['info_value'];
        if ($regconfvillagemappingcode == $_POST['villagemappingcode']) {
            $msg = 'Verified Successfully...! Please Enter Confirm Village Mapping Code.';
            echo $msg;
            exit;
        } else {
            $msg = 'Please Enter Valid Village Mapping Code ...!';
            echo $msg;
            exit;
        }
    }

    public function office_village_linking() {
        try {
            $this->loadModel('office_village_linking');
            $this->loadModel('conf_reg_bool_info');
            $language = $this->Session->read("sess_langauge");
            $this->set('language', $language);
            $user_id = $this->Auth->User("user_id");
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $language), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('corpclasslist', ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corp_id', 'governingbody_name_' . $language), 'order' => array('governingbody_name_' . $language => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('id', 'taluka_name_ll'), 'order' => array('taluka_name_ll' => 'ASC'))));
            $this->set('officedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_' . $language), 'order' => array('office_name_' . $language => 'ASC'))));
            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
//             $fieldlist['corp_id']['select'] = 'is_emptyornumallow';
            $fieldlist['office_id']['select'] = 'is_select_req';

            $fieldlist['villagemappingcode']['text'] = 'is_numeric';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
//            pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['office_village_linking']['csrftoken']);
                $data ['district_id'] = $this->request->data['office_village_linking']['district_id'];
                $data ['taluka_id'] = $this->request->data['office_village_linking']['taluka_id'];
                $data ['office_id'] = $this->request->data['office_village_linking']['office_id'];
                $data ['corp_id'] = $this->request->data['office_village_linking']['corp_id'];


                if (!is_numeric($data['corp_id'])) {
                    unset($data['corp_id']);
                }
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }

                if ($hfactionval == 'V') {

                    $regconf = $this->conf_reg_bool_info->find("all", array('conditions' => array('reginfo_id' => 63)));
//                pr($regconf);
                    $regconfvillagemappingcode = $regconf[0]['conf_reg_bool_info']['info_value'];
                    $confrmvillagemappingcode = $this->request->data['office_village_linking']['confrmvillagemappingcode1'];
                    if ($regconfvillagemappingcode == $confrmvillagemappingcode) {
//                     pr('ok');exit;
                        $hfactionval = 'S';
//                      pr($hfactionval);exit;
                    } else {
                        $this->Session->setFlash(__("Confirm Village Mapping Verification Code Not Match..!"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'office_village_linking'));
                    }

//                 pr($regconf);exit;
                }


                if ($hfactionval == 'S') {

//                 $regconf = $this->conf_reg_bool_info->find("all", array('conditions' => array('reginfo_id' => 60)));
//                 pr($regconf);exit;

                    $this->request->data['office_village_linking']['req_ip'] = $this->request->clientIp();
                    $this->request->data['office_village_linking']['user_id'] = $user_id;
                    // $this->request->data['language']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['office_village_linking']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    unset($data['zazzz']);

                    $deletevillage = $this->office_village_linking->deleteAll($data);

//                       pr($this->request->data);exit;
//                         unset($this->request->data['office_village_linking']['zazzz']);



                    if (isset($this->request->data['village_id'])) {
                        //pr($this->request->data);exit;
                        foreach ($this->request->data['village_id'] as $key => $value) {
                            $data['village_id'] = $value;
//                           pr($data);exit;
                            unset($data['zazzz']);

                            //$value=['village_id'][''];
                            $this->office_village_linking->create();
                            $this->office_village_linking->Save($data);
                        }
                    }
                    $this->Session->setFlash(__($actionvalue));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'office_village_linking'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex->getMessage());
            exit;
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function get_office_data() {

        $this->loadModel('office_village_linking');
        $this->autoRender = false;
        $village = $this->office_village_linking->find('list', array('fields' => array('id', 'village_id'), 'conditions' => array('office_id' => $_GET['office'])));
        return json_encode($village);
    }

    public function empjoining() {
        try {
            $this->loadModel('empjoining');
            $this->loadModel('employee');
            $this->loadModel('emptransfer');
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hftransfer_id', NULL);
            $this->set('hfupdateflag', NULL);
            $stateid = $this->Auth->User("state_id");
            $user_id = $this->Auth->User("user_id");
            $created_date = date('Y/m/d H:i:s');
            $req_ip = $_SERVER['REMOTE_ADDR'];

//            $this->set('office', $emptransferrecord);


            $this->set('officedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdata', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
            $this->set('employeedata', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_id', 'emp_fname'))));

            $empjoin = $this->empjoining->query("select * from ngdrstab_trn_employee_transfer et
                                                inner join ngdrstab_mst_office of on of.office_id=et.transfer_office_id where joining_flag='N'");
            $this->set('empjoin', $empjoin);

            $empjoining = $this->empjoining->query("select e.joining_date,e.joining_remark,d.desg_desc_en,o.office_name_en,e.employee_name from ngdrstab_trn_employee_joining e 
                                              inner join ngdrstab_mst_designation d on d.desg_id=e.joining_desi_id 
                                              inner join ngdrstab_mst_office o on o.office_id=e.joining_office_id");
//              pr($emptransferrecord);exit;
            $this->set('empjoining', $empjoining);

            $fieldlist = array();
            $fielderrorarray = array();
            $fieldlist['joining_office_id']['select'] = 'is_select_req';
            $fieldlist['joining_desi_id']['select'] = 'is_select_req';
            $fieldlist['joining_remark']['text'] = 'is_alpha';

            $fieldlist['joining_date']['text'] = 'is_required';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));


            if ($this->request->is('post')) {
//                pr($_POST['hftransfer_id']);exit;
//                $this->check_csrf_token($this->request->data['empjoining']['csrftoken']);
                $this->request->data['empjoining']['state_id'] = $this->Auth->User('state_id');
                $this->request->data['empjoining']['user_id'] = $this->Auth->User('user_id');
                $this->request->data['empjoining']['created'] = $created_date;
                $this->request->data['empjoining']['req_ip'] = $_SERVER['REMOTE_ADDR'];
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hftransfer_id', $_POST['hftransfer_id']);
                if ($_POST['actiontype'] == '1') {
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['empjoining']['transfer_id'] = $this->request->data['hftransfer_id'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['empjoining']['emp_code'] = $this->request->data['emp_code'];
                    $this->request->data['empjoining']['employee_name'] = $this->request->data['employee_name'];
                    $this->request->data['empjoining']['old_office_name'] = $this->request->data['old_office_name'];
                    $this->request->data['empjoining']['old_designation_name'] = $this->request->data['old_designation_name'];

//                        $transferoffice = $this->request->data['emptransfer']['transfer_office_id'];
//
//                        $empid = $this->request->data['emptransfer']['employee_id'];
//                     $empjoinsave = $this->emptransfer->query("insert into ngdrstab_trn_employee_joining('employee_name','old_office_name','old_designation_name')values()");
                    $errarr = $this->validatedata($this->request->data['empjoining'], $fieldlist);


                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
//  pr($this->request->data);exit;
                        $count = $this->empjoining->find('count', array('conditions' => array('emp_code' => $this->request->data['empjoining']['emp_code'])));
//              if ($count == 0 && $_POST['hftransfer_id']) {     
                        if ($this->request->data['empjoining']['joining_office_id'] != NULL && $this->request->data['empjoining']['emp_code'] != NULL) {

//                            && $_POST['hftransfer_id']
                            if ($count == 0) {
                                if ($this->empjoining->save($this->request->data['empjoining'])) {

                                    $emp = $this->emptransfer->query("update ngdrstab_trn_employee_transfer set joining_flag='Y'");

                                    $test = $this->emptransfer->query("update ngdrstab_mst_user  SET activeflag=? ,office_id=? where emp_code=?", array('Y', $this->request->data['empjoining']['joining_office_id'], $this->request->data['empjoining']['emp_code']));
                                    // $udateflag = $this->biometric->query("Update ngdrstab_mst_user set biometric_registration_flag=? where user_id=?", array('Y', $userid));
                                    $emp_id = $this->empjoining->query("update  ngdrstab_mst_employee set office_id=? where emp_code=?", array($this->request->data['empjoining']['joining_office_id'], $this->request->data['empjoining']['emp_code']));

                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'empjoining'));
                                } else {
                                    $this->Session->setFlash(__("lblnotsavemsg"));
                                }
                            } else {
                                $this->Session->setFlash(__("Record Already Exists"));
                            }
                        } else {
                            $this->Session->setFlash(__("Record Not available for joining for this office."));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'empjoining'));
                        }
                    }
                }

                if ($_POST['actiontype'] == '3') {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'empjoining'));
                }
            }
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function get_office_name() {

        try {

            $this->loadModel('employee_transfer');
            if (isset($_POST['office'])) {

                $office = $_POST['office'];
//                       echo $office;
                $emptransferrecord = $this->employee_transfer->query("select distinct e.emp_code,e.id, emp.emp_fname,d.desg_desc_en,o.office_name_en ,desi.desg_desc_en from ngdrstab_trn_employee_transfer e 
                                                                  inner join ngdrstab_mst_employee emp on emp.emp_code=e.emp_code
                                                                  inner join ngdrstab_mst_designation d on d.desg_id=e.transfer_desi_id 
                                                                  inner join ngdrstab_mst_office o on o.office_id=e.previous_office_id
                                                                  inner join ngdrstab_mst_designation desi on desi.desg_id=e.transfer_desi_id  where transfer_office_id=$office 
                                                 ");
//             $result_array = array('office' => $emptransferrecord);
//             pr($emptransferrecord);exit;
                $this->set('office', $emptransferrecord);
            }
        } catch (Exception $ex) {
            
        }
    }

    public function get_selected_data() {
        try {
            $this->autoRender = false;
            $this->loadModel('employee_transfer');
            if (isset($_GET['emp_code'])) {
                $demo = $_GET['emp_code'];
//                pr($demo);exit;
                $fetchdata = $this->employee_transfer->query("select distinct  e.id, emp.emp_fname,e.emp_code,d.desg_desc_en,o.office_name_en ,desi.desg_desc_en from ngdrstab_trn_employee_transfer e 
                                                                  inner join ngdrstab_mst_employee emp on emp.emp_code=e.emp_code
                                                                  inner join ngdrstab_mst_designation d on d.desg_id=e.transfer_desi_id 
                                                                  inner join ngdrstab_mst_office o on o.office_id=e.previous_office_id
                                                                  inner join ngdrstab_mst_designation desi on desi.desg_id=e.transfer_desi_id where  e.emp_code=?", array($demo));

//                  $this->set('office', $fetchdata);
                return json_encode($fetchdata[0][0]);
            }
        } catch (Exception $ex) {
            
        }
    }

    public function emptransfer() {
        try {
//            $this->loadModel('emptransfer');
            $this->loadModel('employee_transfer');
            $this->loadModel('employee');
            $stateid = $this->Auth->User("state_id");
            $user_id = $this->Auth->User("user_id");
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
//            $relieve = date('Y-m-d', strtotime(['relieve_date']));
//        $myfile = fopen(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', "r") or die("Unable to open file!");
//        echo fread($myfile,filesize("webdictionary.txt"));
//                
//
////              $file->read(json_encode($json2array));
            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);
//            pr($json2array);
            // $this->set('employee_name', $json2array['employee']);
            $this->set('officedata', ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_name_en' => 'ASC'))));
            $this->set('designationdata', ClassRegistry::init('designation')->find('list', array('fields' => array('desg_id', 'desg_desc_en'), 'order' => array('desg_desc_en' => 'ASC'))));
            $this->set('Empcode', ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'order' => array('emp_code' => 'ASC'))));
            $this->set('emptransferrecord', $this->employee_transfer->find('all'));
//            $emptransferrecord = $this->employee_transfer->query("select distinct emp.emp_fname from ngdrstab_trn_employee_transfer e  inner join ngdrstab_mst_employee emp on emp.emp_id=e.employee_id");

            $emptransferrecord = $this->employee_transfer->query("select distinct emp.emp_fname from ngdrstab_trn_employee_transfer e  inner join ngdrstab_mst_employee emp on emp.emp_code=e.emp_code");

            $this->set('emptransferrecord', $emptransferrecord);

            $empgrid = $this->employee_transfer->query("select of.office_name_en,emp.emp_fname,o.office_name_en as transfer_office_name,d.desg_desc_en,et.transfer_fromdate,et.relieve_date from ngdrstab_trn_employee_transfer et 
                                                     inner join ngdrstab_mst_employee emp on emp.emp_code=et.emp_code
                                                   inner join ngdrstab_mst_office of on of.office_id=et.previous_office_id
                                                   inner join ngdrstab_mst_office o on o.office_id=et.transfer_office_id
                                                   inner join ngdrstab_mst_designation d on d.desg_id=et.transfer_desi_id where et.joining_flag='N'");
//            pr($empgrid);exit;
            $this->set('empgrid', $empgrid);
            $fieldlist = array();
            $fieldlist['previous_office_id']['select'] = 'is_select_req';
            $fieldlist['emp_code']['select'] = 'is_employee_code';
            //$fieldlist['employee_id']['select'] = 'is_employee_code';
            $fieldlist['transfer_office_id']['select'] = 'is_select_req';
            $fieldlist['transfer_desi_id']['select'] = 'is_select_req';
            $fieldlist['transfer_fromdate']['text'] = 'is_required';
            $fieldlist['relieve_date']['text'] = 'is_required';
            $fieldlist['transfer_remark']['text'] = 'is_alpha';
//               $fieldlist['transfer_fromdate']['text'] = 'is_required';
//                $fieldlist['transfer_fromdate']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));




            if ($this->request->is('post')) {
//                $this->check_csrf_token($this->request->data['emptransfer']['csrftoken']);
//                $data=$this->request->data;
//                $emp_code=$data['emptransfer']['emp_code'];
//
//                $emooffdesi = $this->employee->query("select distinct e.*, d.desg_desc_en, o.office_name_en from ngdrstab_mst_employee  e 
//                                                       inner join ngdrstab_mst_designation d on d.desg_id=e.designation_id
//                                                        inner join ngdrstab_mst_office o on o.office_id=e.office_id where emp_code=?", array($emp_code));
//////                pr($emooffdesi);exit;   
//               $this->set('emooffdesi',$emooffdesi);
//             

                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];

                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['emptransfer']['req_ip'] = $this->request->clientIp();
                        $this->request->data['emptransfer']['user_id'] = $user_id;
                        $this->request->data['emptransfer']['created_date'] = $created_date;
                        $this->request->data['emptransfer']['state_id'] = $stateid;
//   pr($this->request->data);exit;
//   echo ($this->request->data['emptransfer']['relieve_date']);exit;
//                        echo (date('Y-m-d', strtotime(str_replace('/', '-',$this->request->data['emptransfer']['relieve_date']))));exit;
//                      echo(str_replace('/', '-',$this->request->data['emptransfer']['relieve_date']));exit;
//                        $this->request->data['emptransfer']['transfer_fromdate'] = date('Y-m-d', strtotime('transfer_fromdate'));
//                        $this->request->data['emptransfer']['relieve_date'] = date('Y-m-d', strtotime('relieve_date'));
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['emptransfer']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }

//  pr($this->request->data);exit;
                        $transferoffice = $this->request->data['emptransfer']['transfer_office_id'];
//                                  pr($transferoffice);exit;
                        $empid = $this->request->data['emptransfer']['emp_code'];
//                        pr($empid);exit;
                        $errarr = $this->validatedata($this->request->data['emptransfer'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {


//                        pr($this->request->data);exit;

                            $count = $this->employee_transfer->find('count', array('conditions' => array('emp_code' => $this->request->data['emptransfer']['emp_code'])));
//              pr($count);exit;
//                            pr($_POST['hfid']);exit; 
//                            && $_POST['hfid']
                            if ($count == 0) {


                                if ($this->employee_transfer->save($this->request->data['emptransfer'])) {

                                    //   $emp = $this->employee->query("update  ngdrstab_mst_employee set office_id=? where emp_code=?",array($transferoffice,$empid));
                                    $emp = $this->employee->query("update  ngdrstab_mst_user set activeflag=? where emp_code=?", array('N', $empid));

                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'emptransfer'));
//                                $this->set('mainmenurecord', $this->RegistrationMainmenu->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__("Record Already Exists"));
                            }
                        } // else close
                    }
                }
                if ($actiontype == '2') {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'emptransfer'));
                }
            }
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function get_employee_name() {

        try {
            $this->loadModel('employee');

            if (isset($_GET['emp'])) {

                $emp = $_GET['emp'];
//               echo $emp;exit;
//                $employeelist = ClassRegistry::init('employee')->find('list', array('fields' => array('employee.emp_id','employee.emp_fname'), 'conditions' => array('office_id' => $emp)));
//              pr($employeelist);exit;
                $employeelist = ClassRegistry::init('employee')->find('list', array('fields' => array('emp_code', 'name'), 'conditions' => array('office_id' => $emp), 'order' => array('emp_code' => 'ASC')));
                $result_array = array('employee' => $employeelist);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
//                pr($json2array);exit;
                $json2array['employee'] = $employeelist;
//                pr($employeelist);exit;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));

//                $this->set('employee_name', $json2array);
                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function get_designation() {
        try {
            $this->loadModel('designation');
            if (isset($_GET['desi'])) {
                $desi = $_GET['desi'];
                $desigantionlist = ClassRegistry::init('designation')->find('list', array('fields' => array('designation.desg_id', 'designation.desg_desc_en'), 'conditions' => array('desg_id' => $desi)));
//                pr($desigantionlist);exit;
                $result_array = array('designation' => $desigantionlist);
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
                $json = $file->read(true, 'r');
                $json2array = json_decode($json, TRUE);
                $json2array['designation'] = $desigantionlist;
                $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json', true);
                $file->write(json_encode($json2array));
                echo json_encode($result_array);
                exit;
            } else {
                header('Location:../cterror.html');
                exit;
            }
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function getgraph() {
        try {
            $this->loadModel('damblkdpnd');
            $stateid = $this->Auth->User("state_id");
//            $animal_name = 'wombat';
//            $data = $this->damblkdpnd->query("SELECT total,record_date FROM animals WHERE name=?", array($animal_name));
//            $data = $this->damblkdpnd->query("SELECT officename,empno FROM office");
            $data = $this->damblkdpnd->query("SELECT  
                                                OFFICE.office_id,
                                                OFFICE.office_name_en,
                                                SUM(PAY.pamount)  as income
                                                FROM ngdrstab_mst_office OFFICE
                                                LEFT JOIN ngdrstab_trn_application_submitted APP ON APP.office_id=OFFICE.office_id
                                                LEFT JOIN ngdrstab_trn_payment_details  PAY ON PAY.token_no=APP.token_no
                                                GROUP BY OFFICE.office_id,OFFICE.office_name_en");
//            $data = ClassRegistry::init('Animals')->find('list', array('fields' => array('total', 'record_date'),'conditions' => array('name' => array($animal_name))));
//            pr($data);
            $data1 = array();
            foreach ($data as $key => $value) {
                $data1[$key] = $data[$key][0];
            }
//            pr($data1);
            echo json_encode($data1);
            exit;
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function graph1() {
        
    }

    public function article_screen_mapping() {
        try {
            array_map(array($this, 'loadModel'), array('article_screen_mapping', 'NGDRSErrorCode'));
            $user_id = $this->Auth->User("user_id");
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('articlelist', ClassRegistry::init('article')->find('list', array('fields' => array('article_id', 'article_desc_' . $lang), 'order' => array('article_desc_' . $lang => 'ASC'))));
            $this->set('minorlist', ClassRegistry::init('minorfunction')->find('list', array('fields' => array('id', 'function_desc_' . $lang), 'order' => array('function_desc_' . $lang => 'ASC'), 'conditions' => array('dispaly_flag' => 'O'))));
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $articlegrid = $this->article_screen_mapping->query("select distinct asm.article_id,asm.minorfun_id,asm.id,a.article_desc_en,mf.function_desc_en from ngdrstab_mst_article_screen_mapping asm
                                                    inner join ngdrstab_mst_article a on a.article_id=asm.article_id
                                                    inner join ngdrstab_mst_minorfunctions mf on mf.id=asm.minorfun_id");
            $this->set('articlegrid', $articlegrid);

            $fieldlist = array();
            $fieldlist['article_id']['select'] = 'is_select_req';
            $fieldlist['minorfun_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['article_screen_mapping']['csrftoken']);


                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['article_screen_mapping']['req_ip'] = $this->request->clientIp();
                    $this->request->data['article_screen_mapping']['user_id'] = $user_id;
                    $this->request->data['article_screen_mapping']['state_id'] = $stateid;
                    $this->request->data['article_screen_mapping']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['article_screen_mapping']['id'] = $this->request->data['hfid'];

                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['article_screen_mapping'] = $this->istrim($this->request->data['article_screen_mapping']);
                    $errarr = $this->validatedata($this->request->data['article_screen_mapping'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        if ($this->article_screen_mapping->save($this->request->data['article_screen_mapping'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'article_screen_mapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'article_screen_mapping'));
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function article_screen_mapping_delete($id = null) {
        try {
            $this->autoRender = false;
            $this->loadModel('article_screen_mapping');
            if (isset($id) && is_numeric($id)) {
                $this->article_screen_mapping()->id = $id;
                if ($this->article_screen_mapping->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'article_screen_mapping'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    //yogesh//
    public function partytype() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'partytype', 'mainlanguage'));
            $user_id = $this->Auth->User("user_id");
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('partytyperecord', $this->partytype->find('all'));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['party_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['party_type_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'unicode_rule_' . $languagecode['mainlanguage']['language_code'];
                }
            }
//               $fieldlist['article_id']['select'] = 'is_select_req'; 
//             $fieldlist['minorfun_id']['select'] = 'is_select_req'; 

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['partytype']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $duplicateflag = 'S';
                    $this->request->data['partytype']['req_ip'] = $this->request->clientIp();
                    $this->request->data['partytype']['user_id'] = $user_id;
                    $this->request->data['partytype']['state_id'] = $stateid;
                    $this->request->data['partytype']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['partytype']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['partytype'] = $this->istrim($this->request->data['partytype']);
//                    pr( $this->request->data['partytype']['party_type_desc_en'] );exit;
//                    $party_type = $this->request->data['partytype']['party_type_desc_en'];
//                    $party_type1 = $this->partytype->query("select party_type_desc_en from ngdrstab_mst_party_type where party_type_desc_en like '%$party_type%' ");
                    $errarr = $this->validatedata($this->request->data['partytype'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        $duplicate['Table'] = 'ngdrstab_mst_party_type';
                        $duplicate['Fields'] = array('party_type_desc_en', 'party_type_desc_ll');
                        $duplicate['Action'] = $duplicateflag; //U    
                        $duplicate['PrimaryKey'] = 'id';
                        $checkd = $this->check_duplicate($duplicate, $this->request->data['partytype']);
                        if ($checkd) {
                            if ($this->partytype->save($this->request->data['partytype'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'partytype'));
                                $this->set('partytyperecord', $this->partytype->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        } else {
                            $this->Session->setFlash(__('lblduplicatemsg'));
                        }

//                        if (empty($party_type1)) {
//                            if ($this->partytype->save($this->request->data['partytype'])) {
//                                $this->Session->setFlash(__($actionvalue));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'partytype'));
//                            } else {
//                                $this->Session->setFlash(__('lblnotsavemsg'));
//                            }
//                        } else {
//                            $this->Session->setFlash(__('Party Already Exist'));
//                        }
                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'partytype'));
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            
        }
    }

    public function delete_partytype($id = null) {
        try {

            $this->autoRender = false;
            $this->loadModel('partytype');

            if (isset($id) && is_numeric($id)) {

                $this->partytype()->id = $id;

                if ($this->partytype->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'partytype'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    //kalyani
    public function salutation() {
        try {
            $this->loadModel('salutation');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->salutation->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['salutation_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength50';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['salutation_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['salutation_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to50";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['salutation']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['salutation']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['salutation']['req_ip'] = $this->request->clientIp();
                        $this->request->data['salutation']['user_id'] = $user_id;
                        $this->request->data['salutation']['created_date'] = $created_date;
                        $this->request->data['salutation']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['salutation']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['salutation']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['salutation']['btnadd'][$laug];
                        }
                        $this->request->data['salutation'] = $this->istrim($this->request->data['salutation']);
                        //  pr($this->request->data['salutation']);exit;
                        $errarr = $this->validatedata($this->request->data['salutation'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->salutation->save($this->request->data['salutation'])) {
//                                $this->Session->setFlash(__("$message"));
                                $this->Session->setFlash(__($actionvalue));
//                                $this->Session->setFlash($adbc);
                                $this->redirect(array('controller' => 'Masters', 'action' => 'salutation'));
                                $this->set('divisionrecord', $this->salutation->find('all'));
                            } else {
                                $this->Session->setFlash("lblnotsavemsg");
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function salutation_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('salutation');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'salutation') {
                $this->salutation->id = $id;
                if ($this->salutation->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'salutation'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function gender() {
        try {
            $this->loadModel('gender');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->gender->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['gender_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength50';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['gender_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['gender_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to50";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['gender']['csrftoken']);


                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['gender']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['gender']['req_ip'] = $this->request->clientIp();
                        $this->request->data['gender']['user_id'] = $user_id;
                        $this->request->data['gender']['created_date'] = $created_date;
                        $this->request->data['gender']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['gender']['id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['gender']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['gender']['btnadd'][$laug];
                        }
                        $this->request->data['gender'] = $this->istrim($this->request->data['gender']);
                        //  pr($this->request->data['gender']);exit;
                        $errarr = $this->validatedata($this->request->data['gender'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->gender->save($this->request->data['gender'])) {
//                                $this->Session->setFlash(__("$message"));
                                $this->Session->setFlash(__($actionvalue));
//                                $this->Session->setFlash($adbc);
                                $this->redirect(array('controller' => 'Masters', 'action' => 'gender'));
                                $this->set('divisionrecord', $this->gender->find('all'));
                            } else {
                                $this->Session->setFlash("lblnotsavemsg");
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function gender_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('gender');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'gender') {
                $this->gender->id = $id;
                if ($this->gender->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'gender'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function cast_category() {
        try {
            $this->loadModel('cast_category');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->cast_category->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['category_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['category_name_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['category_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['cast_category']['csrftoken']);


                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['cast_category']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['cast_category']['req_ip'] = $this->request->clientIp();
                        $this->request->data['cast_category']['user_id'] = $user_id;
                        $this->request->data['cast_category']['created_date'] = $created_date;
                        $this->request->data['cast_category']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['cast_category']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['cast_category']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['cast_category']['btnadd'][$laug];
                        }
                        $this->request->data['cast_category'] = $this->istrim($this->request->data['cast_category']);
                        //  pr($this->request->data['cast_category']);exit;
                        $errarr = $this->validatedata($this->request->data['cast_category'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_caste_category';
                            $duplicate['Fields'] = array('category_name_en', 'category_name_ll');
                            $duplicate['Action'] = $duplicateflag; //U  
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['cast_category']);
                            if ($checkd) {
                                if ($this->cast_category->save($this->request->data['cast_category'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'cast_category'));
                                    $this->set('unitrecord', $this->cast_category->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->cast_category->save($this->request->data['cast_category'])) {
////                                $this->Session->setFlash(__("$message"));
//                                $this->Session->setFlash(__("Record $actionvalue"));
////                                $this->Session->setFlash($adbc);
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'cast_category'));
//                                $this->set('divisionrecord', $this->cast_category->find('all'));
//                            } else {
//                                $this->Session->setFlash("lblnotsavemsg");
//                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {

            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function cast_category_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('cast_category');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'cast_category') {
                $this->cast_category->id = $id;
                if ($this->cast_category->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'cast_category'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function developedlandtype() {
        try {
            $this->loadModel('Developedlandtype');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->Developedlandtype->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['developed_land_types_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                    $fieldlist['developed_land_types_remark_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['salutation_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['developed_land_types_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                    $fieldlist['developed_land_types_remark_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['Developedlandtype']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['Developedlandtype']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['Developedlandtype']['req_ip'] = $this->request->clientIp();
                        $this->request->data['Developedlandtype']['user_id'] = $user_id;
                        $this->request->data['Developedlandtype']['created_date'] = $created_date;
                        $this->request->data['Developedlandtype']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Developedlandtype']['developed_land_types_id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['Developedlandtype']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['salutation']['btnadd'][$laug];
                        }
                        $this->request->data['Developedlandtype'] = $this->istrim($this->request->data['Developedlandtype']);
                        //  pr($this->request->data['Developedlandtype']);exit;
                        $errarr = $this->validatedata($this->request->data['Developedlandtype'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_developed_land_types';
                            $duplicate['Fields'] = array('developed_land_types_desc_en', 'developed_land_types_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U 
                            $duplicate['PrimaryKey'] = 'developed_land_types_id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['Developedlandtype']);
//                            pr($checkd);exit;
                            if ($checkd) {
                                if ($this->Developedlandtype->save($this->request->data['Developedlandtype'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'developedlandtype'));
                                    $this->set('divisionrecord', $this->Developedlandtype->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }

                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function Developedlandtype_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('Developedlandtype');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'Developedlandtype') {
                $this->Developedlandtype->id = $id;
                if ($this->Developedlandtype->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'Developedlandtype'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function identifire_type() {
        try {
            $this->loadModel('identifire_type');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->identifire_type->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['salutation_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['identifire_type']['csrftoken']);


                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['identifire_type']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['identifire_type']['req_ip'] = $this->request->clientIp();
                        $this->request->data['identifire_type']['user_id'] = $user_id;
                        $this->request->data['identifire_type']['created_date'] = $created_date;
                        $this->request->data['identifire_type']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['identifire_type']['type_id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['identifire_type']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['salutation']['btnadd'][$laug];
                        }
                        $this->request->data['identifire_type'] = $this->istrim($this->request->data['identifire_type']);
                        //  pr($this->request->data['identifire_type']);exit;
                        $errarr = $this->validatedata($this->request->data['identifire_type'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_identifier_type';
                            $duplicate['Fields'] = array('desc_en', 'desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U  
                            $duplicate['PrimaryKey'] = 'type_id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['identifire_type']);
                            if ($checkd) {
                                if ($this->identifire_type->save($this->request->data['identifire_type'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'identifire_type'));
                                    $this->set('divisionrecord', $this->identifire_type->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function identifire_type_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('identifire_type');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'identifire_type') {
                $this->identifire_type->id = $id;
                if ($this->identifire_type->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'identifire_type'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function identificatontype() {
        try {
            $this->loadModel('identificatontype');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->identificatontype->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['identificationtype_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['identificationtype_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['identificatontype']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['identificatontype']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['identificatontype']['req_ip'] = $this->request->clientIp();
                        $this->request->data['identificatontype']['user_id'] = $user_id;
                        $this->request->data['identificatontype']['created_date'] = $created_date;
                        $this->request->data['identificatontype']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['identificatontype']['identificationtype_id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['identificatontype']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['salutation']['btnadd'][$laug];
                        }
                        $this->request->data['identificatontype'] = $this->istrim($this->request->data['identificatontype']);
                        //  pr($this->request->data['identificatontype']);exit;
                        $errarr = $this->validatedata($this->request->data['identificatontype'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {

                            $duplicate['Table'] = 'ngdrstab_mst_identificationtype';
                            $duplicate['Fields'] = array('identificationtype_desc_en', 'identificationtype_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U 
                            $duplicate['PrimaryKey'] = 'identificationtype_id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['identificatontype']);
                            if ($checkd) {
                                if ($this->identificatontype->save($this->request->data['identificatontype'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'identificatontype'));
                                    $this->set('divisionrecord', $this->identificatontype->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }

        $this->set_csrf_token();
    }

    public function identificatontype_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('identificatontype');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'identifire_type') {
                $this->identificatontype->id = $id;
                if ($this->identificatontype->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'identificatontype'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function bank_master() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'bank_master', 'mainlanguage'));
            $user_id = $this->Auth->User("user_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");

            $this->set('laug', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('bankrecord', $this->bank_master->find('all'));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['bank_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['bank_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }


            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['bank_master']['csrftoken']);


                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    $check = $this->bank_master->query("SELECT MAX(bank_id) FROM ngdrstab_mst_bank");
                    $bank_id = $check[0][0]['max'];

                    if ($bank_id != Null) {
                        $bank_id = $bank_id + 1;
//                        pr($bank_id);exit;
                    } else {
                        $bank_id = 1;
                    }
                }
                if ($hfactionval == 'S') {
                    $duplicateflag = 'S';
                    $this->request->data['bank_master']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['bank_master']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $this->request->data['bank_master']['bank_id'] = $bank_id;
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['bank_master'] = $this->istrim($this->request->data['bank_master']);
                    $errarr = $this->validatedata($this->request->data['bank_master'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        $duplicate['Table'] = 'ngdrstab_mst_bank';
                        $duplicate['Fields'] = array('bank_name_en', 'bank_name_ll');
                        $duplicate['Action'] = $duplicateflag; //U       
                        $duplicate['PrimaryKey'] = 'id';
                        $checkd = $this->check_duplicate($duplicate, $this->request->data['bank_master']);
                        if ($checkd) {
                            if ($this->bank_master->save($this->request->data['bank_master'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'bank_master'));
                                $this->set('unitrecord', $this->bank_master->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        } else {
                            $this->Session->setFlash(__('lblduplicatemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'bank_master'));
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_bankmaster($id = null) {
        try {

            $this->autoRender = false;
            $this->loadModel('bank_master');

            if (isset($id) && is_numeric($id)) {

                $this->bank_master()->id = $id;

                if ($this->bank_master->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'bank_master'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function bank_branch() {
        ini_set('memory_limit', '-1');
        ini_set('max_execution_time', 30000);
        try {

            $this->check_role_escalation();
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'mainlanguage', 'BankBranch'));
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);

            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            //$this->set('bankbranchrecord', $this->BankBranch->find('all'));

            $bankbranchrecord = $this->BankBranch->query("select branch.branch_name_ll,branch.bank_id, branch.micr_code,branch.address,branch.contact_no,branch.city,branch.state_id,branch.division_id,branch.district_id
                                                        ,branch.taluka_id ,branch.id,branch.branch_name_ll, bank.bank_name_en,branch.branch_name_en,branch.ifsc from ngdrstab_mst_bank_branch branch
                                                     join ngdrstab_mst_bank bank on bank.bank_id=branch.bank_id limit 10");
            $this->set('bankbranchrecord', $bankbranchrecord);
            $this->set('bank', ClassRegistry::init('bank_master')->find('list', array('fields' => array('bank_id', 'bank_name_' . $lang), 'order' => array('bank_name_' . $lang => 'ASC'))));
            $this->set('State', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $lang), 'order' => array('state_name_' . $lang => 'ASC'))));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $fieldlist = array();
            $fieldlist['bank_id']['select'] = 'is_select_req';

            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['branch_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength100';
                } else {
                    //list for all unicode fields
                    $fieldlist['branch_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to100";
                }
            }

            $fieldlist['ifsc']['text'] = 'is_required,is_alphanumeric,is_maxlength100';
            $fieldlist['micr_code']['text'] = 'is_required,is_numeric,is_maxlength100';
            $fieldlist['address']['text'] = 'is_required,is_alphaspace,is_maxlength255';
            $fieldlist['contact_no']['text'] = 'is_required,is_numeric,is_maxlengthmobile10';
            $fieldlist['state_id']['select'] = 'is_select_req';
            // $fieldlist['division_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['city']['text'] = 'is_required,is_alphaspace,is_maxlength100';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['bank_branch']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $duplicateflag = 'S';
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['bank_branch']['id'] = $this->request->data['hfid'];
                        $duplicateflag = 'U';
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }


                    $this->request->data['bank_branch'] = $this->istrim($this->request->data['bank_branch']);
                    $errarr = $this->validatedata($this->request->data['bank_branch'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        $duplicate['Table'] = 'ngdrstab_mst_bank_branch';
                        $duplicate['Fields'] = array('branch_name_en', 'branch_name_ll');
                        $duplicate['Action'] = $duplicateflag; //U     
                        $duplicate['PrimaryKey'] = 'id';
                        $checkd = $this->check_duplicate($duplicate, $this->request->data['bank_branch']);
                        if ($checkd) {
                            if ($this->BankBranch->save($this->request->data['bank_branch'])) {
                                $this->Session->setFlash(__($actionvalue));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'bank_branch'));
                                $this->set('bankbranchrecord', $this->BankBranch->find('all'));
                            } else {
                                $this->Session->setFlash(__('lblnotsavemsg'));
                            }
                        } else {
                            $this->Session->setFlash(__('lblduplicatemsg'));
                        }
//                      pr($this->request->data);exit;
//                        if ($this->BankBranch->save($this->request->data['bank_branch'])) {
//                            $this->Session->setFlash(__($actionvalue));
//                            $this->redirect(array('controller' => 'Masters', 'action' => 'bank_branch'));
//                        } else {
//                            $this->Session->setFlash(__('lblnotsavemsg'));
//                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'bank_branch'));
                }
            }
        } catch (Exception $ex) {
            // pr($ex);
        }
        $this->set_csrf_token();
    }

    public function delete_bankbranch($id = null) {
        try {

            $this->autoRender = false;
            $this->loadModel('BankBranch');

            if (isset($id) && is_numeric($id)) {

                $this->bank_branch()->id = $id;

                if ($this->BankBranch->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'bank_branch'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function document_disposal() {
        try {
            $this->loadModel('DocumentDisposal');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->DocumentDisposal->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
//                 pr($languagecode['mainlanguage']['language_code']);exit;
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['disposal_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength200';
                } else {
//                     pr($languagecode);
                    //list for all unicode fieldsis_alphaspacemaxlenghth
//                    $fieldlist['disposal_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = '';
                    $fieldlist['disposal_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to200";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {

                $this->check_csrf_token($this->request->data['Document_disposal']['csrftoken']);


                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['Document_disposal']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $this->request->data['Document_disposal']['req_ip'] = $this->request->clientIp();
                        $this->request->data['Document_disposal']['user_id'] = $user_id;
                        $this->request->data['Document_disposal']['created_date'] = $created_date;
                        $this->request->data['Document_disposal']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['Document_disposal']['disposal_id'] = $this->request->data['hfid'];
                            $actionvalue = "lbleditmsg";
                            // $adbc = $alerts['Document_disposal']['btnupdate'][$laug];
                        } else {
                            $actionvalue = "lblsavemsg";
                            //   $adbc = $alerts['Document_disposal']['btnadd'][$laug];
                        }
                        $this->request->data['Document_disposal'] = $this->istrim($this->request->data['Document_disposal']);
                        //  pr($this->request->data['Document_disposal']);exit;
                        $errarr = $this->validatedata($this->request->data['Document_disposal'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            if ($this->DocumentDisposal->save($this->request->data['Document_disposal'])) {
//                                $this->Session->setFlash(__("$message"));
                                $this->Session->setFlash(__($actionvalue));
//                                $this->Session->setFlash($adbc);
                                $this->redirect(array('controller' => 'Masters', 'action' => 'Document_disposal'));
                                $this->set('divisionrecord', $this->DocumentDisposal->find('all'));
                            } else {
                                $this->Session->setFlash("lblnotsavemsg");
                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function Document_disposal_delete($id = null) {
//         pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('DocumentDisposal');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'cast_category') {
                $this->DocumentDisposal->disposal_id = $id;
                if ($this->DocumentDisposal->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                } else {
                    $this->Session->setFlash(
                            __('lblnotdeletemsg')
                    );
                }
                // }
            }
            return $this->redirect(array('action' => 'Document_disposal'));
        } catch (exception $ex) {
            //pr($ex);exit;
        }
    }

    public function unit_mapping() {
        try {

            array_map([$this, 'loadModel'], ['unit_mapping', 'Usagemain', 'Usagesub', 'Usagesubsub', 'levelconfig', 'State', 'User', 'NGDRSErrorCode']);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $user_id = $this->Auth->User("user_id");
            $created_date = date('Y/m/d');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            //  $this->set('unitmappingrecord', NULL);
            $this->set('district', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $laug), 'order' => array('district_name_' . $laug => 'ASC'))));

            $usagemain = $this->Usagemain->find('list', array(
                'fields' => array('Usagemain.usage_main_catg_id', 'grp.usage_main_catg_desc_en'),
                'joins' => array(array('table' => 'ngdrstab_mst_usage_main_category',
                        'alias' => 'grp',
                        'type' => 'left outer',
                        'conditions' => array('Usagemain.usage_main_catg_id = grp.usage_main_catg_id', 'Usagemain.state_id= grp.state_id')
                    ))
                    )
            );
            $this->set('usagemain', $usagemain);
            $this->set('unitdata', ClassRegistry::init('unit')->find('list', array('fields' => array('unit_id', 'unit_desc_' . $laug), 'order' => array('unit_desc_' . $laug => 'ASC'))));
            $this->set('usagesub', ClassRegistry::init('Usagesub')->find('list', array('fields' => array('usage_sub_catg_id', 'usage_sub_catg_desc_' . $laug), 'order' => array('usage_sub_catg_desc_' . $laug => 'ASC'))));
            $this->set('usagesubsub', ClassRegistry::init('usagelnkitemlist')->find('list', array('fields' => array('usage_param_id', 'usage_param_desc_' . $laug), 'conditions' => array('usage_param_type_id' => 1, 'single_unit_flag' => 'Y'), 'order' => array('usage_param_desc_' . $laug => 'ASC'))));

//            $this->set('unitmappingrecord', $this->unit_mapping->find('all'));
//            $unitmappingrecord = $this->unit_mapping->query("
//select  dist.district_name_en,usagemain.usage_main_catg_desc_en,usagesub.usage_sub_catg_desc_en, item.usage_param_desc_en,unit.unit_id,unit.unit_desc_en from ngdrstab_mst_unit unit
//
//JOIN ngdrstab_mst_unit_mapping as map ON map.unit_id=unit.unit_id
//JOIN ngdrstab_mst_usage_main_category as usagemain ON usagemain.usage_main_catg_id=map.usage_main_catg_id
//JOIN ngdrstab_mst_usage_sub_category as usagesub ON usagesub.usage_sub_catg_id=map.usage_sub_catg_id
//LEFT JOIN ngdrstab_mst_usage_items_list as item ON item.usage_param_id=map.usage_param_id
//LEFT JOIN ngdrstab_conf_admblock3_district  as dist ON dist.district_id=map.district_id
//
//ORDER BY usagemain.usage_main_catg_desc_en,usagesub.usage_sub_catg_desc_en,item.usage_param_desc_en,unit.unit_desc_en");
//             pr($unitmappingrecord);exit;
            $unitmappingrecord = array();
            $this->set('unitmappingrecord', $unitmappingrecord);
            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select';
            $fieldlist['usage_main_catg_id']['select'] = 'is_select_req';
            $fieldlist['usage_sub_catg_id']['select'] = 'is_select_req';
            $fieldlist['usage_param_id']['select'] = 'is_select';
            $fieldlist['unit_id']['select'] = 'is_select_req';
            $fieldlist['sr_no']['text'] = 'is_required,is_numeric';


            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['unit_mapping']['csrftoken']);


                $this->request->data['unit_mapping']['req_ip'] = $this->request->clientIp();
                $this->request->data['unit_mapping']['user_id'] = $user_id;
                $this->request->data['unit_mapping']['created'] = $created_date;

                $this->request->data['unit_mapping'] = $this->istrim($this->request->data['unit_mapping']);
                $errarr = $this->validatedata($this->request->data['unit_mapping'], $fieldlist);
                $flag = 0;
                foreach ($errarr as $dd) {
                    if ($dd != "") {
                        $flag = 1;
                    }
                }
                if ($flag == 1) {
                    $this->set("errarr", $errarr);
                } else {
                    foreach ($this->request->data['unit_mapping'] as $key => $value) {
                        if (!is_numeric($value)) {
                            $this->request->data['unit_mapping'][$key] = NULL;
                        }
                    }

                    if ($this->unit_mapping->save($this->request->data['unit_mapping'])) {
                        $this->Session->setFlash(__("lblsavemsg"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'unit_mapping'));
                    } else {
                        $this->Session->setFlash(__('lblnotsavemsg'));
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function unit_mapping_remove($mapping_id = NULL) {
        $this->loadModel('unit_mapping');
        $this->autoRender = False;
        $this->unit_mapping->deleteAll(array('mapping_id' => $mapping_id));
        $this->Session->setFlash(__("lbldeletemsg"));
        return $this->redirect(array('action' => 'unit_mapping'));
    }

    public function party_category_feild($cat_id = NULL) {
        try {

            array_map([$this, 'loadModel'], ['mainlanguage', 'party_category', 'party_category_fields']);
            $lang = $this->Session->read("sess_langauge");
            $party_category = $this->party_category->find('list', array('fields' => array('party_category.category_id', 'party_category.category_name_' . $lang), 'order' => array('category_id' => 'ASC')));
            if (is_null($cat_id)) {
                $this->Session->write('cat_id', 1);

                $fields = $this->party_category_fields->find("all", array('conditions' => array('category_id' => 1), 'order' => array('order' => 'ASC')));
            } else {
                $this->Session->write('cat_id', $cat_id);
                $fields = $this->party_category_fields->find("all", array('conditions' => array('category_id' => $cat_id), 'order' => array('order' => 'ASC')));
            }


            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));

            $this->set(compact('languagelist', 'party_category', 'fields'));
            if ($this->request->is('post')) {
//$this->check_csrf_token($this->request->data['party_category']['csrftoken']);

                if ($this->request->data['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'party_category_feild', $this->request->data['party_category']['party_catg_id']));
                }
                $this->party_category_fields->query("UPDATE ngdrstab_mst_party_category_fields set display_flag = 'N' where category_id=" . $this->Session->read('cat_id'));
                $a = array();
                foreach ($this->request->data as $k => $v) {
                    if ($k != 'actiontype') {
                        if (!(is_array($v))) {
                            if (is_numeric($v)) {
                                array_push($a, $v);
                            }
                        }
                    }
                }


                $this->party_category_fields->updateAll(
                        array("display_flag" => "'Y'"), array("field_id" => $a)
                );

                $this->Session->setFlash(
                        __('lbleditmsg')
                );
                $this->redirect(array('controller' => 'Masters', 'action' => 'party_category_feild'));
            }
            $this->set_csrf_token();
        } catch (Exception $e) {
            pr($e);
            exit;
        }
    }

    function downloadfile($file) {

        try {
            $path = WWW_ROOT . 'prohibited/' . $file;

            $this->viewClass = 'Media';
            $this->response->file($path, array(
                'download' => true,
                'name' => $file
            ));

            return $this->response;
        } catch (Exception $e) {
            pr($e);
            exit;
            $this->redirect(array('action' => 'error404'));
        }
    }

    public function year_initialization() {
        try {

            array_map([$this, 'loadModel'], ['finyear', 'NGDRSErrorCode']);
            $user_id = $this->Auth->User("user_id");
            $State_id = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $this->set('year', $this->finyear->find('all'));

            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);

            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);

            $fieldlist = array();
            $fielderrorarray = array();

            $fieldlist['finyear_desc']['text'] = 'is_number_dash';

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);


            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['year_initialization']['csrftoken']);
                $this->request->data['year_initialization'] = $this->istrim($this->request->data['year_initialization']);

                if ($this->request->data['year_initialization']['fin_id'] != '') {
//                    $this->finyear->id = $this->request->data['year_initialization']['fin_id'];

                    if ($this->request->data['year_initialization']['current_year'] == 'Y') {

                        $this->finyear->query("update ngdrstab_mst_finyear set current_year='N'");
                        $this->finyear->id = $this->request->data['year_initialization']['fin_id'];
                        if ($this->finyear->save($this->request->data['year_initialization'])) {


                            $this->finyear->query("update ngdrstab_mst_finyear set current_year='Y' where finyear_id=" . $this->finyear->id);
                            $this->Session->setFlash(__("lbleditmsg"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'year_initialization'));
                        }
                    } else {
                        
                    }
                } else {

                    if ($this->request->data['year_initialization']['current_year'] == 'Y') {
                        $this->finyear->query("update ngdrstab_mst_finyear set current_year='N'");

                        if ($this->finyear->save($this->request->data['year_initialization'])) {

                            $this->Session->setFlash(__("lblsavemsg"));

                            $this->redirect(array('controller' => 'Masters', 'action' => 'year_initialization'));
                        }
                    } else {
                        if ($this->finyear->save($this->request->data['year_initialization'])) {

                            $this->Session->setFlash(__("lblsavemsg"));

                            $this->redirect(array('controller' => 'Masters', 'action' => 'year_initialization'));
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage()));
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function year_delete($id = null) {
        try {
            $this->autoRender = false;
            $this->loadModel('finyear');

            if (isset($id) && is_numeric($id)) {

                $this->finyear->id = $id;

                if ($this->finyear->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'year_initialization'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function article_partymapping() {
        try {
//            $this->check_role_escalation();
            array_map([$this, 'loadModel'], ['article_partymapping', 'language', 'NGDRSErrorCode', 'mainlanguage']);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $fieldlist = array();
            $fieldlist['article_id']['select'] = 'is_select_req';
            $fieldlist['party_type_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            $this->set('articlelist', ClassRegistry::init('article')->find('list', array('fields' => array('article_id', 'article_desc_' . $lang), 'order' => array('article_desc_' . $lang => 'ASC'))));
            $this->set('partylist', ClassRegistry::init('partytype')->find('list', array('fields' => array('party_type_id', 'party_type_desc_' . $lang), 'order' => array('party_type_desc_' . $lang => 'ASC'))));

            $articleparty = $this->article_partymapping->query("select apm.article_id,apm.party_type_id,apm.id,art.article_desc_en,party.party_type_desc_en from ngdrstab_mst_article_partytype_mapping apm
                                                                join ngdrstab_mst_article art on art.article_id=apm.article_id
                                                                join ngdrstab_mst_party_type party on party.party_type_id=apm.party_type_id");

            $this->set('articleparty', $articleparty);
//            pr($this->request->data);exit;
            if ($this->request->is('post')) {
//                    pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['article_partymapping']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfactionval = $_POST['hfaction'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
//                        pr($this->request->data); exit;
                    $article_id = $this->request->data['article_partymapping']['article_id'];
                    $party_type_id = $this->request->data['article_partymapping']['party_type_id'];
                    $check = $this->article_partymapping->query("select id from ngdrstab_mst_article_partytype_mapping 
                                                            where article_id=? and party_type_id=?", array($article_id, $party_type_id));
//                    pr($check);exit;
                    if (!empty($check)) {
                        $this->Session->setFlash(__("Sorry...This Aritcle had already mapped with same Party Type...!!!"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'article_partymapping'));
                    }
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                }
                if ($hfactionval == 'S') {
                    $this->request->data['article_partymapping']['req_ip'] = $this->request->clientIp();
                    $this->request->data['article_partymapping']['user_id'] = $user_id;
                    $this->request->data['article_partymapping']['state_id'] = $stateid;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['article_partymapping']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['article_partymapping'] = $this->istrim($this->request->data['article_partymapping']);
                    $errarr = $this->validatedata($this->request->data['article_partymapping'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
//                            pr($this->request->data); exit;
                        if ($this->article_partymapping->save($this->request->data['article_partymapping'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'article_partymapping'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function delete_articleparty_mapping($id = null) {
        try {
            $this->autoRender = false;
            $this->loadModel('article_partymapping');
            if (isset($id) && is_numeric($id)) {
                $this->article_partymapping()->id = $id;
                if ($this->article_partymapping->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'article_partymapping'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    public function identification_feild() {
        try {

            array_map([$this, 'loadModel'], ['mainlanguage', 'identification_fields']);
            $lang = $this->Session->read("sess_langauge");


            $fields = $this->identification_fields->find("all", array('order' => array('order' => 'ASC')));



            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));

            $this->set(compact('languagelist', 'party_category', 'fields'));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['identification_feild']['csrftoken']);
                $this->identification_fields->query("UPDATE ngdrstab_mst_identifire_fields set display_flag = 'N'");
                $a = array();
                // pr($this->request->data);
                foreach ($this->request->data as $k => $v) {
                    if ($k != 'actiontype') {
                        //pr($v);
                        if (!(is_array($v))) {
                            //  pr($v);
                            if (is_numeric($v)) {
                                array_push($a, $v);
                            }
                        }
                    }
                }
//exit;

                $this->identification_fields->updateAll(
                        array("display_flag" => "'Y'"), array("field_id" => $a)
                );

                $this->Session->setFlash(
                        __('lbleditmsg')
                );
                $this->redirect(array('controller' => 'Masters', 'action' => 'identification_feild'));
            }
            $this->set_csrf_token();
        } catch (Exception $e) {
            pr($e);
            exit;
        }
    }

    public function witness_fields() {
        try {

            array_map([$this, 'loadModel'], ['mainlanguage', 'witness_fields']);
            $lang = $this->Session->read("sess_langauge");


            $fields = $this->witness_fields->find("all", array('order' => array('order' => 'ASC')));



            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));

            $this->set(compact('languagelist', 'fields'));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['witness_fields']['csrftoken']);
                $this->witness_fields->query("UPDATE ngdrstab_mst_witness_fields set display_flag = 'N'");
                $a = array();
                foreach ($this->request->data as $k => $v) {
                    if ($k != 'actiontype') {
                        if (!(is_array($v))) {
                            if (is_numeric($v)) {
                                array_push($a, $v);
                            }
                        }
                    }
                }

                $this->witness_fields->updateAll(
                        array("display_flag" => "'Y'"), array("field_id" => $a)
                );

                $this->Session->setFlash(
                        __('lbleditmsg')
                );
                $this->redirect(array('controller' => 'Masters', 'action' => 'witness_fields'));
            }
            $this->set_csrf_token();
        } catch (Exception $e) {
            pr($e);
            exit;
        }
    }

    //================
    function sro_approve_deedwriter() {
        try {
//             pr($_SESSION);exit;
            if ($this->referer() != '') {
                if (strpos($this->referer(), $this->webroot) == false) {
                    header('Location:../cterror.html');
                    exit;
                }
            }
            $office_id = $this->Auth->User('office_id');

            $this->loadModel('empregistration');
            $s = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where deed_writer='Y' and office_id=$office_id");
            $advocate = $this->empregistration->query("select * from ngdrstab_mst_user_citizen where is_advocate='Y' and office_id=$office_id");
            $this->set('usrdata', $s);
            $this->set('advocate', $advocate);
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    //================

    function approve_deedwriter() {
        try {
            if ($this->referer() != '') {
                if (strpos($this->referer(), $this->webroot) == false) {
                    header('Location:../cterror.html');
                    exit;
                }
            }
//             $this->check_csrf_token($this->request->data['userpermission']['csrftoken']);
            $this->loadModel('empregistration');
            $s = $this->empregistration->get_deed_writer();
            $this->set('usrdata', $s);
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    function approve_advocate() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('is_advocate_accept_flag', 'Y')) {
                    if ($this->CitizenUser->saveField('is_advocate_accept_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function reject_advocate() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('is_advocate_accept_flag', 'N')) {
                    if ($this->CitizenUser->saveField('is_advocate_accept_date', NULL)) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function approve_deed_writer() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('deed_write_accept_flag', 'Y')) {
                    if ($this->CitizenUser->saveField('deed_write_accept_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function reject_deed_writer() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('deed_write_accept_flag', 'N')) {
                    if ($this->CitizenUser->saveField('deed_write_accept_date', NULL)) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    public function willexecution() {
        $this->loadModel("genernalinfoentry");
        $this->loadModel("willexecution_date");
        $this->set('hfactualexecdate', NULL);
        $this->set('hfdocumentnumber', NULL);
        $this->set('hfexecutiondate', NULL);
        $this->set('hftokenno', NULL);
        $this->set('hfupdateflag', NULL);
        $this->set('hfdateofdeath', NULL);
        $this->set('hfid', NULL);
        $this->set('actiontype', NULL);
        $this->set('cap', NULL);
        $userid = $this->Session->read("session_user_id");
        $result = substr($userid, 4);
        $userid = substr($result, 0, -4);
        $date = date('Y/m/d');
        $time = date("H:i");
        $time = explode(":", date("H:i"));
        $req_ip = $_SERVER['REMOTE_ADDR'];
        $createdate = $date;
        $rip = $req_ip;
        $this->set("result", $result = $this->genernalinfoentry->query("select distinct b.id,a.token_no,a.doc_reg_no,b.exec_date,d.article_desc_en,c.date_of_death,c.actual_exec_date,b.article_id,c.lock_flag from ngdrstab_trn_application_submitted a
                                                            inner join ngdrstab_trn_generalinformation b on a.token_no=b.token_no 
                                                            inner join ngdrstab_mst_article d on d.article_id=b.article_id 
							 left JOIN ngdrstab_trn_willexecution_date c on c.doc_reg_no =a.doc_reg_no where b.article_id=? and a.final_stamp_flag=?", array(63, 'Y')));
//       pr($result);exit;
//        $this->set("result", $result = $this->genernalinfoentry->query("select c.id,a.token_no,a.doc_reg_no,b.exec_date,d.article_desc_en,c.date_of_death,c.actual_exec_date,b.article_id from ngdrstab_trn_application_submitted a
//                                                            inner join ngdrstab_trn_generalinformation b on a.token_no=b.token_no 
//                                                            inner join ngdrstab_mst_article d on d.article_id=b.article_id
//                                                            inner join ngdrstab_trn_willexecution_date c on c.doc_reg_no =a.doc_reg_no where c.article_id=? and c.lock_flag=?", array('63', 'N')));
////       pr($result);exit;


        $this->loadModel('NGDRSErrorCode');
        $result_codes = $this->NGDRSErrorCode->find("all");
        $this->set('result_codes', $result_codes);
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        //languages are loaded firstly from config (from table)
        $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                array(
                    'table' => 'ngdrstab_conf_language',
                    'alias' => 'conf',
                    'type' => 'inner',
                    'foreignKey' => false,
                    'conditions' => array('conf.language_id = mainlanguage.id')
                )), 'order' => 'conf.language_id ASC'));
        $this->set('languagelist', $languagelist);
        $fieldlist = array();
        $fieldlist['date_of_death']['text'] = 'is_required';
        $fieldlist['actual_exec_date']['text'] = 'is_required';
        $this->set('fieldlist', $fieldlist);
        $this->set('result_codes', $this->getvalidationruleset($fieldlist));

        if ($this->request->is('post')) {
//            pr($this->request->data);exit;
            $errarr = $this->validatedata($this->request->data, $fieldlist);
            if ($this->validationError($errarr)) {
                $this->set('actiontype', $_POST['actiontype']);
                if ($this->request->data['hfupdateflag'] == 'Y') {
                    $updatedata = $this->willexecution_date->query("Update ngdrstab_trn_willexecution_date set lock_flag=? where token_no=?", array('Y', $_POST['hftokenno']));
                    $this->Session->setFlash(__("Record Lock Successfully...!"));
                    $this->redirect(array('action' => 'willexecution'));
                }
                $checkrecord = $this->willexecution_date->query('select * from ngdrstab_trn_willexecution_date where doc_reg_no=?', array($_POST['hfdocumentnumber']));

                if ($checkrecord == NULL) {
                    $insertdata = $this->willexecution_date->query("INSERT INTO ngdrstab_trn_willexecution_date (article_id,doc_reg_no,exe_date,date_of_death,user_id,req_ip,created,lock_flag,actual_exec_date,token_no) VALUES(?,?,?,?,?,?,?,?,?,?)", array(63, $_POST['hfdocumentnumber'], $_POST['hfexecutiondate'], $_POST['date_of_death'], $userid, $rip, $createdate, 'N', $_POST['actual_exec_date'], $_POST['hftokenno']));
                    if ($insertdata == NULL) {
                        $this->Session->setFlash(__("lblsavemsg"));
                        $this->redirect(array('action' => 'willexecution'));
                    }
                } else {
                    $updatedata = $this->willexecution_date->query("Update ngdrstab_trn_willexecution_date set date_of_death=? ,actual_exec_date=? where token_no=? and lock_flag=?", array($_POST['date_of_death'], $_POST['actual_exec_date'], $_POST['hftokenno'], 'N'));
                    if ($updatedata == NULL) {
                        $this->Session->setFlash(__("lbleditmsg"));
                        $this->redirect(array('action' => 'willexecution'));
                    } else {
                        $this->Session->setFlash(__("Record Already Lock...!"));
                        $this->redirect(array('action' => 'willexecution'));
                    }
                }
            }
        }
    }

    public function survey_number_update() {
        // $this->check_role_escalation();
        $this->loadModel('District');
        $this->loadModel('Developedlandtype');
        $this->loadModel('attribute_parameter');
        $this->loadModel('Surveyno');
        $this->loadModel('finyear');

        $userid = $this->Auth->User("user_id");
        $stateid = $this->Auth->User("state_id");
        $lang = $this->Session->read("sess_langauge");

        $distmapping = $this->Surveyno->query("select district_id from ngdrstab_temp_user_dist_mapping where user_id= $userid");

        if (!empty($distmapping)) {
            if ($distmapping[0][0]['district_id'] == 99999) {
                $this->set("districtdata", $this->District->find('list', array('fields' => array('District.district_id', 'District.district_name_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => 'district_name_' . $lang)));
            } else {
                $this->set('districtdata', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $lang), 'conditions' => array('state_id' => $stateid, 'district_id' => $distmapping[0][0]['district_id']), 'order' => array('district_name_en' => 'ASC'))));
            }
        } else {
            $this->Session->setFlash(__("Invalid User: Mapping User Not Found"));
            $this->redirect(array('controller' => 'Users', 'action' => 'welcome'));
        }



        $this->set("taluka", NULL);
        $this->set("landtype", $this->Developedlandtype->find('list', array('fields' => array('developed_land_types_id', 'developed_land_types_desc_' . $lang))));
        $this->set("villagenname", NULL);
        $this->set("level1propertydata", NULL);
        $this->set("level1propertylist", NULL);
        $this->set("corp", NULL);
        $this->set("finyearList", $this->finyear->find('list', array('fields' => array('finyear_id', 'finyear_desc'), 'order' => array('current_year DESC,finyear_id'))));
        $this->set("attribute", $this->attribute_parameter->find("list", array('fields' => array('attribute_id', 'eri_attribute_name'), 'conditions' => array('state_id' => $stateid))));
        $fieldlist = array();
        $fieldlist['finyear_id']['select'] = 'is_select_req';
        $fieldlist['attribute']['select'] = 'is_select_req';
        $fieldlist['district_id']['select'] = 'is_select_req';
        $fieldlist['taluka_id']['select'] = 'is_select_req';
        $fieldlist['developed_land_types_id']['select'] = 'is_select_req';
        $fieldlist['corp_id']['select'] = 'is_select_req';
        $fieldlist['village_id']['select'] = 'is_select_req';

        $fieldlist['level1_id']['select'] = 'is_select_req';
        $fieldlist['level1_list_id']['select'] = 'is_select_req';
        $fieldlist['survey_number']['text'] = 'is_required,is_alphanumslashcomma';
        $this->set("fieldlist", $fieldlist);
        $this->set('result_codes', $this->getvalidationruleset($fieldlist));


        if ($this->request->is('post')) {
            $data = $this->request->data['survey_number_update'];
            $errarr = $this->validatedata($data, $fieldlist);
            if ($this->validationError($errarr)) {

                if (!empty($distmapping)) {
                    if ($distmapping[0][0]['district_id'] != 99999) {
                        if ($distmapping[0][0]['district_id'] != $data['district_id']) {
                            $this->Session->setFlash(__("Invalid User: Distict ID"));
                            $this->redirect(array('controller' => 'Users', 'action' => 'welcome'));
                        }
                    }
                }


                $survey_number = explode(",", $data['survey_number']);
                if (!empty($survey_number)) {
                    $this->Surveyno->query("delete from ngdrstab_mst_survey_no where district_id=? and taluka_id=? and village_id=? and level1_list_id=? ", array($data['district_id'], $data['taluka_id'], $data['village_id'], $data['level1_list_id']));
                    $insertarr = array();
                    foreach ($survey_number as $number) {
                        $number = trim($number);
                        if (!empty($number)) {
                            $data['ri_attribute'] = $data['attribute'];
                            $data['survey_no'] = $number;
                            $data['state_id'] = $this->Auth->user('state_id');
                            $data['user_id'] = $this->Auth->user('state_id');
                            $data['created'] = date('Y-m-d H:i:s');
                            $data['updated'] = date('Y-m-d H:i:s');
                            array_push($insertarr, $data);
                        }
                    }
//                pr($insertarr);
//                exit;
                    if ($this->Surveyno->saveAll($insertarr)) {
                        $this->Session->setFlash(__("lbleditmsg"));
                    } else {
                        $this->Session->setFlash(__("lblnoteditmsg"));
                    }
                } else {
                    $this->Session->setFlash(__("lblnoteditmsg"));
                }
            }



            // postback
            $talukalist = ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka.taluka_id', 'taluka.taluka_name_en'), 'conditions' => array('district_id' => $data['district_id'])));
            $this->set("taluka", $talukalist);
            $villagelist = ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.village_id', 'damblkdpnd.village_name_' . $lang), 'conditions' => array('taluka_id' => $data['taluka_id'], 'district_id' => $data['district_id']), 'order' => array('damblkdpnd.village_name_' . $lang . ' ASC  ')));
            $this->set("villagenname", $villagelist);
            $level1id = ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.level1_id'), 'conditions' => array('village_id' => $data['village_id'])));
            $level1 = ClassRegistry::init('Levels_1_property')->find('list', array('fields' => array('Levels_1_property.level_1_id', 'Levels_1_property.level_1_desc_' . $lang), 'conditions' => array('level_1_id' => $level1id)));
            $this->set("level1propertydata", $level1);

            $level1list = ClassRegistry::init('Level1')->find('list', array('fields' => array('Level1.prop_level1_list_id', 'Level1.list_1_desc_' . $lang), 'conditions' => array('prop_level1_list_id' => ClassRegistry::init('villagelevelmapping')->find('list', array('fields' => array('villagelevelmapping.prop_level1_list_id'), 'conditions' => array('level1_id' => $data['level1_id'], 'village_id' => $data['village_id']))))));
            $this->set("level1propertylist", $level1list);

            $corplist = ClassRegistry::init('corporationclasslist')->find('list', array('fields' => array('corporationclasslist.corp_id', 'corporationclasslist.governingbody_name_' . $this->Session->read("sess_langauge")), 'conditions' => array('corp_id' => ClassRegistry::init('damblkdpnd')->find('list', array('fields' => array('damblkdpnd.corp_id'), 'conditions' => array('taluka_id' => array($data['taluka_id'])))))));
            $this->set("corp", $corplist);
        }
    }

    public function getsurveynumbers() {
        try {

            $data = $this->request->data;
            // $this->check_csrf_token_withoutset($data['csrftoken']);
            $this->autoRender = FALSE;
            $this->loadModel('Surveyno');
            $lang = $this->Session->read("sess_langauge");
            $stateid = $this->Auth->User("state_id");
            $district = @$data['district'];
            $taluka = @$data['taluka'];
            $council = @$data['council'];
            $village = @$data['village'];
            $lavel1 = @$data['lavel1'];
            $lavel1_list = @$data['lavel1_list'];
            $lavel2 = @$data['lavel2'];
            $lavel2_list = @$data['lavel2_list'];
            $lavel3 = @$data['lavel3'];
            $lavel3_list = @$data['lavel3_list'];
            $lavel4 = @$data['lavel4'];
            $lavel4_list = @$data['lavel4_list'];

            $conditions['Surveyno.state_id'] = $stateid;
            if (is_numeric($district)) {
                $conditions['district_id'] = $district;
            }
            if (is_numeric($taluka)) {
                $conditions['taluka_id'] = $taluka;
            }
            if (is_numeric($council)) {
                $conditions['corp_id'] = $council;
            }
            if (is_numeric($village)) {
                $conditions['village_id'] = $village;
            }
            if (is_numeric($lavel1)) {
                $conditions['level1_id'] = $lavel1;
            }
            if (is_numeric($lavel1_list)) {
                $conditions['level1_list_id'] = $lavel1_list;
            }
            if (is_numeric($lavel2)) {
                $conditions['level2_id'] = $lavel2;
            }
            if (is_numeric($lavel2_list)) {
                $conditions['level2_list_id'] = $lavel2_list;
            }
            if (is_numeric($lavel3)) {
                $conditions['level3_id'] = $lavel3;
            }
            if (is_numeric($lavel3_list)) {
                $conditions['level3_list_id'] = $lavel3_list;
            }
            if (is_numeric($lavel4)) {
                $conditions['level4_id'] = $lavel4;
            }
            if (is_numeric($lavel4_list)) {
                $conditions['level4_list_id'] = $lavel4_list;
            } // pr($conditions);
            if (isset($data['attribute']) && is_numeric($data['attribute'])) {
                $this->set("results", $result = $this->Surveyno->find('list', array('fields' => array('Surveyno.survey_no_id', 'Surveyno.survey_no'),
                    'joins' => array(
                        array('table' => 'ngdrstab_mst_attribute_parameter', 'alias' => 'attribute', 'conditions' => array('attribute.attribute_id=Surveyno.ri_attribute', 'Surveyno.ri_attribute' => $data['attribute']))
                    ),
                    'conditions' => $conditions)));
                if (!empty($result)) {
                    // pr($result);
                    echo implode(" , ", $result);
                }
            }
        } catch (Exception $e) {
            // pr($e);
            //  exit;
        }
    }

    public function localgovgrid() {
        array_map([$this, 'loadModel'], ['corporationclasslist', 'mainlanguage']);
        $localgovrecord = NULL;
        $lang = $this->Session->read("sess_langauge");
        $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                array(
                    'table' => 'ngdrstab_conf_language',
                    'alias' => 'conf',
                    'type' => 'inner',
                    'foreignKey' => false,
                    'conditions' => array('conf.language_id = mainlanguage.id')
                )), 'order' => 'conf.language_id ASC'));
        $this->set('languagelist', $languagelist);

        if (isset($_POST['district']) && is_numeric($_POST['district']) && isset($_POST['taluka']) && is_numeric($_POST['taluka'])) {
            $district_id = $_POST['district'];
            $taluka_id = $_POST['taluka'];
            $localgovrecord = $this->corporationclasslist->query("select dis.district_name_$lang,logov.district_id,logov.taluka_id,logov.id,logov.ulb_type_id, tal.taluka_name_$lang,gov.class_description_$lang,logov.governingbody_name_en,logov.governingbody_name_ll
                                        from ngdrstab_conf_admblock_local_governingbody_list logov
                                    join ngdrstab_conf_admblock3_district dis on dis.district_id=logov.district_id
                                   join ngdrstab_conf_admblock5_taluka tal on tal.taluka_id=logov.taluka_id
                                  join ngdrstab_conf_admblock_local_governingbody gov on gov.ulb_type_id=logov.ulb_type_id                             
                                     where   logov.district_id = $district_id and logov.taluka_id = $taluka_id order by logov.district_id");
        } else if (isset($_POST['district']) && is_numeric($_POST['district'])) {
            $district_id = $_POST['district'];
            $localgovrecord = $this->corporationclasslist->query("select dis.district_name_$lang,logov.district_id,logov.taluka_id,logov.id,logov.ulb_type_id, tal.taluka_name_$lang,gov.class_description_$lang,logov.governingbody_name_en,logov.governingbody_name_ll
                                        from ngdrstab_conf_admblock_local_governingbody_list logov
                                    join ngdrstab_conf_admblock3_district dis on dis.district_id=logov.district_id
                                   join ngdrstab_conf_admblock5_taluka tal on tal.taluka_id=logov.taluka_id
                                  join ngdrstab_conf_admblock_local_governingbody gov on gov.ulb_type_id=logov.ulb_type_id
                                                where  logov.district_id = $district_id order by logov.district_id");
        }
        $this->set(compact('lang', 'localgovrecord'));
    }

    public function localgovlist() {
        try {

            array_map([$this, 'loadModel'], ['ApplicationSubmitted', 'party_entry', 'mainlanguage', 'corporationclasslist']);
            $lang = ($this->Session->read("sess_langauge")) ? $this->Session->read("sess_langauge") : 'en';
            $stateid = $this->Auth->User("state_id");

//             $this->set('State', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $lang), 'order' => array('state_name_' . $lang => 'ASC'))));      
            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('district_id', 'district_name_' . $lang), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $lang => 'ASC'))));
            $this->set('taluka', ClassRegistry::init('taluka')->find('list', array('fields' => array('taluka_id', 'taluka_name_' . $lang), 'order' => array('taluka_name_' . $lang => 'ASC'))));
            $this->set('localgovbody', ClassRegistry::init('local_governing_body')->find('list', array('fields' => array('ulb_type_id', 'class_description_' . $lang), 'order' => array('class_description_' . $lang => 'ASC'))));
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $result = '';
//               $this->set('hfaction', NULL);
//              $result=$this->corporationclasslist->query("select logov.state_id,logov.district_id,logov.taluka_id,logov.id,logov.ulb_type_id,state.state_name_en, dis.district_name_en, tal.taluka_name_en,gov.class_description_en,logov.governingbody_name_$lang,logov.governingbody_name_ll from ngdrstab_conf_admblock_local_governingbody_list logov
//                                    join ngdrstab_conf_admblock1_state state on state.state_id=logov.state_id
//                                    join ngdrstab_conf_admblock3_district dis on dis.district_id=logov.district_id
//                                    join ngdrstab_conf_admblock5_taluka tal on tal.taluka_id=logov.taluka_id
//                                   join ngdrstab_conf_admblock_local_governingbody gov on gov.ulb_type_id=logov.ulb_type_id
//                                   group by logov.state_id,logov.district_id,logov.taluka_id,logov.id,logov.ulb_type_id,state.state_name_en, dis.district_name_en, tal.taluka_name_en,gov.class_description_en,logov.governingbody_name_en,logov.governingbody_name_ll");
//           pr($result);exit;

            $this->set('result', $result);
//              pr($errarr);exit;
            $fieldlist = array();
            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['ulb_type_id']['select'] = 'is_select_req';
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    //list for english single fields
                    $fieldlist['governingbody_name_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspacedashslash,is_maxlength255';
                } else {
                    //list for all unicode fields
                    $fieldlist['governingbody_name_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",is_maxlength255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));




            if ($this->request->is('post')) {
//                   pr($this->request->data);exit;
                $this->set('actiontypeval', $_POST['actiontype']);
                $this->set('hfid', $_POST['hfid']);



                if ($_POST['actiontype'] == '1') {
                    $this->request->data['localgovlist']['req_ip'] = $this->request->clientIp();
//                            pr($this->request->data);exit;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['localgovlist']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
//                  
//                    pr($this->request->data);exit;

                    if ($this->corporationclasslist->save($this->request->data['localgovlist'])) {

                        $this->Session->setFlash(__($actionvalue));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'localgovlist'));
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                    }
                }

                if ($_POST['actiontype'] == '2') {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'localgovlist'));
                }
            }
        } catch (Exception $ex) {
            pr($ex);
        }
    }

    public function localgov_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('corporationclasslist');
        try {

            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'identifire_type') {
                $this->corporationclasslist->id = $id;
                if ($this->corporationclasslist->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'localgovlist'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function surveyno_entry() {
        $this->loadModel('State');
        $this->loadModel('Levels_1_property');
        $this->loadModel('Surveyno');
        try {
            $laug = $this->Session->read("sess_langauge");
            //pr($laug);exit;
            if ($laug == NULL) {
                $this->Session->write("sess_langauge", 'en');
            }

            // echo 1;exit;
            $laug = $this->Session->read("sess_langauge");

            $this->set('laug', $laug);
            $State = $this->State->find('list', array('fields' => array('state_id', 'state_name_' . $laug), 'order' => array('state_name_en' => 'ASC')));
            $this->set('State', $State);

            $level1 = $this->Levels_1_property->find('list', array('fields' => array('level_1_id', 'level_1_desc_' . $laug), 'order' => array('level_1_desc_' . $laug => 'ASC')));
            $this->set('level1', $level1);

            $fieldlist = array();

            $fieldlist['state_id']['select'] = 'is_select_req';
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $fieldlist['level1_id']['select'] = 'is_select_req';
            $fieldlist['level1_list_id']['select'] = 'is_select_req';
            $fieldlist['survey_no']['text'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {

                if ($this->request->data['hfupdateflag'] == 'Y') {
                    //$this->request->data['surveyno_entry']['survey_no_id'] = $this->request->data['hfid'];
                    $survey_id = $this->request->data['hfid'];
                    $state_id = $this->request->data['surveyno_entry']['state_id'];
                    $district_id = $this->request->data['surveyno_entry']['district_id'];
                    $taluka_id = $this->request->data['surveyno_entry']['taluka_id'];
                    $village_id = $this->request->data['surveyno_entry']['village_id'];
                    $level1_id = $this->request->data['surveyno_entry']['level1_id'];
                    $level1_list_id = $this->request->data['surveyno_entry']['level1_list_id'];
                    $survey_no = $this->request->data['surveyno_entry']['survey_no'];

                    $updatedata = $this->Surveyno->query("Update ngdrstab_mst_survey_no set state_id=$state_id, district_id=$district_id, taluka_id=$taluka_id, village_id=$village_id, level1_id=$level1_id, level1_list_id=$level1_list_id, survey_no='$survey_no' where survey_no_id=$survey_id");

                    $this->Session->setFlash(__("lbleditmsg"));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'surveyno_entry'));
                }


                if ($this->Surveyno->save($this->request->data['surveyno_entry'])) {
                    $this->Session->setFlash(__("lblsavemsg"));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'surveyno_entry'));
                } else {
                    $this->Session->setFlash(__('lblnotsavemsg'));
                }
            }
        } catch (Exception $ex) {

            print_r($ex);
            exit;
        }
    }

    public function surveyno_grid_update() {
        try {
            $this->loadModel('Surveyno');
            $lang = $this->Session->read("sess_langauge");

            if (isset($_POST['village']) && is_numeric($_POST['village'])) {
                $village_id = $_POST['village'];

                $result = $this->Surveyno->query("select a.survey_no, a.survey_no_id, a.state_id, a.district_id, a.taluka_id, a.village_id, a.level1_id, a.level1_list_id,
b.state_name_en,
c.district_name_en,
d.taluka_name_en,
e.village_name_en,
f.level_1_desc_en,
g.list_1_desc_en
from ngdrstab_mst_survey_no a
left outer join ngdrstab_conf_admblock1_state b ON a.state_id=b.state_id
left outer join ngdrstab_conf_admblock3_district c ON a.district_id=c.district_id
left outer join ngdrstab_conf_admblock5_taluka d ON a.taluka_id=d.taluka_id
left outer join ngdrstab_conf_admblock7_village_mapping e ON a.village_id=e.village_id
left outer join ngdrstab_mst_location_levels_1_property f ON a.level1_id=f.level_1_id
left outer join ngdrstab_mst_loc_level_1_prop_list g ON a.level1_list_id=g.prop_level1_list_id 
where a.village_id=$village_id");

                $this->set('result', $result);
            }
        } catch (Exception $exc) {
//            pr($exc);
//            exit;
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function surveyno_delete($id = null) {
        //print_r($id);exit;
        $this->autoRender = false;
        $this->loadModel('Surveyno');
        try {
            if (isset($id) && is_numeric($id)) {
                $survey_id = $id;
                $delete = $this->Surveyno->query("delete from ngdrstab_mst_survey_no where survey_no_id=$survey_id");
                $this->Session->setFlash(__('lbldeletemsg'));
                $this->redirect(array('controller' => 'Masters', 'action' => 'surveyno_entry'));
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

    public function article_doc_map() {
        try {
            array_map(array($this, 'loadModel'), array('article_doc_map', 'NGDRSErrorCode'));
            $user_id = $this->Auth->User("user_id");
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('articlelist', ClassRegistry::init('article')->find('list', array('fields' => array('article_id', 'article_desc_' . $lang), 'order' => array('article_desc_' . $lang => 'ASC'))));
            $this->set('documentlist', ClassRegistry::init('upload_document')->find('list', array('fields' => array('document_id', 'document_name_' . $lang), 'order' => array('document_name_' . $lang => 'ASC'))));
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $articlegrid = $this->article_doc_map->query("select distinct asm.article_id,asm.document_id,asm.id,a.article_desc_en,mf.document_name_en from ngdrstab_mst_article_document_mapping asm
                                                    inner join ngdrstab_mst_article a on a.article_id=asm.article_id
                                                    inner join ngdrstab_mst_upload_document mf on mf.document_id=asm.document_id");
            $this->set('articlegrid', $articlegrid);

            $fieldlist = array();
            $fieldlist['article_id']['select'] = 'is_select_req';
            $fieldlist['document_id']['select'] = 'is_select_req';
            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post')) {
//                $this->check_csrf_token($this->request->data['article_doc_map']['csrftoken']);
//                pr($this->request->data); exit;

                $actiontype = $_POST['actiontype'];
                $this->set('actiontypeval', $actiontype);
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                if ($actiontype == '1') {
                    $article_id = $this->request->data['article_doc_map']['article_id'];
                    $document_id = $this->request->data['article_doc_map']['document_id'];
                    $check = $this->article_doc_map->query("select id from ngdrstab_mst_article_document_mapping 
                                                            where article_id=? and document_id=?", array($article_id, $document_id));
                    if (!empty($check)) {
                        $this->Session->setFlash(__("Sorry...This Aritcle had already mapped with same document...!!!"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'article_doc_map'));
                    }

                    $this->request->data['article_doc_map']['req_ip'] = $this->request->clientIp();
                    $this->request->data['article_doc_map']['user_id'] = $user_id;
                    $this->request->data['article_doc_map']['state_id'] = $stateid;
                    $this->request->data['article_doc_map']['created_date'] = $created_date;
                    if ($this->request->data['hfupdateflag'] == 'Y') {
                        $this->request->data['article_doc_map']['id'] = $this->request->data['hfid'];
                        $actionvalue = "lbleditmsg";
                    } else {
                        $actionvalue = "lblsavemsg";
                    }
                    $this->request->data['article_doc_map'] = $this->istrim($this->request->data['article_doc_map']);
                    $errarr = $this->validatedata($this->request->data['article_doc_map'], $fieldlist);
                    $flag = 0;
                    foreach ($errarr as $dd) {
                        if ($dd != "") {
                            $flag = 1;
                        }
                    }
                    if ($flag == 1) {
                        $this->set("errarr", $errarr);
                    } else {
                        if ($this->article_doc_map->save($this->request->data['article_doc_map'])) {
                            $this->Session->setFlash(__($actionvalue));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'article_doc_map'));
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    }
//                    }
                }

                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'article_doc_map'));
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function article_doc_map_delete($id = null) {
        try {
            $this->autoRender = false;
            $this->loadModel('article_doc_map');
            if (isset($id) && is_numeric($id)) {
                $this->article_doc_map()->id = $id;
                if ($this->article_doc_map->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'article_doc_map'));
                }
            }
        } catch (Exception $ex) {
            
        }
    }

    function approve_citizenuser() {
        try {
            if ($this->referer() != '') {
                if (strpos($this->referer(), $this->webroot) == false) {
                    header('Location:../cterror.html');
                    exit;
                }
            }
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $this->loadModel('office');
            $office = ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_' . $laug), 'order' => array('office_name_' . $laug => 'ASC')));
//          pr($office);
            $this->set('office', $office);
            $this->loadModel('empregistration');
            $s = $this->empregistration->get_citizen();
            $this->set('usrdata', $s);
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    function approve_citizen() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('activeflag', 'Y')) {
                    if ($this->CitizenUser->saveField('deed_write_accept_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function reject_citizen() {
        try {
            $this->loadModel('CitizenUser');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->CitizenUser->id = $id;
                if ($this->CitizenUser->saveField('activeflag', 'N')) {
                    if ($this->CitizenUser->saveField('deed_write_accept_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function approve_srouser() {
        try {
            if ($this->referer() != '') {
                if (strpos($this->referer(), $this->webroot) == false) {
                    header('Location:../cterror.html');
                    exit;
                }
            }
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            //  $this->loadModel('office');
            // $office = ClassRegistry::init('office')->find('list', array('fields' => array('office_id', 'office_name_' . $laug), 'order' => array('office_name_' . $laug => 'ASC')));
            // $this->set('office', $office);
            $this->loadModel('empregistration');
            $s = $this->empregistration->get_srouser();
            $this->set('usrdata', $s);
        } catch (Exception $e) {
            $this->redirect(array('action' => 'error404'));
        }
    }

    function approve_sro() {
        try {
            $this->loadModel('User');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->User->id = $id;
                if ($this->User->saveField('activeflag', 'Y')) {
                    if ($this->User->saveField('user_active_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    function reject_sro() {
        try {
            $this->loadModel('User');
            if (isset($_POST['id']) && is_numeric($_POST['id'])) {
                //  $this->check_csrf_token_withoutset($_POST['csrftoken']);
                $id = $_POST['id'];

                $this->User->id = $id;
                if ($this->User->saveField('activeflag', 'N')) {
                    if ($this->User->saveField('user_active_date', date('Y-m-d'))) {
                        echo 1;
                        exit;
                    } else {
                        echo 0;
                    }
                }
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
            exit;
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    public function prohabited_property_mapping() { // for JH state
        try {
            array_map([$this, 'loadModel'], ['office', 'District', 'taluka', 'VillageMapping', 'proprodts', 'proprodtsattr']);

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('grid1', NULL);

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);

            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('village', NULL);
            $this->set('taluka', NULL);

            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);

            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $fieldlist['khata_no']['text'] = 'is_alphanumdashslashcomma';
            $fieldlist['survey_no']['text'] = 'is_alphanumdashslashcomma';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));


            if ($this->request->is('post')) {
                //$this->check_csrf_token($this->request->data['prohabited_property_mapping']['csrftoken']);
                $this->set('taluka', $json2array['taluka']);
                $this->set('village', $json2array['village']);
                $this->set('actiontypeval', $_POST['actiontype']);

                if ($_POST['actiontype'] == '1') {
                    $villageid = $this->request->data['prohabited_property_mapping']['village_id'];
                    $talid = $this->request->data['prohabited_property_mapping']['taluka_id'];
                    $gov_id = $this->VillageMapping->query("select ulb_type_id, corp_id from ngdrstab_conf_admblock7_village_mapping where village_id=$villageid");

                    foreach ($gov_id as $data) {
                        $corp_class_id = $data[0]['ulb_type_id'];
                        $corp_lst_id = $data[0]['corp_id'];
                    }
                    $propdata = array();
                    $formdata = $this->request->data['prohabited_property_mapping'];

                    if (empty($formdata['khata_no']) && empty($formdata['survey_no'])) {
                        $this->Session->setFlash(__("Please Enter Either Khata Number or Plot Number to Proceed!!!"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                    }


                    $data['district_id'] = $formdata['district_id'];
                    $data['taluka_id'] = $formdata['taluka_id'];
                    $data['village_id'] = $formdata['village_id'];
                    $data['corporation_class_id'] = $corp_class_id;
                    $data['corporation_class_list_id'] = $corp_lst_id;
                    $data['state_id'] = $this->Auth->User('state_id');
                    $data['end_remark'] = 'Form_Entry';
                    $data['updated'] = date('Y/m/d H:i:s');
                    array_push($propdata, $data);

                    if ($this->proprodts->saveAll($propdata)) {


                        $id = $this->proprodts->query("SELECT prohibited_id FROM ngdrstab_mst_prohibited_prop_list WHERE prohibited_id = (SELECT MAX(prohibited_id) FROM ngdrstab_mst_prohibited_prop_list)");
                        $proh_id = $id[0][0]['prohibited_id'];
                        $prohabited = array();
                        $surveydata = array();
                        $survey_no = explode(",", $formdata['survey_no']);
                        $khata_no = explode(",", $formdata['khata_no']);
                        $c = count($khata_no);
                        $k = count($survey_no);


                        if (!empty($khata_no) && !empty($formdata['survey_no'])) {

                            if (!empty($khata_no) && $c >= 2 && !empty($formdata['survey_no']) && $k >= 1) {
                                $this->Session->setFlash(__("Invalid Entry for Khata Number and Plot Number!!!"));
                                $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                            }


                            if ($khata_no) {

                                $data['paramter_id'] = 205;
                                $data['prohibited_id'] = $proh_id;
                                $data['paramter_value'] = $formdata['khata_no'];
                                $data['survey_no'] = $formdata['khata_no'];
                                $data['new_record'] = 'Form_Entry';
                                $data['updated'] = date('Y/m/d H:i:s');
                                array_push($prohabited, $data);
                                $this->proprodtsattr->saveAll($prohabited);
                            }


                            if ($survey_no) {
                                foreach ($survey_no as $survey) {

                                    if (!empty($formdata['khata_no'])) {
                                        $sur = trim($survey);
                                        $data['paramter_id'] = 206;
                                        $data['prohibited_id'] = $proh_id;
                                        $data['paramter_value'] = $sur;
                                        $data['survey_no'] = $formdata['khata_no'] . "|" . $sur;
                                        $data['new_record'] = 'Form_Entry';
                                        $data['updated'] = date('Y/m/d H:i:s');
                                        array_push($surveydata, $data);
                                    } else {
                                        $sur = trim($survey);
                                        $data['paramter_id'] = 206;
                                        $data['prohibited_id'] = $proh_id;
                                        $data['paramter_value'] = $sur;
                                        $data['survey_no'] = $sur;
                                        $data['new_record'] = 'Form_Entry';
                                        $data['updated'] = date('Y/m/d H:i:s');
                                        array_push($surveydata, $data);
                                    }
                                }
                                $this->proprodtsattr->saveAll($surveydata);
                                $this->Session->setFlash(__("lblsavemsg"));
//                              $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                            }
                        } else if (!empty($khata_no)) {

                            foreach ($khata_no as $khata) {
                                $kh = trim($khata);
                                $data['paramter_id'] = 205;
                                $data['prohibited_id'] = $proh_id;
                                $data['paramter_value'] = $kh;
                                $data['survey_no'] = $kh;
                                $data['new_record'] = 'Form_Entry';
                                $data['updated'] = date('Y/m/d H:i:s');
                                array_push($surveydata, $data);
                            }
                            $this->proprodtsattr->saveAll($surveydata);
                            $this->Session->setFlash(__("lblsavemsg"));
//                            $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                        }
//                        else if (!empty($survey_no)) {
//
//                            foreach ($survey_no as $survey) {
//                                $sur = trim($survey);
//                                $data['paramter_id'] = 206;
//                                $data['prohibited_id'] = $proh_id;
//                                $data['paramter_value'] = $sur;
//                                $data['survey_no'] = $sur;
//                                $data['new_record'] = 'Form_Entry';
//								  $data['updated'] = date('Y/m/d H:i:s');
//                                array_push($surveydata, $data);
//                            }
//                            $this->proprodtsattr->saveAll($surveydata);
//                            $this->Session->setFlash(__("Plot Number Saved Successfully"));
////                            $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
//                        }
                    } else {
                        $this->Session->setFlash(__("lblnotsavemsg"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                    }
                }
                if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'prohabited_property_mapping'));
                }
            }
            //  $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function concurrent_user_allocation() { // punjab state
        try {
            $this->check_role_escalation();
            array_map(array($this, 'loadModel'), array('conf_reg_bool_info'));
            $this->set('actiontypeval', NULL);
            $userlist = ['C' => 'Citizen', 'D' => 'Deed Writer', 'A' => 'Advocate'];
            $this->set('userlist', $userlist);

            $count_usr = ['Y' => 'Yes', 'N' => 'No'];
            $this->set('count_usr', $count_usr);

            $fieldlist = array();
            $fieldlist['user_type']['select'] = 'is_required';
            $fieldlist['count_usr']['select'] = 'is_required';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));


            $user_data = $this->conf_reg_bool_info->query("select conf_desc_en,conf_bool_value, updated from ngdrstab_conf_reg_bool_info where reginfo_id IN(54,56,60)");
            $this->set('user_data', $user_data);


            if ($this->request->is('post')) {

                $errarr = $this->validatedata($this->request->data['concurrent_user_allocation'], $fieldlist);

                if ($this->validationError($errarr)) {

                    $this->check_csrf_token($this->request->data['concurrent_user_allocation']['csrftoken']);
                    $actiontype = $_POST['actiontype'];

                    if ($actiontype == '1') {
                        $this->set('actiontypeval', $actiontype);
                        $user_typ = $this->request->data['concurrent_user_allocation']['user_type'];
                        $allocate = $this->request->data['concurrent_user_allocation']['count_usr'];

                        //pr($allocate);pr($user_typ);exit;

                        if ($user_typ == 'C') {
                            $updtcitzn = $this->conf_reg_bool_info->query("update ngdrstab_conf_reg_bool_info set conf_bool_value=?, updated=? where reginfo_id=54", array($allocate, date('Y-m-d H:i:s')));
                            $this->Session->setFlash(__("Citizen Users Allocation Saved Successfully!!"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'concurrent_user_allocation'));
                        } else if ($user_typ == 'D') {
                            $updtdeed = $this->conf_reg_bool_info->query("update ngdrstab_conf_reg_bool_info set conf_bool_value=?, updated=? where reginfo_id=56", array($allocate, date('Y-m-d H:i:s')));
                            $this->Session->setFlash(__("Deed Users Allocation Saved Successfully!!"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'concurrent_user_allocation'));
                        } else if ($user_typ == 'A') {
                            $updtdeed = $this->conf_reg_bool_info->query("update ngdrstab_conf_reg_bool_info set conf_bool_value=?, updated=? where reginfo_id=60", array($allocate, date('Y-m-d H:i:s')));
                            $this->Session->setFlash(__("Advocate Users Allocation Saved Successfully!!"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'concurrent_user_allocation'));
                        } else {
                            $this->Session->setFlash(__("Users Allocation Not Saved"));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'concurrent_user_allocation'));
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function otp_smsevent() {
        try {
//          $this->check_role_escalation();
            array_map([$this, 'loadModel'], ['smsevent', 'language', 'NGDRSErrorCode', 'mainlanguage']);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);

            $type = ['Y' => 'Yes', 'N' => 'No'];
            $this->set('type', $type);

            $fieldlist = array();
            $fieldlist['event_id']['select'] = 'is_select_req';
            $fieldlist['type']['select'] = 'is_alpha_select';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            $this->set('smsevents', ClassRegistry::init('smsevent')->find('list', array('fields' => array('event_id', 'event_desc_' . $lang), 'order' => array('event_desc_' . $lang => 'ASC'))));

            $smsevent = $this->smsevent->query("select * from ngdrstab_mst_smsevent");
            $this->set('smsevent', $smsevent);

            if ($this->request->is('post')) {
                $errarr = $this->validatedata($this->request->data['otp_smsevent'], $fieldlist);
                // pr($this->request->data);exit;
                if ($this->ValidationError($errarr)) {
                    $this->check_csrf_token($this->request->data['otp_smsevent']['csrftoken']);
                    $actiontype = $_POST['actiontype'];
                    $hfactionval = $_POST['hfaction'];
                    $hfid = $_POST['hfid'];
                    $this->set('hfid', $hfid);

                    if ($actiontype == '1') {
                        $this->set('actiontypeval', $actiontype);
                        $this->set('hfactionval', $hfactionval);
                    }

                    if ($hfactionval == 'S') {
                        $this->request->data['otp_smsevent'] = $this->istrim($this->request->data['otp_smsevent']);
                        $flag = $this->request->data['otp_smsevent']['type'];
                        $eid = $this->request->data['otp_smsevent']['event_id'];
                        $smsevent = $this->smsevent->query("update ngdrstab_mst_smsevent set send_flag=? where event_id=?", array($flag, $eid));
                        $this->Session->setFlash(__('SMS Event Updated Succesfully!!!'));
                        return $this->redirect(array('controller' => 'Masters', 'action' => 'otp_smsevent'));
                    }
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function appointment_reschedulebyadmin() { // for GOA state
        try {
            array_map(array($this, 'loadModel'), array('officeshift', 'regconfig', 'office', 'timeslot', 'regconfig', 'appointment'));
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $this->set('appointment', null);
            $this->set('action', NULL);
            $office = $this->office->find('list', array('fields' => array('office_id', 'office_name_en'), 'order' => array('office_id' => 'ASC')));
            $this->set('office', $office);
            $reschedule = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 78)));
            $regconfig = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 44)));
            $this->set('normal_days', '+' . $regconfig['regconfig']['info_value'] . 'd');


            $fieldlist = array();
            $fieldlist['office_id']['text'] = 'is_select_req';
            $fieldlist['token_no']['text'] = 'is_required';
            $fieldlist['appointment_date']['text'] = 'is_required';
            $fieldlist['shift_id']['select'] = 'is_select_req';

            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                // pr($this->request->data);exit;
                $this->check_csrf_token($this->request->data['appointment_reschedulebyadmin']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                // $errarr = $this->validatedata($this->request->data['appointment_reschedulebyadmin'], $fieldlist);
                //  if ($this->ValidationError($errarr)) {

                if ($actiontype == '1') {

                    $token_no = $this->request->data['appointment_reschedulebyadmin']['token_no'];
                    $office_id = $this->request->data['appointment_reschedulebyadmin']['office_id'];

                    $appointment = $this->appointment->query("select flag,appointment_date, interval_id,sheduled_time,slot_no,appointment_date,token_no,sheduled_time from ngdrstab_trn_appointment_details
                                                              where token_no=$token_no and office_id=$office_id and flag='N'");
                    if (!empty($appointment)) {
                        $this->set('appointment', $appointment);
                    } else {
                        $this->Session->setFlash(__('Record Not Found For Normal Appointment!!!'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'appointment_reschedulebyadmin'));
                    }

                    $doc_lang = $this->Session->read('doc_lang');
                    $office = $this->office->get_officedetails_for_appointment($office_id);
                    $officeshift = $this->officeshift->find('list', array('fields' => array('shift_id', 'desc_' . $doc_lang), 'order' => array('shift_id' => 'ASC'), 'conditions' => array('shift_id' => $office[0]['office']['shift_id'])));
                    $startapp = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 76)));
                    $tatkal = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 53)));
                    $this->set(compact('tatkal', 'startapp', 'officeshift', 'office_id'));
                    $now = time(); // or your date as well
                    $subdate = strtotime($appointment[0][0]['appointment_date']);
                    $datediff = $now - $subdate;
                    $startdays = round($datediff / (60 * 60 * 24));
                    if (isset($startapp['regconfig']['info_value'])) {
                        $startdiff = $startapp['regconfig']['info_value'] - $startdays;
                        if ($startdiff <= 0) {
                            $startday = 0;
                        } else {
                            $startday = $startdiff;
                        }
                        $this->set('startday', '+' . $startday . 'd');
                    }
                }

                if ($actiontype == '2') {
                    $this->request->data['appointment_reschedulebyadmin'] = $this->istrim($this->request->data['appointment_reschedulebyadmin']);
                    $app_date = date('Y-m-d', strtotime($this->request->data['appointment_reschedulebyadmin']['appointment_date']));

                    if (!isset($_POST['slot']) || $_POST['slot'] == '' || !isset($app_date)) {
                        $this->Session->setFlash(__("Please Select Slot!!!"));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'appointment_reschedulebyadmin'));
                    }

                    $token_no = $this->request->data['appointment_reschedulebyadmin']['token_no'];
                    $office_id = $this->request->data['appointment_reschedulebyadmin']['office_id'];

                    list($interval, $slots) = explode('_', $_POST['slot']);

                    $shift = $this->request->data['appointment_reschedulebyadmin']['shift_id'];

                    $this->appointment->query('update ngdrstab_trn_appointment_details set slot_no=?,totalslot=?,interval_id=?,sheduled_time=?,updated=?,shift_id=?, appointment_date=?, user_type=? where office_id=? and token_no=?', array($slots, $_POST['totalslot'], $interval, $_POST['time'], date('Y-m-d H:i:s'), $shift, $app_date, 'A', $office_id, $token_no));

                    $this->Session->setFlash(__("Appointment Rescheduled Successfully on " . $app_date . "!!!"));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'appointment_reschedulebyadmin'));
                }
                if ($actiontype == '3') {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'appointment_reschedulebyadmin'));
                }
            }
            // }
            $this->set_csrf_token();
        } catch (Exception $ex) {

            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage()));
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function slot_alocation_admin() {
        try {
            // $this->check_csrf_token_withoutset($_POST['csrftoken']);
            if (isset($_POST['office_id']) and is_numeric($_POST['office_id']) and isset($_POST['shift_id']) and is_numeric($_POST['shift_id'])) {
                array_map(array($this, 'loadModel'), array('officeshift', 'office', 'appointment', 'regconfig'));

                $stateid = $this->Auth->User("state_id");
                $tatkal = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 53)));

                $office = $this->office->get_officedetails_for_appointment($_POST['office_id']);

                $shift = $this->officeshift->find('all', array('order' => array('shift_id' => 'ASC'), 'conditions' => array('shift_id' => $_POST['shift_id'])));

                $appointment = $this->appointment->find('all', array('conditions' => array(
                        'appointment.appointment_date ' => date('Y-m-d', strtotime($_POST['app_date'])), 'appointment.office_id' => trim($_POST['office_id']), 'appointment.shift_id' => trim($_POST['shift_id']), 'appointment.state_id' => $stateid, 'appointment.flag' => 'N'
                )));

                if ($office[0]['office']['tatkal_slot_id']) {
                    $this->set('tatkal', 'Y');
                } else {
                    $this->set('tatkal', 'N');
                }

                $this->set('appointment', $appointment);

                if (!empty($office)) {

                    $this->set('slot', $office[0]['slot']['slot_time_minute']);


                    $time1 = date('G:i', strtotime($shift[0]['officeshift']['appnt_from_time']));
                    $time2 = date('G:i', strtotime($shift[0]['officeshift']['appnt_to_time']));
                    $time_diff = $this->get_time_difference($time1, $time2);

                    //lunch array
//
                    $lunch_time_array = array();
                    $i = 0;
                    $time11 = date('G:i', strtotime($shift[0]['officeshift']['lunch_from_time']));
                    do {
                        if (((strtotime($time11) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['lunch_to_time'])))) {
                            $lunch_time_array[$i] = $time11 . '-' . date('G:i', strtotime($time11) + 30 * 60);
                            $time11 = date('G:i', strtotime($time11) + 30 * 60);
                        }
                        $i++;
                    } while ((strtotime($time11) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['lunch_to_time'])));

                    //tatkal array

                    $tatkal_array = array();
                    $i = 0;
                    $time111 = date('G:i', strtotime($shift[0]['officeshift']['tatkal_from_time']));
                    do {
                        if (((strtotime($time111) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['tatkal_to_time'])))) {
                            $tatkal_array[$i] = $time111 . '-' . date('G:i', strtotime($time111) + 30 * 60);
                            $time111 = date('G:i', strtotime($time111) + 30 * 60);
                        }
                        $i++;
                    } while ((strtotime($time111) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['tatkal_to_time'])));

                    //appointment array
                    $appt_array = array();
                    $i = 0;
                    $time1 = date('G:i', strtotime($shift[0]['officeshift']['appnt_from_time']));
                    do {
                        if (((strtotime($time1) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['appnt_to_time'])))) {
                            $appt_array[$i] = $time1 . '-' . date('G:i', strtotime($time1) + 30 * 60);
                            $time1 = date('G:i', strtotime($time1) + 30 * 60);
                        }
                        $i++;
                    } while ((strtotime($time1) + 30 * 60 ) <= (strtotime($shift[0]['officeshift']['appnt_to_time'])));

                    $tatkal_slot_config = $this->regconfig->find('first', array('conditions' => array('reginfo_id' => 99)));
                    if ($office[0]['office']['tatkal_slot_id']) {
                        if (isset($tatkal_slot_config['regconfig']['conf_bool_value']) && $tatkal_slot_config['regconfig']['conf_bool_value'] == 'Y') {
                            $fin_array = array_diff(array_diff($appt_array, $lunch_time_array), $tatkal_array);
                        } else {
                            $fin_array = array_diff($appt_array, $lunch_time_array);
                        }
                    } else {
                        $fin_array = array_diff($appt_array, $lunch_time_array);
                    }
//                    pr($fin_array);
                    $a = $this->cal_appt($fin_array);

                    $curr_date = date('d-m-Y');


                    $this->set('slot', $office[0]['slot']['slot_time_minute']);
                    $this->set('lunch_from', date('G:i', strtotime($shift[0]['officeshift']['lunch_from_time'])));
                    $this->set('lunch_to', date('G:i', strtotime($shift[0]['officeshift']['lunch_to_time'])));
                    $this->set('tatkal_from', date('G:i', strtotime($shift[0]['officeshift']['tatkal_from_time'])));
                    $this->set('tatkal_to', date('G:i', strtotime($shift[0]['officeshift']['tatkal_to_time'])));
                    $this->set('app_dt', $_POST['app_date']);
                    $this->set(compact('extraslot', 'minutes', 'hours', 'a'));
                }
            }
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    function get_time_difference($time1, $time2) {

        $time1 = strtotime("1/1/1980 $time1");
        $time2 = strtotime("1/1/1980 $time2");

        if ($time2 < $time1) {
            $time2 = $time2 + 86400;
        }

        return ($time2 - $time1) / 3600;
    }

    function cal_appt($fin_array) {

        $a = array();
        $j = 0;
        $fin_array = array_values($fin_array);
        $app = $fin_array;

        for ($i = 0; $i < count($fin_array); $i++) {

            if (count($app) >= 2) {
                $c = explode('-', $app[0]);
                $d = explode('-', $app[1]);
                $diff = $this->get_time_difference($c[0], $d[1]);
                if ($diff == 1) {
                    $a[$j] = $c[0] . '-' . $d[1];
                    unset($app[0]);
                    unset($app[1]);
                } else {
                    $a[$j] = $app[0];
                    unset($app[0]);
                }

                $app = array_values($app);
            } else if (!empty($app)) {

                $a[$j] = $app[0];
                break;
            }
            $j++;
        }
        $a = array_combine(range(1, count($a)), $a);
        return $a;
    }

    public function check_appointmentdate() {
        try {
            //$this->check_csrf_token_withoutset($_POST['csrftoken']);
            if (isset($_POST['app_date'])) {
                $this->loadModel('holiday');
                $date = date('Y-m-d', strtotime($_POST['app_date']));

                $holidaylist = $this->holiday->find('all', array('conditions' => array(
                        'and' => array(
                            array('holiday.holiday_fdate <= ' => $date,
                                'holiday.holiday_tdate >= ' => $date
                )))));

                if (empty($holidaylist)) {
                    if ($this->is_weekend($_POST['app_date'])) {
                        echo 'b';
                    } else {
                        echo 'a';
                    }
                } else {
                    echo 'b';
                }
            }
            exit;
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    function is_weekend($your_date) {
        $week_day = date('w', strtotime($your_date));
        //returns true if Sunday or Saturday else returns false
        return ($week_day == 0 || $week_day == 6);
    }

    public function prohibited_property_edtdel() { // for JH state(20) Edit and delete khata/plot
        try {
            array_map(array($this, 'loadmodel'), array('State', 'User', 'proprodts', 'mainlanguage', 'proprodtsattr'));

            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('grid1', NULL);
            $this->set('hfaction', NULL);
            $this->set('hfparamid', NULL);
            $this->set('hfprohid', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfupdateflag', NULL);

            $language = $this->Session->read('sess_langauge');
            $this->set('language', $language);
            $stateid = $this->Auth->User('state_id');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);

            $this->set('District', ClassRegistry::init('District')->find('list', array('fields' => array('id', 'district_name_' . $language), 'conditions' => array('state_id' => $stateid), 'order' => array('district_name_' . $language => 'ASC'))));
            $this->set('village', NULL);
            $this->set('taluka', NULL);

            $file = new File(WWW_ROOT . 'files/jsonfile_' . $this->Auth->user('user_id') . '.json');
            $json = $file->read(true, 'r');
            $json2array = json_decode($json, TRUE);

            $fieldlist = array();
            $fieldlist['district_id']['select'] = 'is_select_req';
            $fieldlist['taluka_id']['select'] = 'is_select_req';
            $fieldlist['village_id']['select'] = 'is_select_req';
            $fieldlist['survey_no']['text'] = 'is_alphanumdashslashcommapipe';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                //    $this->check_csrf_token($this->request->data['prohibited_property_mapping_search']['csrftoken']);
//              pr($this->request->data);exit;
                $this->set('taluka', $json2array['taluka']);
                $this->set('village', $json2array['village']);
                $this->set('actiontypeval', $_POST['actiontype']);

                if ($_POST['actiontype'] == '1') {
                    $villageid = $this->request->data['prohibited_property_edtdel']['village_id'];
                    $talid = $this->request->data['prohibited_property_edtdel']['taluka_id'];
                    $distid = $this->request->data['prohibited_property_edtdel']['district_id'];
                    $condition = "list.district_id=$distid and list.taluka_id=$talid and list.village_id=$villageid";

                    if (!empty($this->request->data['prohibited_property_edtdel']['survey_no'])) {
                        $sur_no = $this->request->data['prohibited_property_edtdel']['survey_no'];
                        $condition = $condition . " and a.survey_no like '%$sur_no%' ";
                    }

                    $result = $this->proprodtsattr->query("select a.prohibited_id, a.paramter_id, a.id,dist.district_name_en, tal.taluka_name_en, e.village_name_en,b.eri_attribute_name, a.survey_no
                    from ngdrstab_trn_prohibited_attribute a
                    inner join ngdrstab_mst_attribute_parameter b on b.attribute_id = a.paramter_id
                    inner join ngdrstab_mst_prohibited_prop_list list on list.prohibited_id = a.prohibited_id
                    inner join ngdrstab_conf_admblock3_district as dist ON dist.district_id = list.district_id
                    inner join ngdrstab_conf_admblock5_taluka tal on tal.taluka_id=list.taluka_id
                    inner join ngdrstab_conf_admblock7_village_mapping e ON e.village_id=list.village_id
                    where $condition");
                    $this->set('grid1', $result);

                    if (empty($result)) {

                        if ($this->request->data['hfaction'] == 'U') {
                            $result2 = $result1 = $result3 = $result4 = $result5 = '';
                            $sur_no = $this->request->data['prohibited_property_edtdel']['survey_no'];
                            $hfid = $_POST['hfid'];
                            $hfparamid = $_POST['hfparamid'];
                            $hfprohid = $_POST['hfprohid'];
                            $result2 = $this->proprodtsattr->query("select survey_no from ngdrstab_trn_prohibited_attribute where prohibited_id=$hfprohid and paramter_id=205");
                            $prev_kh_no = $result2[0][0]['survey_no'];
                            // $d =  date('d-m-Y h:s a');
                            if ($hfparamid == 205) {
                                $result1 = $this->proprodtsattr->query("update ngdrstab_trn_prohibited_attribute set survey_no = '$sur_no',paramter_value = '$sur_no' where id = $hfid and paramter_id=205");
                                //pr($sur_no);pr($prev_sur_no);pr($hfprohid);pr($prev_kh_no);exit;
                                $result3 = $this->proprodtsattr->query("update ngdrstab_trn_prohibited_attribute set survey_no='$sur_no'||'|'||paramter_value
                                                                     where survey_no in
                                                                    (select survey_no from ngdrstab_trn_prohibited_attribute
                                                                    where survey_no like '%$prev_kh_no%' and prohibited_id=$hfprohid and paramter_id=206)");
//                        pr("update ngdrstab_trn_prohibited_attribute set survey_no='$sur_no'||'|'||paramter_value
//                                                                     where survey_no in
//                                                                    (select survey_no from ngdrstab_trn_prohibited_attribute
//                                                                    where survey_no like '%$prev_kh_no%' and prohibited_id=$hfprohid and paramter_id=206)");
                                $this->Session->setFlash(__('lbleditmsg'));
                            } else {
                                //pr($hfparamid);pr($hfid);pr($sur_no);
                                $result5 = $this->proprodtsattr->query("select survey_no from ngdrstab_trn_prohibited_attribute where id=$hfid");
                                //pr($hfparamid);pr($result5);
                                $kh_no = $result5[0][0]['survey_no'];
                                $k = explode("|", $kh_no);
                                // $s = explode("|", $sur_no);
                                //      pr($s[0]);
                                //    pr($k[0]);
                                $result1 = $this->proprodtsattr->query("update ngdrstab_trn_prohibited_attribute set survey_no = '$k[0]'||'|'||'$sur_no',paramter_value = '$sur_no' where id = $hfid and paramter_id=206");
                                //  pr("update ngdrstab_trn_prohibited_attribute set survey_no = '$k[0]'||'|'||'$s[0]',paramter_value = '$s[0]' where id = $hfid and paramter_id=206");
                                $this->Session->setFlash(__('lbleditmsg'));
                            }

                            //$this->redirect(array('controller' => 'Masters', 'action' => 'prohibited_property_edtdel'));
                        } else {
                            $this->Session->setFlash(__('lblnotfoundmsg'));
                            $this->redirect(array('controller' => 'Masters', 'action' => 'prohibited_property_edtdel'));
                        }
                    }
                } if ($_POST['actiontype'] == 2) {
                    $this->redirect(array('controller' => 'Masters', 'action' => 'prohibited_property_edtdel'));
                }
            }
        } catch (Exception $ex) {
            pr($ex);
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    function delete_prohibited_entry() {
        try {
            $this->autoRender = FALSE;
            $this->loadModel('proprodtsattr');
//          pr($_POST['myCheckboxes']);
            if (isset($_POST['myCheckboxes'])) {
                $data = $_POST['myCheckboxes'];
                foreach ($data as $id) {
                    $this->proprodtsattr->query("delete from ngdrstab_trn_prohibited_attribute where id=$id");
                }
                echo 1;
            } else {
                return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
            }
        } catch (Exception $e) {

            $this->redirect(array('action' => 'error404'));
        }
    }

    public function document_edit_remark() { // JH state
        try {
            array_map([$this, 'loadModel'], ['ApplicationSubmitted']);
            $lang = ($this->Session->read("sess_langauge")) ? $this->Session->read("sess_langauge") : 'en';
            $user_id = $this->Auth->User("user_id");
            $this->set('hfaction', NULL);
            $this->set('hfid', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);

            $fieldlist = array();
            $fieldlist['tok_no']['text'] = 'is_required,is_digit';
            $fieldlist['doc_edit_remark']['text'] = 'is_required,is_alphanumericspace,is_maxlength200';
            $this->set("fieldlist", $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));

            if ($this->request->is('post')) {
                $this->set('actiontypeval', $_POST['actiontype']);
                if ($_POST['actiontype'] == 1) {
                    $token = $this->request->data['document_edit_remark']['tok_no'];
                    $searchbytok = $this->ApplicationSubmitted->query("select token_no, off.office_name_en,org_user_id from ngdrstab_trn_application_submitted apps
                                    join ngdrstab_mst_office as off on off.office_id = apps.office_id
                                    where apps.document_entry_flag='Y' and apps.final_stamp_flag='N' and apps.token_no=$token");

                    if (!empty($searchbytok)) {
                        $this->set('tokengrid', $searchbytok);
                    } else {
                        $this->Session->setFlash(__('lblnotfoundmsg'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'document_edit_remark'));
                    }
                }
                if ($_POST['actiontype'] == '2') {
                    $doc_remark = $this->request->data['document_edit_revert']['doc_edit_remark'];
                    $token_no = $this->request->data['document_edit_remark']['tok_no'];

                    $updtflag = $this->ApplicationSubmitted->query("update ngdrstab_trn_application_submitted set
                                    document_entry_flag='N', org_user_id=$user_id, document_edit_remark='$doc_remark'
                                    where token_no=$token_no");

                    if ($updtflag == NULL) {
                        $this->Session->setFlash(__('lbleditmsg'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'document_edit_remark'));
                    } else {
                        $this->Session->setFlash(__('Please Enter valid Token Number!!!'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'document_edit_remark'));
                    }
                }
            }
        } catch (Exception $ex) {
            pr($ex);
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function party_prestn_exemptn_list() {
        try {
            $this->loadModel('presentation_exmp');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->presentation_exmp->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['party_prestn_exemptn_list']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['doc_execution_type']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['party_prestn_exemptn_list']['req_ip'] = $this->request->clientIp();
                        $this->request->data['party_prestn_exemptn_list']['user_id'] = $user_id;
                        $this->request->data['party_prestn_exemptn_list']['created_date'] = $created_date;
                        $this->request->data['party_prestn_exemptn_list']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['party_prestn_exemptn_list']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['party_prestn_exemptn_list'] = $this->istrim($this->request->data['party_prestn_exemptn_list']);
                        $errarr = $this->validatedata($this->request->data['party_prestn_exemptn_list'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_presentation_exemption';
                            $duplicate['Fields'] = array('desc_en', 'desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U  
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['party_prestn_exemptn_list']);
                            if ($checkd) {
                                if ($this->presentation_exmp->save($this->request->data['party_prestn_exemptn_list'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'party_prestn_exemptn_list'));
                                    $this->set('divisionrecord', $this->presentation_exmp->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->presentation_exmp->save($this->request->data['party_prestn_exemptn_list'])) {
//                                $this->Session->setFlash(__("Record $actionvalue"));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'party_prestn_exemptn_list'));
//                                $this->set('divisionrecord', $this->presentation_exmp->find('all'));
//                            } else {
//                                $this->Session->setFlash("lblnotsavemsg");
//                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function party_exemptn_list_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('presentation_exmp');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->presentation_exmp->id = $id;
                if ($this->presentation_exmp->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'party_prestn_exemptn_list'));
                }
            }
        } catch (exception $ex) {
            pr($ex);
        }
    }

    public function counter_payment_mode() {
        try {
            $this->loadModel('payment_mode');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->payment_mode->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['payment_mode_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['payment_mode_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['counter_payment_mode']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['doc_execution_type']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['counter_payment_mode']['req_ip'] = $this->request->clientIp();
                        $this->request->data['counter_payment_mode']['user_id'] = $user_id;
                        $this->request->data['counter_payment_mode']['created_date'] = $created_date;
                        $this->request->data['counter_payment_mode']['state_id'] = $stateid;
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['counter_payment_mode']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['counter_payment_mode'] = $this->istrim($this->request->data['counter_payment_mode']);
                        $errarr = $this->validatedata($this->request->data['counter_payment_mode'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_payment_mode';
                            $duplicate['Fields'] = array('payment_mode_desc_en', 'payment_mode_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U  
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['counter_payment_mode']);
                            if ($checkd) {
                                if ($this->payment_mode->save($this->request->data['counter_payment_mode'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'counter_payment_mode'));
                                    $this->set('divisionrecord', $this->payment_mode->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->payment_mode->save($this->request->data['counter_payment_mode'])) {
//                                $this->Session->setFlash(__("Record $actionvalue"));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'counter_payment_mode'));
//                                $this->set('divisionrecord', $this->payment_mode->find('all'));
//                            } else {
//                                $this->Session->setFlash("lblnotsavemsg");
//                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function counter_paymode_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('payment_mode');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->payment_mode->id = $id;
                if ($this->payment_mode->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'counter_payment_mode'));
                }
            }
        } catch (exception $ex) {
            pr($ex);
        }
    }

    public function doc_revert_reasons() {
        try {
            $this->loadModel('RevertBackReasons');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->RevertBackReasons->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['revertback_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['revertback_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['doc_revert_reasons']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['doc_revert_reasons']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['doc_revert_reasons']['req_ip'] = $this->request->clientIp();
                        $this->request->data['doc_revert_reasons']['user_id'] = $user_id;
                        $this->request->data['doc_revert_reasons']['created_date'] = $created_date;
                        $this->request->data['doc_revert_reasons']['state_id'] = $stateid;

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['doc_revert_reasons']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['doc_revert_reasons'] = $this->istrim($this->request->data['doc_revert_reasons']);
                        $errarr = $this->validatedata($this->request->data['doc_revert_reasons'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_revertback_reasons';
                            $duplicate['Fields'] = array('revertback_desc_en', 'revertback_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U 
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['doc_revert_reasons']);
                            if ($checkd) {
                                if ($this->RevertBackReasons->save($this->request->data['doc_revert_reasons'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'doc_revert_reasons'));
                                    $this->set('divisionrecord', $this->RevertBackReasons->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->RevertBackReasons->save($this->request->data['doc_revert_reasons'])) {
//                                $this->Session->setFlash(__("Record $actionvalue"));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'doc_revert_reasons'));
//                                $this->set('divisionrecord', $this->RevertBackReasons->find('all'));
//                            } else {
//                                $this->Session->setFlash("lblnotsavemsg");
//                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function doc_revert_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('RevertBackReasons');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->RevertBackReasons->id = $id;
                if ($this->RevertBackReasons->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'doc_revert_reasons'));
                }
            }
        } catch (exception $ex) {
            pr($ex);
        }
    }

    public function final_reg_checklist_entry() {
        try {
            $this->loadModel('SroChecklist');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('ErrorMessages');
            $this->set('selectdivisionnew', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    ))
                , 'order' => 'conf.language_id ASC'));
            $this->set('languagelist', $languagelist);

            $this->set('divisionrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $divisionrecord = $this->SroChecklist->find('all');
            $this->set('divisionrecord', $divisionrecord);
            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['checklist_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['checklist_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['final_reg_checklist_entry']['csrftoken']);
                // code for reading msgs from json file which are loaded in the json file only once after the login is done successfully from database table
                $file = new File(WWW_ROOT . 'files/jsonfile_alerts.json');
                $json = $file->read(true, 'r');
                $alerts = json_decode($json, TRUE);
                $date = date('Y/m/d H:i:s');
                $created_date = date('Y/m/d');
                //   $req_ip = $_SERVER['REMOTE_ADDR'];
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                $this->request->data['final_reg_checklist_entry']['stateid'] = $stateid;
                $stateid = $this->Auth->User("state_id");
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        $this->request->data['final_reg_checklist_entry']['req_ip'] = $this->request->clientIp();
                        $this->request->data['final_reg_checklist_entry']['user_id'] = $user_id;
                        $this->request->data['final_reg_checklist_entry']['created_date'] = $created_date;
                        $this->request->data['final_reg_checklist_entry']['state_id'] = $stateid;

                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['final_reg_checklist_entry']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {
                            $actionvalue = "lblsavemsg";
                        }
                        $this->request->data['final_reg_checklist_entry'] = $this->istrim($this->request->data['final_reg_checklist_entry']);
                        $errarr = $this->validatedata($this->request->data['final_reg_checklist_entry'], $fieldlist);
                        $flag = 0;
                        foreach ($errarr as $dd) {
                            if ($dd != "") {
                                $flag = 1;
                            }
                        }
                        if ($flag == 1) {
                            $this->set("errarr", $errarr);
                        } else {
                            $duplicate['Table'] = 'ngdrstab_mst_sro_checklist';
                            $duplicate['Fields'] = array('checklist_desc_en', 'checklist_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U   
                            $duplicate['PrimaryKey'] = 'id';
                            $checkd = $this->check_duplicate($duplicate, $this->request->data['final_reg_checklist_entry']);
                            if ($checkd) {
                                if ($this->SroChecklist->save($this->request->data['final_reg_checklist_entry'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'final_reg_checklist_entry'));
                                    $this->set('divisionrecord', $this->SroChecklist->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }
//                            if ($this->SroChecklist->save($this->request->data['final_reg_checklist_entry'])) {
//                                $this->Session->setFlash(__("Record $actionvalue"));
//                                $this->redirect(array('controller' => 'Masters', 'action' => 'final_reg_checklist_entry'));
//                                $this->set('divisionrecord', $this->SroChecklist->find('all'));
//                            } else {
//                                $this->Session->setFlash("lblnotsavemsg");
//                            }
                        }
                    }
                    if ($actiontype == 2) {
                        $this->set('hfupdateflag', 'Y');
                    }
                }
            }
        } catch (Exception $exc) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $exc->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function sro_checklist_delete($id = null) {
        $this->autoRender = false;
        $this->loadModel('SroChecklist');
        try {
            if (isset($id) && is_numeric($id)) {
                $this->SroChecklist->id = $id;
                if ($this->SroChecklist->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'final_reg_checklist_entry'));
                }
            }
        } catch (exception $ex) {
            pr($ex);
        }
    }

    public function set_token_sequence() {
        try {
            array_map(array($this, 'loadModel'), array('NGDRSErrorCode', 'counter', 'mainlanguage'));
            $user_id = $this->Auth->User("user_id");
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $stateid = $this->Auth->User("state_id");
            $created_date = date('Y/m/d');
            $lang = $this->Session->read("sess_langauge");
            $this->set('lang', $lang);
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->set('actiontypeval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $this->set('hfactionval', NULL);
            $this->set('counterrecord', $this->counter->find('all'));
            $this->set('finyear', ClassRegistry::init('finyear')->find('list', array('fields' => array('finyear_id', 'finyear_desc'), 'order' => array('finyear.current_year' => 'desc'))));

            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $fieldlist = array();

            $fieldlist['fin_year_id']['select'] = 'is_select_req';
//             $fieldlist['minorfun_id']['select'] = 'is_select_req'; 

            $this->set('fieldlist', $fieldlist);
            foreach ($fieldlist as $key => $valrule) {
                $errarr[$key . '_error'] = "";
            }
            $this->set("errarr", $errarr);
            if ($this->request->is('post') || $this->request->is('put')) {
                //$this->check_csrf_token($this->request->data['counter']['csrftoken']);


                if (isset($this->request->data['counter']['fin_year_id']) && isset($this->request->data['counter']['token_no_count'])) {
                    //  pr($this->request->data);
                    $token_year = ClassRegistry::init('finyear')->field('year_for_token', array('finyear_id' => $this->request->data['counter']['fin_year_id']));
                    $token_seq = $token_year . $this->request->data['counter']['token_no_count'];
                    $this->counter->updateAll(array("token_no_count" => $token_seq));
                    $this->Session->setFlash(__("Token Sequence updated Successfully"));
                    $this->redirect(array('controller' => 'Masters', 'action' => 'set_token_sequence'));
                } else {
                    $this->Session->setFlash(__("data not found"));
                }

                $this->set_csrf_token();
            }
        } catch (Exception $ex) {
            //  pr($ex) ;
        }
    }

    public function formlabelconfig() {
        $this->loadModel('State');
        $this->loadModel('User');
        $this->loadModel('Formlabel');
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('Menu');
        $this->loadModel('SubMenu');
        $this->loadModel('Subsubmenu');
        $this->loadModel('minorfunction');
        $this->loadModel('StateLanguage');
        $this->loadModel('currentstate');
        //pr('sdfdsf');exit;

        $statecount = $this->currentstate->find('all');
        //pr($statecount);exit;
        $st_coun = count($statecount);
        if ($st_coun == 0) {
            $this->set('st_coun', $st_coun);
            //exit;
        } else {
            $this->set('st_coun', $st_coun);

            $stateid = $this->Auth->User("state_id");
            $statelng = $this->StateLanguage->query("select * from ngdrstab_mst_state_language where state_id='$stateid' and language_id!=1");
            $cntstatelang = count($statelng);


            $languagecount_n = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
            $cntcnt_n = $languagecount_n[0]['mainlanguage']['lang_count'];
            /* if($cntstatelang!=0)
              {
              if($cntcnt_n==null || $cntcnt_n==0 || $cntcnt_n==NULL || $cntcnt_n==''){
              $this->Session->setFlash(
              __('Please first enter Language count for State first')
              );
              $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
              }
              } */

            $conflanguagecount = $this->language->query('select count(id) from ngdrstab_conf_language where language_id!=1');
            if ($cntstatelang != 0) {
                if (sizeof($conflanguagecount) <= 0) {
                    $this->Session->setFlash(
                            __('Please select state specific local languages')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'config_language'));
                }
            }


            //languages are loaded firstly from config (from table)
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'mainlanguage.language_name ASC'
            ));
            // pr($languagelist);exit;
            $this->set('languagelist', $languagelist);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            //$labelrecordc=$this->Formlabel->find('all', array('order' => 'label_desc_en ASC','limit' => '50'));
            $labelrecordc = $this->Formlabel->find('all', array('order' => 'label_desc_en ASC'));


            $fieldlist = array(); 
            foreach ($labelrecordc as $formlabel) { 
                foreach ($languagelist as $language) {
                   if($language['mainlanguage']['language_code']!='en'){
                    $fieldlist['form_'. $language['mainlanguage']['language_code'].'_'.$formlabel['Formlabel']['id']]['text'] ='unicode_rule_' . $language['mainlanguage']['language_code'];
                   }
                } 
            }
           // pr($fieldlist);
            //exit;

            


            $this->set('labelrecordc', $labelrecordc);
            $labelmenu = $this->Menu->find('all', array('conditions'=>array('display_flag'=>'Y'),'order' => 'name_en ASC'));
            $this->set('labelmenu', $labelmenu);
           
            foreach ($labelmenu  as $menu ) { 
                foreach ($languagelist as $language) {
                   if($language['mainlanguage']['language_code']!='en'){
                    $fieldlist['menu_'. $language['mainlanguage']['language_code'].'_'.$menu['Menu']['id']]['text'] ='unicode_rule_' . $language['mainlanguage']['language_code'];
                   }
                } 
            }
            
            
            $labelsubmenu = $this->SubMenu->find('all', array('conditions'=>array('display_flag'=>'Y'),'order' => 'name_en ASC'));
            $this->set('labelsubmenu', $labelsubmenu);
            
            foreach ($labelsubmenu  as $submenu ) { 
                foreach ($languagelist as $language) {
                   if($language['mainlanguage']['language_code']!='en'){
                    $fieldlist['submenu_'. $language['mainlanguage']['language_code'].'_'.$submenu['SubMenu']['id']]['text'] ='unicode_rule_' . $language['mainlanguage']['language_code'];
                   }
                } 
            }
            
            
            $this->set('labelsubsubmenu', $this->Subsubmenu->find('all', array('conditions'=>array('display_flag'=>'Y'),'order' => 'name_en ASC')));
            $labelminorfunction = $this->minorfunction->find('all', array('order' => 'function_desc_en ASC'));
            $this->set('labelminorfunction', $labelminorfunction);
            
            foreach ($labelminorfunction  as $subsubmenu ) { 
                foreach ($languagelist as $language) {
                   if($language['mainlanguage']['language_code']!='en'){
                    $fieldlist['minor_'. $language['mainlanguage']['language_code'].'_'.$subsubmenu['minorfunction']['id']]['text'] ='unicode_rule_' . $language['mainlanguage']['language_code'];
                   }
                } 
            }
            
            
            $this->set("fieldlist", $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $req_ip = $_SERVER['REMOTE_ADDR'];
            // $this->request->data['Formlabel']['req_ip'] = $req_ip;
            //$this->request->data['Formlabel']['user_id'] = $user_id;
            //$this->request->data['Formlabel']['created_date'] = $created_date;
            // $this->request->data['Formlabel']['state_id'] = $stateid;

            $a = array();
            if ($this->request->is('post') || $this->request->is('put')) {
                //$size = $_SERVER['CONTENT_LENGTH'];
                // pr($size);
                //debug($this->request->data);
                //pr($this->request->data);exit;
                if ($this->request->data['radioval'] == 1) {
                    //pr($this->request->data);

                    for ($aa = 0; $aa < sizeof($labelrecordc); $aa++) {
                        for ($bb = 0; $bb < sizeof($languagelist); $bb++) {
                            if ($languagelist[$bb]['mainlanguage']['id'] != 1) {
                                $dclss = 'form_' . $languagelist[$bb]['mainlanguage']['language_code'] . '_' . $labelrecordc[$aa]['Formlabel']['id'];
                                if (isset($this->request->data[$dclss])) {
                                    $uplabel = $this->request->data[$dclss];

                                    $idtoupdate = $labelrecordc[$aa]['Formlabel']['id'];
                                    $nn1_update = 'label_desc_' . $languagelist[$bb]['mainlanguage']['language_code'];
                                    //pr($nn1_update);pr($uplabel);
                                    $this->Formlabel->query("UPDATE ngdrstab_mst_formlabels set $nn1_update = '$uplabel' where id=$idtoupdate");
                                }
                            }
                        }
                    }




                    for ($f = 0; $f < sizeof($languagelist); $f++) {
                        $varv = $languagelist[$f]['mainlanguage']['language_code'] . '_activation_flag';
                        //pr($varv);
                        if ($varv != 'en_activation_flag') {
                            $this->Formlabel->query("UPDATE ngdrstab_mst_formlabels set $varv = 'N'");
                            foreach ($this->request->data as $k => $v) {
                                if ($k == $varv) {
                                    foreach ($v as $key => $val) {
                                        // pr($val);
                                        $this->Formlabel->updateAll(array($varv => "'Y'"), array("id" => $val));
                                    }
                                }
                            }
                        }
                    }


                    /* foreach ($this->request->data as $k => $v) {
                      if ($k == 'll_activation_flag') {
                      // pr($v);
                      foreach($v as $key => $val){
                      //pr($val);
                      $this->Formlabel->updateAll(
                      array("ll_activation_flag" => "'Y'"), array("id" => $val)
                      );
                      }
                      }
                      } */

                    $this->Session->setFlash(
                            __('lbleditmsg')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
                } else if ($this->request->data['radioval'] == 2) {


                    // pr($labelmenu);exit;
                    // pr($this->request->data);exit;
                    for ($aa = 0; $aa < sizeof($labelmenu); $aa++) {
                        for ($bb = 0; $bb < sizeof($languagelist); $bb++) {
                            if ($languagelist[$bb]['mainlanguage']['id'] != 1) {
                                $dclss = 'menu_' . $languagelist[$bb]['mainlanguage']['language_code'] . '_' . $labelmenu[$aa]['Menu']['id'];
                                //pr($dclss);
                                //pr($this->request->data['formlabelconfig'][$dclss]);
                                if (isset($this->request->data[$dclss])) {

                                    $uplabel = $this->request->data[$dclss];

                                    //echo '<br>';
                                    //pr($labelmenu[$aa]['Menu']['id']);
                                    //echo '---';
                                    //pr($uplabel);
                                    $idtoupdate = $labelmenu[$aa]['Menu']['id'];
                                    $nn1_update = 'name_' . $languagelist[$bb]['mainlanguage']['language_code'];
                                    //pr($idtoupdate);pr($nn1_update);pr($uplabel);
                                    $this->Menu->query("UPDATE ngdrstab_mst_menu set $nn1_update = '$uplabel' where id=$idtoupdate");
                                }
                            }
                        }
                    }

                    /* foreach ($this->request->data as $kk => $vv) {
                      if ($kk == 'menu_ll_activation_flag') {
                      // pr($v);
                      foreach($vv as $keyy => $vall){
                      //pr($val);
                      $this->Menu->updateAll(
                      array("menu_ll_activation_flag" => "'Y'"), array("id" => $vall)
                      );
                      }
                      }
                      } */
                    //pr($this->request->data);
                    for ($g = 0; $g < sizeof($languagelist); $g++) {
                        $varvg = 'menu_' . $languagelist[$g]['mainlanguage']['language_code'] . '_activation_flag';


                        //pr($varvg);
                        if ($varvg != 'menu_en_activation_flag') {

                            $this->Menu->query("UPDATE ngdrstab_mst_menu set $varvg = 'N'");

                            foreach ($this->request->data as $k => $v) {
                                if ($k == $varvg) {
                                    foreach ($v as $key => $val) {
                                        // pr($val);
                                        $this->Menu->updateAll(array($varvg => "'Y'"), array("id" => $val));
                                    }
                                }
                            }
                        }
                    }
                    $this->Session->setFlash(
                            __('lbleditmsg')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
                } else if ($this->request->data['radioval'] == 3) {
                    /* $this->SubMenu->query("UPDATE ngdrstab_mst_submenu set submenu_ll_activation_flag = 'N'");


                      foreach ($this->request->data as $kkk => $vvv) {
                      if ($kkk == 'submenu_ll_activation_flag') {
                      // pr($v);
                      foreach($vvv as $keyyy => $valll){
                      //pr($val);
                      $this->SubMenu->updateAll(
                      array("submenu_ll_activation_flag" => "'Y'"), array("id" => $valll)
                      );
                      }
                      }
                      }
                     */

                    for ($aa = 0; $aa < sizeof($labelsubmenu); $aa++) {
                        for ($bb = 0; $bb < sizeof($languagelist); $bb++) {
                            if ($languagelist[$bb]['mainlanguage']['id'] != 1) {
                                $dclss = 'submenu_' . $languagelist[$bb]['mainlanguage']['language_code'] . '_' . $labelsubmenu[$aa]['SubMenu']['id'];
                                //pr($dclss);
                                //pr($this->request->data['formlabelconfig'][$dclss]);
                                if (isset($this->request->data[$dclss])) {

                                    $uplabel = $this->request->data[$dclss];

                                    //echo '<br>';
                                    //pr($labelsubmenu[$aa]['SubMenu']['id']);
                                    //echo '---';
                                    //pr($uplabel);
                                    $idtoupdate = $labelsubmenu[$aa]['SubMenu']['id'];
                                    $nn1_update = 'name_' . $languagelist[$bb]['mainlanguage']['language_code'];
                                    //pr($idtoupdate);pr($nn1_update);pr($uplabel);
                                    $this->SubMenu->query("UPDATE ngdrstab_mst_submenu set $nn1_update = '$uplabel' where id=$idtoupdate");
                                }
                            }
                        }
                    }


                    for ($h = 0; $h < sizeof($languagelist); $h++) {
                        $varvg = 'submenu_' . $languagelist[$h]['mainlanguage']['language_code'] . '_activation_flag';


                        //pr($varvg);
                        if ($varvg != 'submenu_en_activation_flag') {

                            $this->SubMenu->query("UPDATE ngdrstab_mst_submenu set $varvg = 'N'");

                            foreach ($this->request->data as $k => $v) {
                                if ($k == $varvg) {
                                    foreach ($v as $key => $val) {
                                        // pr($val);
                                        $this->SubMenu->updateAll(array($varvg => "'Y'"), array("id" => $val));
                                    }
                                }
                            }
                        }
                    }

                    $this->Session->setFlash(
                            __('lbleditmsg')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
                } else if ($this->request->data['radioval'] == 4) {

                    for ($aa = 0; $aa < sizeof($labelminorfunction); $aa++) {
                        for ($bb = 0; $bb < sizeof($languagelist); $bb++) {
                            if ($languagelist[$bb]['mainlanguage']['id'] != 1) {
                                $dclss = 'minor_' . $languagelist[$bb]['mainlanguage']['language_code'] . '_' . $labelminorfunction[$aa]['minorfunction']['id'];
                                //pr($dclss);
                                //pr($this->request->data['formlabelconfig'][$dclss]);
                                if (isset($this->request->data[$dclss])) {

                                    $uplabel = $this->request->data[$dclss];

                                    //echo '<br>';
                                    //pr($labelminorfunction[$aa]['minorfunction']['id']);
                                    //echo '---';
                                    //pr($uplabel);
                                    $idtoupdate = $labelminorfunction[$aa]['minorfunction']['id'];
                                    $nn1_update = 'function_desc_' . $languagelist[$bb]['mainlanguage']['language_code'];
                                    //pr($idtoupdate);pr($nn1_update);pr($uplabel);
                                    $this->minorfunction->query("UPDATE ngdrstab_mst_minorfunctions set $nn1_update = '$uplabel' where id=$idtoupdate");
                                }
                            }
                        }
                    }

                    // exit;
                    for ($q = 0; $q < sizeof($languagelist); $q++) {
                        $varvg = 'minor_' . $languagelist[$q]['mainlanguage']['language_code'] . '_activation_flag';


                        //pr($varvg);
                        if ($varvg != 'minor_en_activation_flag') {

                            $this->minorfunction->query("UPDATE ngdrstab_mst_minorfunctions set $varvg = 'N'");

                            foreach ($this->request->data as $k => $v) {
                                if ($k == $varvg) {
                                    foreach ($v as $key => $val) {
                                        // pr($val);
                                        $this->minorfunction->updateAll(array($varvg => "'Y'"), array("id" => $val));
                                    }
                                }
                            }
                        }
                    }

                    $this->Session->setFlash(
                            __('lbleditmsg')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
                }
                /* else if($this->request->data['radioval'] ==4)
                  {
                  $this->Subsubmenu->query("UPDATE ngdrstab_mst_subsubmenu set subsubmenu_ll_activation_flag = 'N'");


                  foreach ($this->request->data as $kkkk => $vvvv) {
                  if ($kkkk == 'subsubmenu_ll_activation_flag') {
                  // pr($v);
                  foreach($vvvv as $keyyyy => $vallll){
                  //pr($val);
                  $this->Subsubmenu->updateAll(
                  array("subsubmenu_ll_activation_flag" => "'Y'"), array("id" => $vallll)
                  );
                  }
                  }
                  }

                  $this->Session->setFlash(
                  __('The Record  has been Updated')
                  );
                  $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
                  } */
            }
        }
    }

    //commented on 27 jan
    /* public function formlabelconfig(){
      $this->loadModel('State');
      $this->loadModel('User');
      $this->loadModel('Formlabel');
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('Menu');
      $this->loadModel('SubMenu');
      $this->loadModel('Subsubmenu');
      $this->loadModel('minorfunction');
      //languages are loaded firstly from config (from table)
      $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
      array(
      'table' => 'ngdrstab_conf_language',
      'alias' => 'conf',
      'type' => 'inner',
      'foreignKey' => false,
      'conditions' => array('conf.language_id = mainlanguage.id')
      )), 'order' => 'mainlanguage.language_name ASC'
      ));
      //pr($languagelist);
      $this->set('languagelist', $languagelist);
      $this->set('actiontypeval', NULL);
      $this->set('hfactionval', NULL);
      $this->set('hfid', NULL);
      $this->set('hfupdateflag', NULL);
      $user_id = $this->Auth->User("user_id");
      $stateid = $this->Auth->User("state_id");
      $laug = $this->Session->read("sess_langauge");
      $this->set('laug', $laug);
      $labelrecordc=$this->Formlabel->find('all', array('order' => 'label_desc_en ASC'));
      $this->set('labelrecordc', $labelrecordc);
      $this->set('labelmenu', $this->Menu->find('all', array('order' => 'name_en ASC')));
      $this->set('labelsubmenu', $this->SubMenu->find('all', array('order' => 'name_en ASC')));
      $this->set('labelsubsubmenu', $this->Subsubmenu->find('all', array('order' => 'name_en ASC')));
      $this->set('labelminorfunction', $this->minorfunction->find('all', array('order' => 'function_desc_en ASC')));
      $date = date('Y/m/d H:i:s');
      $created_date = date('Y/m/d');
      $req_ip = $_SERVER['REMOTE_ADDR'];
      $this->request->data['Formlabel']['req_ip'] = $req_ip;
      $this->request->data['Formlabel']['user_id'] = $user_id;
      //$this->request->data['Formlabel']['created_date'] = $created_date;
      $this->request->data['Formlabel']['state_id'] = $stateid;

      $a=array();
      if ($this->request->is('post') || $this->request->is('put')) {

      if($this->request->data['radioval'] ==1)
      {


      for($f=0;$f<sizeof($languagelist);$f++){
      $varv=$languagelist[$f]['mainlanguage']['language_code'].'_activation_flag';
      //pr($varv);
      if($varv!='en_activation_flag'){
      $this->Formlabel->query("UPDATE ngdrstab_mst_formlabels set $varv = 'N'");
      foreach ($this->request->data as $k => $v) {
      if($k==$varv){
      foreach($v as $key => $val){
      // pr($val);
      $this->Formlabel->updateAll(array($varv => "'Y'"), array("id" => $val));
      }
      }
      }
      }
      }
      //  pr($this->request->data);

      /*foreach ($this->request->data as $k => $v) {
      if ($k == 'll_activation_flag') {
      // pr($v);
      foreach($v as $key => $val){
      //pr($val);
      $this->Formlabel->updateAll(
      array("ll_activation_flag" => "'Y'"), array("id" => $val)
      );
      }
      }
      } */

    /*    $this->Session->setFlash(
      __('The Record  has been Updated')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
      }


      else if($this->request->data['radioval'] ==2)
      {



      /*foreach ($this->request->data as $kk => $vv) {
      if ($kk == 'menu_ll_activation_flag') {
      // pr($v);
      foreach($vv as $keyy => $vall){
      //pr($val);
      $this->Menu->updateAll(
      array("menu_ll_activation_flag" => "'Y'"), array("id" => $vall)
      );
      }
      }
      } */
    //pr($this->request->data);
    /*    for($g=0;$g<sizeof($languagelist);$g++){
      $varvg='menu_'.$languagelist[$g]['mainlanguage']['language_code'].'_activation_flag';


      //pr($varvg);
      if($varvg!='menu_en_activation_flag'){

      $this->Menu->query("UPDATE ngdrstab_mst_menu set $varvg = 'N'");

      foreach ($this->request->data as $k => $v) {
      if($k==$varvg){
      foreach($v as $key => $val){
      // pr($val);
      $this->Menu->updateAll(array($varvg => "'Y'"), array("id" => $val));
      }
      }
      }
      }
      }
      $this->Session->setFlash(
      __('The Record  has been Updated')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
      }
      else if($this->request->data['radioval'] ==3)
      {
      /*$this->SubMenu->query("UPDATE ngdrstab_mst_submenu set submenu_ll_activation_flag = 'N'");


      foreach ($this->request->data as $kkk => $vvv) {
      if ($kkk == 'submenu_ll_activation_flag') {
      // pr($v);
      foreach($vvv as $keyyy => $valll){
      //pr($val);
      $this->SubMenu->updateAll(
      array("submenu_ll_activation_flag" => "'Y'"), array("id" => $valll)
      );
      }
      }
      }
     */

    /*     for($h=0;$h<sizeof($languagelist);$h++){
      $varvg='submenu_'.$languagelist[$h]['mainlanguage']['language_code'].'_activation_flag';


      //pr($varvg);
      if($varvg!='submenu_en_activation_flag'){

      $this->SubMenu->query("UPDATE ngdrstab_mst_submenu set $varvg = 'N'");

      foreach ($this->request->data as $k => $v) {
      if($k==$varvg){
      foreach($v as $key => $val){
      // pr($val);
      $this->SubMenu->updateAll(array($varvg => "'Y'"), array("id" => $val));
      }
      }
      }
      }
      }

      $this->Session->setFlash(
      __('The Record  has been Updated')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
      }
      else if($this->request->data['radioval'] ==4)
      {

      for($q=0;$q<sizeof($languagelist);$q++){
      $varvg='minor_'.$languagelist[$q]['mainlanguage']['language_code'].'_activation_flag';


      //pr($varvg);
      if($varvg!='minor_en_activation_flag'){

      $this->minorfunction->query("UPDATE ngdrstab_mst_minorfunctions set $varvg = 'N'");

      foreach ($this->request->data as $k => $v) {
      if($k==$varvg){
      foreach($v as $key => $val){
      // pr($val);
      $this->minorfunction->updateAll(array($varvg => "'Y'"), array("id" => $val));
      }
      }
      }
      }
      }

      $this->Session->setFlash(
      __('The Record  has been Updated')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
      }
      /*else if($this->request->data['radioval'] ==4)
      {
      $this->Subsubmenu->query("UPDATE ngdrstab_mst_subsubmenu set subsubmenu_ll_activation_flag = 'N'");


      foreach ($this->request->data as $kkkk => $vvvv) {
      if ($kkkk == 'subsubmenu_ll_activation_flag') {
      // pr($v);
      foreach($vvvv as $keyyyy => $vallll){
      //pr($val);
      $this->Subsubmenu->updateAll(
      array("subsubmenu_ll_activation_flag" => "'Y'"), array("id" => $vallll)
      );
      }
      }
      }

      $this->Session->setFlash(
      __('The Record  has been Updated')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'formlabelconfig'));
      } */
    /*       }



      } */



    public function language_main_menu() {
        $role_id = $this->Auth->User('role_id');
        //pr($role_id);
        $this->loadModel('LanguageMainmenu');
        if ($role_id == '100001')
            return $this->LanguageMainmenu->find('all', array('conditions' => array('language_mainmenu_id' => 4), 'order' => 'field_order'));
        else
            return $this->LanguageMainmenu->find('all', array('conditions' => array('language_mainmenu_id !=' => 4), 'order' => 'field_order'));
    }

    public function select_language_old() {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('StateLanguage');
        $this->loadModel('currentstate');

        $statecount = $this->currentstate->find('all');
        //pr($statecount);exit;
        $st_coun = count($statecount);
        if ($st_coun == 0) {
            $this->set('st_coun', $st_coun);
            //exit;
        } else {
            $this->set('st_coun', $st_coun);



            $curstate = $statecount[0]['currentstate']['state_id'];

            $statelng = $this->StateLanguage->query("select * from ngdrstab_mst_state_language where state_id='$curstate' and language_id!=1");
            //pr($statelng);
            $cntstatelang = count($statelng);
            //pr($cntstatelang);
            $this->set('cntstatelang', $cntstatelang);
            $laug = $this->Session->read("sess_langauge");
            if ($laug == NULL) {
                $this->Session->write("sess_langauge", 'en');
            }
            $this->set('laug', $laug);

            $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
            $cntcnt = $languagecount[0]['mainlanguage']['lang_count'];
            if ($cntcnt)
                $this->set('cntcnt', $cntcnt);
            else
                $this->set('cntcnt', '');
            if ($this->request->is('post') || $this->request->is('put')) {
                // pr($this->request->data);
                $count_lang = $this->request->data['config_language']['numberoflanguages'];
                $this->mainlanguage->updateAll(array('lang_count' => $count_lang));
                $this->Session->setFlash(
                        __('Language Count has been saved')
                );
                $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
            }
        }
    }

    public function select_language() {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('StateLanguage');
        $this->loadModel('currentstate');

        $statecount = $this->currentstate->find('all');
        //pr($statecount);exit;
        $st_coun = count($statecount);
        if ($st_coun == 0) {
            $this->set('st_coun', $st_coun);
            //exit;
        } else {
            $this->set('st_coun', $st_coun);
            $skpflag = $statecount[0]['currentstate']['skip_flag'];
            $this->set('skpflag', $skpflag);

            $curstate = $statecount[0]['currentstate']['state_id'];

            $statelng = $this->StateLanguage->query("select * from ngdrstab_mst_state_language where state_id='$curstate' and language_id!=1");
            //pr($statelng);
            $cntstatelang = count($statelng);
            //pr($cntstatelang);
            $this->set('cntstatelang', $cntstatelang);
            $laug = $this->Session->read("sess_langauge");
            if ($laug == NULL) {
                $this->Session->write("sess_langauge", 'en');
            }
            $this->set('laug', $laug);

            $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
            $cntcnt = $languagecount[0]['mainlanguage']['lang_count'];
            if ($cntcnt)
                $this->set('cntcnt', $cntcnt);
            else
                $this->set('cntcnt', '');


             $fieldlist['numberoflanguages']['text'] = 'is_required,is_positiveinteger';
              $this->set('fieldlist', $fieldlist);
              $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            

            if ($this->request->is('post') || $this->request->is('put')) {

                if (!empty($this->request->data['skipflag'])) {
                    //pr($this->request->data['skipflag']);
                    $flgsetf = $this->request->data['skipflag'];

                    $this->currentstate->query("update ngdrs_current_state set skip_flag='$flgsetf'");
                    $this->Session->setFlash(
                            __('For setting of any other language count Please contact administrator')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
                    exit;
                } else {

                    $count_lang = $this->request->data['config_language']['numberoflanguages'];
                    $this->mainlanguage->updateAll(array('lang_count' => $count_lang));
                    $this->Session->setFlash(
                            __('Language Count has been saved')
                    );
                    $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
                }
            }
        }
    }

    public function select_language_count() {
        $this->loadModel('mainlanguage');
        $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
        $cntcnt = $languagecount[0]['mainlanguage']['lang_count'];
        if ($cntcnt)
            return $cntcnt;
        else
            return '';
    }

    //commented on 27 jan
    /* public function select_language(){
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('StateLanguage');
      $this->loadModel('currentstate');

      $statecount = $this->currentstate->find('all');
      //pr($statecount);exit;
      $st_coun=count($statecount);
      if($st_coun==0)
      {
      $this->set('st_coun', $st_coun);
      //exit;
      }
      else{
      $this->set('st_coun', $st_coun);



      $curstate=$statecount[0]['currentstate']['state_id'];

      $statelng=$this->StateLanguage->query("select * from ngdrstab_mst_state_language where state_id='$curstate' and language_id!=1");
      //pr($statelng);
      $cntstatelang=count($statelng);
      //pr($cntstatelang);
      $this->set('cntstatelang', $cntstatelang);
      $laug = $this->Session->read("sess_langauge");
      if ($laug == NULL) {
      $this->Session->write("sess_langauge", 'en');
      }
      $this->set('laug', $laug);

      $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
      $cntcnt=$languagecount[0]['mainlanguage']['lang_count'];
      if($cntcnt)
      $this->set('cntcnt', $cntcnt);
      else
      $this->set('cntcnt', '');

      $fieldlist['numberoflanguages']['text'] = 'is_required';
      $this->set('fieldlist', $fieldlist);
      $this->set('result_codes', $this->getvalidationruleset($fieldlist));
      $curst=$this->currentstate->query('select cs.skip_flag,s.state_id,s.state_name_en from ngdrs_current_state cs inner join ngdrstab_conf_admblock1_state s on s.state_id=cs.state_id');
      $skpflag=$curst[0][0]['skip_flag'];
      //            $this->set('statename', $arrst);
      $this->set('skpflag', $skpflag);

      if ($this->request->is('post') || $this->request->is('put')) {

      if(isset($this->request->data['skipflag'])){
      //pr($this->request->data['skipflag']);
      $flgsetf=$this->request->data['skipflag'];

      $this->currentstate->query("update ngdrs_current_state set skip_flag='$flgsetf'");
      $this->Session->setFlash(
      __('For setting of any other language count Please contact administrator')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
      exit;
      }

      // pr($this->request->data);
      $count_lang=$this->request->data['config_language']['numberoflanguages'];
      $this->mainlanguage->updateAll(array('lang_count' => $count_lang));
      $this->Session->setFlash(
      __('Language Count has been saved')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
      }
      }
      }
     */



    /* public function select_language(){
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $laug = $this->Session->read("sess_langauge");
      if ($laug == NULL) {
      $this->Session->write("sess_langauge", 'en');
      }
      $this->set('laug', $laug);

      $languagecount = $this->mainlanguage->find('all', array('fields' => array('lang_count')));
      $cntcnt=$languagecount[0]['mainlanguage']['lang_count'];
      if($cntcnt)
      $this->set('cntcnt', $cntcnt);
      else
      $this->set('cntcnt', '');
      if ($this->request->is('post') || $this->request->is('put')) {
      // pr($this->request->data);
      $count_lang=$this->request->data['config_language']['numberoflanguages'];
      $this->mainlanguage->updateAll(array('lang_count' => $count_lang));
      $this->Session->setFlash(
      __('Language Count has been saved')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'select_language'));
      }
      } */


    // commented on 27 jan
    /* public function select_state(){
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('state_logo');
      $this->loadModel('currentstate');
      $this->loadModel('State');
      $this->loadModel('User');

      $language = $this->Session->read('sess_langauge');
      $this->set('language', $language);

      $statecount = $this->currentstate->find('all');
      //pr($statecount);


      $szcntstate=sizeof($statecount);
      //pr($szcntstate);
      if($szcntstate>0)
      {
      $this->set('statecount', $statecount);
      }else{
      $this->set('statecount', NULL);
      }

      $this->set('szcntstate', $szcntstate);
      $this->set('state_list', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $language), 'order' => array('state_name_en' => 'ASC'))));

      if ($this->request->is('post') || $this->request->is('put')) {
      //pr($this->request->data);exit;
      $dept_name=$this->request->data['config_state']['dept_name'];
      if (!empty($this->request->data['config_state']['logo_path']['name'])) {

      if ($this->image_validation($this->request->data['config_state']['logo_path'])) {

      $file = $this->request->data['config_state']['logo_path']; //put the  data into a var for easy use
      $ext = substr(strtolower(strrchr($file['name'], '.')), 1); //get the extension
      $arr_ext = array('jpg', 'jpeg', 'gif', 'png'); //set allowed extensions

      if (in_array($ext, $arr_ext)) {
      $temp = explode(".", $file['name']);
      $stateid=$this->request->data['config_state']['state_id'];

      $statename = $this->State->query("SELECT state_name_en FROM ngdrstab_conf_admblock1_state where state_id=?", array($stateid));
      $statename = $statename[0][0]['state_name_en'];

      $newfilename = $stateid . '_' . $statename . '.' . end($temp);
      //$newfilename = 'templogo'. '.' . end($temp);
      //                                move_uploaded_file($_FILES["file"]["tmp_name"], "../img/imageDirectory/" . $newfilename);
      //                             pr($file);
      //                             pr($newfilename);exit;
      //do the actual uploading of the file. First arg is the tmp name, second arg is
      //where we are putting it
      if (move_uploaded_file($file['tmp_name'], WWW_ROOT . 'img/state_logos_img' . DS . $newfilename)) {

      $file['name'] = 'state_logos_img/' . $newfilename;
      //prepare the filename for database entry
      $this->request->data['config_state']['logo_path'] = $file['name'];
      $filenm=$file['name'];

      $this->state_logo->query("insert into ngdrstab_conf_state_logo (state_id,logo_path) values('$stateid','$filenm')");

      }
      }
      } else {
      $this->Session->setFlash(__('Image format not suported'));
      }
      }


      $id=$this->request->data['config_state']['state_id'];
      $nmfind=$this->State->query("select * from ngdrstab_conf_admblock1_state where state_id='$id'");
      $nmstate=$nmfind[0][0]['state_name_en'];
      $a=$this->currentstate->query("insert into ngdrs_current_state (state_id,state_name,dept_name) values ('$id','$nmstate','$dept_name')");
      $this->language->query("update ngdrstab_conf_language set state_id='$id'");
      $this->User->query("update ngdrstab_mst_user set state_id='$id' where username='Suserconfig'");
      $this->redirect($this->Auth->logout());
      }
      }
      public function reinitiate_state(){
      $this->loadModel('language');
      $this->loadModel('mainlanguage');
      $this->loadModel('state_logo');
      $this->loadModel('currentstate');
      $this->loadModel('State');
      $this->loadModel('User');

      if ($this->request->is('post') || $this->request->is('put')) {
      // echo 'ccc';
      $this->currentstate->query("delete from ngdrs_current_state");
      $this->state_logo->query("delete from ngdrstab_conf_state_logo");
      $this->language->query("delete from ngdrstab_conf_language where language_id!=1");
      $this->language->query("update ngdrstab_conf_language set state_id = null where language_id=1");
      $this->User->query("update ngdrstab_mst_user set state_id = null where username='Suserconfig'");
      $this->mainlanguage->query("update ngdrstab_mst_language set lang_count = 0");
      $this->Session->setFlash(
      __('State Reinitiated Successfully')
      );
      $this->redirect(array('controller' => 'Masters', 'action' => 'select_state'));

      }
      }

     */

    public function select_state() {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('state_logo');
        $this->loadModel('currentstate');
        $this->loadModel('State');
        $this->loadModel('User');

        $language = $this->Session->read('sess_langauge');
        $this->set('language', $language);

        $statecount = $this->currentstate->find('all');
        //pr($statecount);


        $szcntstate = sizeof($statecount);
        //pr($szcntstate);
        if ($szcntstate > 0) {
            $this->set('statecount', $statecount);
        } else {
            $this->set('statecount', NULL);
        }

        $this->set('szcntstate', $szcntstate);
        $this->set('state_list', ClassRegistry::init('State')->find('list', array('fields' => array('state_id', 'state_name_' . $language), 'order' => array('state_name_en' => 'ASC'))));

        $fieldlist = array();
        $fieldlist['state_id']['select'] = 'is_select_req';
        $fieldlist['logo_path']['text'] = 'is_required';
        $fieldlist['dept_name']['text'] = 'is_required';
        $this->set('fieldlist', $fieldlist);
        //setting the error message to empty as it shows error at first time
        /* foreach ($fieldlist as $key => $valrule) {
          $errarr[$key . '_error'] = "";
          }
          $this->set("errarr", $errarr); */
        $this->set('result_codes', $this->getvalidationruleset($fieldlist));


        if ($this->request->is('post') || $this->request->is('put')) {

            if (!empty($this->request->data['config_state']['logo_path']['name'])) {

                $dept_name = $this->request->data['config_state']['dept_name'];
                if ($this->image_validation($this->request->data['config_state']['logo_path'])) {

                    $fileinfo = @getimagesize($this->request->data['config_state']['logo_path']['tmp_name']);
                    $width = $fileinfo[0];
                    $height = $fileinfo[1];
                    if ($width < 45 || $height < 45) {
                        $this->Session->setFlash(__('Image pixel format not supported; image should be minimum 45 px * 45 px '));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'select_state'));
                    }
                    $filesize = $this->request->data['config_state']['logo_path']['size'];
                    if ($filesize > 700000) {
                        $this->Session->setFlash(__('Image size should not be greater than 700 KB'));
                        $this->redirect(array('controller' => 'Masters', 'action' => 'select_state'));
                    }

                    $file = $this->request->data['config_state']['logo_path']; //put the  data into a var for easy use
                    $ext = substr(strtolower(strrchr($file['name'], '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif', 'png'); //set allowed extensions

                    if (in_array($ext, $arr_ext)) {
                        $temp = explode(".", $file['name']);
                        $stateid = $this->request->data['config_state']['state_id'];
                        $statename = $this->State->query("SELECT state_name_en FROM ngdrstab_conf_admblock1_state where state_id=?", array($stateid));
                        $statename = $statename[0][0]['state_name_en'];

                        $newfilename = $stateid . '_' . $statename . '.' . end($temp);
                        //$newfilename = 'templogo'. '.' . end($temp);
//                                move_uploaded_file($_FILES["file"]["tmp_name"], "../img/imageDirectory/" . $newfilename);
//                             pr($file);
//                             pr($newfilename);exit;
                        //do the actual uploading of the file. First arg is the tmp name, second arg is
                        //where we are putting it                        
                        if (move_uploaded_file($file['tmp_name'], WWW_ROOT . 'img/state_logos_img' . DS . $newfilename)) {

                            $file['name'] = 'state_logos_img/' . $newfilename;
                            //prepare the filename for database entry
                            $this->request->data['config_state']['logo_path'] = $file['name'];
                            $filenm = $file['name'];

                            $this->state_logo->query("insert into ngdrstab_conf_state_logo (state_id,logo_path) values('$stateid','$filenm')");

                            $id = $this->request->data['config_state']['state_id'];
                            $nmfind = $this->State->query("select * from ngdrstab_conf_admblock1_state where state_id='$id'");
                            $nmstate = $nmfind[0][0]['state_name_en'];
                            $a = $this->currentstate->query("insert into ngdrs_current_state (state_id,state_name,dept_name) values ('$id','$nmstate','$dept_name')");
                            $this->language->query("update ngdrstab_conf_language set state_id='$id'");
                            $this->User->query("update ngdrstab_mst_user set state_id='$id' ");   // reset state_id of all user in table  
                            $this->redirect($this->Auth->logout());
                        } else {
                            $this->Session->setFlash(__('Logo not uploaded'));
                        }
                    } else {
                        $this->Session->setFlash(__('Image extension not supported'));
                    }
                } else {
                    $this->Session->setFlash(__('Invalid image'));
                }
            } else {
                $this->Session->setFlash(__('Image not uploaded'));
            }
        }
    }

    public function reinitiate_state() {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('state_logo');
        $this->loadModel('currentstate');
        $this->loadModel('State');
        $this->loadModel('User');
        $this->loadModel('District');
        $this->loadModel('taluka');

        if ($this->request->is('post') || $this->request->is('put')) {

            // echo 'ccc';
            //$stateid = $this->Auth->User('state_id');
            //pr($stateid);
            $statecount = $this->currentstate->find('all');
            //$curstate=$statecount[0]['currentstate']['state_id'];
            // pr($curstate);

            /*
              $District = $this->District->find('list', array('fields' => array('id'), 'conditions' => array('state_id' => $curstate)));
              //pr($District);
              $taluka = $this->taluka->find('list', array('fields' => array('taluka_id'), 'conditions' => array('state_id' => $curstate)));
              //pr($taluka);
              if(sizeof($District) > 0){
              $this->Session->setFlash(
              __('Districts are available for this state; therefore you can not Reinitiated the state.')
              );
              $this->redirect(array('controller' => 'Masters', 'action' => 'reinitiate_state'));
              }
              if(sizeof($taluka) > 0){
              $this->Session->setFlash(
              __("Taluka's are available for this state; therefore you can not Reinitiated the state.")
              );
              $this->redirect(array('controller' => 'Masters', 'action' => 'reinitiate_state'));
              }
             */

            $this->currentstate->query("delete from ngdrs_current_state");
            $this->state_logo->query("delete from ngdrstab_conf_state_logo");
            $this->language->query("delete from ngdrstab_conf_language where language_id!=1");
            $this->language->query("update ngdrstab_conf_language set state_id = null where language_id=1");
            $this->User->query("update ngdrstab_mst_user set state_id = null where username='Suserconfig'");
            $this->mainlanguage->query("update ngdrstab_mst_language set lang_count = 0,labellist_name=null");
            $this->mainlanguage->query("update ngdrstab_mst_language set language_code=null where id!=1");
            $this->mainlanguage->query("select * from conf_truncate()");
            $this->Session->setFlash(
                    __('State Reinitiated Successfully')
            );
            $this->redirect(array('controller' => 'Masters', 'action' => 'select_state'));
        }
    }

    public function getstate_lang() {
        $this->loadModel('language');
        $this->loadModel('mainlanguage');
        $this->loadModel('state_logo');
        $this->loadModel('currentstate');
        $this->loadModel('State');
        $this->loadModel('StateLanguage');
        $statelng = $this->StateLanguage->query('select sl.state_id,sl.language_id,ml.language_name,cs.state_name_en from ngdrstab_mst_language ml inner join ngdrstab_mst_state_language sl on ml.id=sl.language_id inner join ngdrstab_conf_admblock1_state cs on sl.state_id=cs.state_id order by state_name_en,language_name ');
        $states = $this->State->query("select * from ngdrstab_conf_admblock1_state order by id");
        //pr($states);
        // pr($statelng);
        $this->set('states', $states);
        $this->set('statelng', $statelng);
    }

    public function itemlst() {
        $this->loadModel('LanguageMainmenu');
        $cntcnt = $this->LanguageMainmenu->find('all', array('conditions' => array('state_id' => $this->Auth->user('state_id')), 'order' => 'field_order'));
        $this->set('cntcnt', $cntcnt);
    }

    public function unit_category($unit_cat_id = NULL) {
        try {
            //$this->check_role_escacheck_role_escalationlation();
            $this->loadModel('divisionnew');
            $this->loadModel('adminLevelConfig');
            $this->loadModel('State');
            $this->loadModel('District');
            $this->loadModel('Subdivision');
            $this->loadModel('User');
            $this->loadModel('taluka');
            $user_id = $this->Auth->User("user_id");
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $this->loadModel('NGDRSErrorCode');
            $this->loadModel('UnitCategory');
            $result_codes = $this->NGDRSErrorCode->find("all");
            $this->set('result_codes', $result_codes);
            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);

            $this->set('talukarecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $statename = $this->Session->read("state_name_en");

            $unitcatdata = $this->UnitCategory->query("select * from ngdrstab_mst_unit_category order by unit_cat_desc_en");
            $this->set('unitcatdata', $unitcatdata);

//            pr($propertydata);exit;

            $this->set("fieldlist", $fieldlist = $this->UnitCategory->fieldlist($languagelist));
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));


            if ($this->request->is('post') || $this->request->is('put')) {

                $this->request->data['unit_category']['ip_address'] = $this->request->clientIp();
                $this->request->data['unit_category']['created_date'] = $created_date;
                $this->request->data['unit_category']['user_id'] = $user_id;
                $verrors = $this->validatedata($this->request->data['unit_category'], $fieldlist);
                if ($this->ValidationError($verrors)) {
                    $duplicate = $this->UnitCategory->get_duplicate($languagelist);
                    $checkd = $this->check_duplicate($duplicate, $this->request->data['unit_category']);
                    if ($checkd) {
                        if ($this->UnitCategory->save($this->request->data['unit_category'])) {
                            $this->Session->setFlash(__('lblsavemsg'));
                            return $this->redirect(array('action' => 'unit_category'));
                            $lastid = $this->UnitCategory->getLastInsertId();
                        } else {
                            $this->Session->setFlash(__('lblnotsavemsg'));
                        }
                    } else {
                        $this->Session->setFlash(__('lblduplicatemsg'));
                    }
                } else {
                    $this->Session->setFlash(__('Find validations'));
                }
            }
            if (!is_null($unit_cat_id) && is_numeric($unit_cat_id)) {

                $this->Session->write('unit_cat_id', $unit_cat_id);
                $result = $this->UnitCategory->find("first", array('conditions' => array('unit_cat_id' => $unit_cat_id)));
                if (!empty($result)) {
                    $this->request->data['unit_category'] = $result['UnitCategory'];
                } else {
                    $this->Session->setFlash(
                            __('lblnotfoundmsg')
                    );
                }
            }
        } catch (exception $ex) {
            pr($ex);
            exit;
            $this->Session->setFlash(__('Record Cannot be displayed. Error :' . $ex->getMessage()));
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
    }

    public function delete_unit_category($unit_cat_id = null) {
        $this->autoRender = false;
        $this->loadModel('UnitCategory');
        try {
            if (isset($unit_cat_id) && is_numeric($unit_cat_id)) {
                $this->UnitCategory->unit_cat_id = $unit_cat_id;
                if ($this->UnitCategory->delete($unit_cat_id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'unit_category'));
                }
                // }
            }
        } catch (exception $ex) {
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred', $ex->getCode()));
        }
    }

    public function unit() {
        try {
            //$this->check_role_escalation();
            $this->loadModel('unit');
            $this->loadModel('UnitCategory');
            $this->loadModel('State');
            $this->loadModel('User');
            $this->loadModel('standard_units');
            $this->set('selectunit', NULL);
            $this->set('actiontypeval', NULL);
            $this->set('hfactionval', NULL);
            $this->set('hfid', NULL);
            $this->set('hfupdateflag', NULL);

            $this->loadModel('language');
            $this->loadModel('mainlanguage');
            $languagelist = $this->mainlanguage->find('all', array('fields' => array('id', 'language_name', 'language_code'), 'joins' => array(
                    array(
                        'table' => 'ngdrstab_conf_language',
                        'alias' => 'conf',
                        'type' => 'inner',
                        'foreignKey' => false,
                        'conditions' => array('conf.language_id = mainlanguage.id')
                    )), 'order' => 'conf.language_id ASC'
            ));
            $this->set('languagelist', $languagelist);
            $this->set('unitrecord', NULL);
            $user_id = $this->Auth->User("user_id");
            $stateid = $this->Auth->User("state_id");
            $laug = $this->Session->read("sess_langauge");
            $this->set('laug', $laug);
            $date = date('Y/m/d H:i:s');
            $created_date = date('Y/m/d');
            $user_id = $this->Auth->User("user_id");
            $this->request->data['unit']['req_ip'] = $this->request->clientIp();
            $this->request->data['unit']['user_id'] = $user_id;
            // $this->request->data['unit']['created_date'] = $created_date;
            $this->request->data['unit']['state_id'] = $stateid;
            $stdunits = $this->unit->find('list', array('fields' => array('unit_id', 'unit_desc_en'), 'conditions' => array('conversion_formula' => 1), 'order' => array('unit_id' => 'ASC')));
            $this->set('unitdata', $stdunits);

            // ____________old___________________
//            $unitrecord = $this->unit->find('all', array('fields' => array('unit.unit_id', 'unit.unit_desc_en', 'unit.unit_desc_ll', 'unit.unit_desc_ll1', 'unit.unit_desc_ll2', 'unit.unit_desc_ll3', 'unit.unit_desc_ll4', 'stdunit.unit_desc_en', 'stdunit.unit_desc_ll', 'stdunit.unit_desc_ll1', 'stdunit.unit_desc_ll2', 'stdunit.unit_desc_ll3', 'stdunit.unit_desc_ll4', 'remark', 'conversion_formula', 'standard_units'),
//                'joins' => array(
//                    array(
//                        'table' => 'ngdrstab_mst_unit',
//                        'alias' => 'stdunit',
//                        'type' => 'LEFT',
//                        'conditions' => array('stdunit.unit_id= unit.standard_units')
//            ))));
//            //pr($unitrecord);exit;
//            $this->set('unitrecord', $unitrecord);
            //________________________end____________

            $unitrecord = $this->unit->query("select unit.*,unitcat.* from  ngdrstab_mst_unit as unit,ngdrstab_mst_unit_category as unitcat
            where 
            unit.unit_cat_id=unitcat.unit_cat_id");
            $this->set('unitrecord', $unitrecord);
            $unit_cat = $this->UnitCategory->find('list', array('fields' => array('unit_cat_id', 'unit_cat_desc_' . $laug), 'order' => array('unit_cat_id' => 'ASC')));
            $this->set('unit_cat', $unit_cat);




            $fieldlist = array();
            $fielderrorarray = array();
            foreach ($languagelist as $languagecode) {
                if ($languagecode['mainlanguage']['language_code'] == 'en') {
                    $fieldlist['unit_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = 'is_required,is_alphaspace,is_maxlength255';
                } else {
                    $fieldlist['unit_desc_' . $languagecode['mainlanguage']['language_code']]['text'] = "unicode_rule_" . $languagecode['mainlanguage']['language_code'] . ",maxlength_unicode_0to255";
                }
            }
            $fieldlist['remark']['text'] = 'is_required,is_alphaspace,is_maxlength255';
            $fieldlist['standard_units']['select'] = 'is_select_req';
            $fieldlist['conversion_formula']['text'] = 'is_integerdecimalornot,is_maxlength12';
            $this->set('fieldlist', $fieldlist);
            $this->set('result_codes', $this->getvalidationruleset($fieldlist));
            if ($this->request->is('post')) {
                $this->check_csrf_token($this->request->data['unit']['csrftoken']);
                $actiontype = $_POST['actiontype'];
                $hfid = $_POST['hfid'];
                $this->set('hfid', $hfid);
                $hfactionval = $_POST['hfaction'];
                if ($actiontype == '1') {
                    $this->set('actiontypeval', $actiontype);
                    $this->set('hfactionval', $hfactionval);
                    if ($hfactionval == 'S') {
                        $duplicateflag = 'S';
                        if ($this->request->data['hfupdateflag'] == 'Y') {
                            $this->request->data['unit']['id'] = $this->request->data['hfid'];
                            $duplicateflag = 'U';
                            $actionvalue = "lbleditmsg";
                        } else {

                            $actionvalue = "lblsavemsg";
                        }
                        // pr($this->request->data['unit']);exit;
                        if ($this->request->data['unit']['type'] == 1) {
                            unset($fieldlist['standard_units']);
                            $this->request->data['unit']['standard_units'] = NULL;
                            $this->request->data['unit']['conversion_formula'] = 1;
                        }

                        $this->request->data['unit'] = $this->istrim($this->request->data['unit']);
                        $errarr = $this->validatedata($this->request->data['unit'], $fieldlist);


                        if ($this->ValidationError($errarr)) {
                            $duplicate['Table'] = 'ngdrstab_mst_unit';
                            $duplicate['Fields'] = array('unit_desc_en', 'unit_desc_ll');
                            $duplicate['Action'] = $duplicateflag; //U   
                            $duplicate['PrimaryKey'] = 'id';

                            $checkd = $this->check_duplicate($duplicate, $this->request->data['unit']);
                            if ($checkd) {
                                if ($this->unit->save($this->request->data['unit'])) {
                                    $this->Session->setFlash(__($actionvalue));
                                    $this->redirect(array('controller' => 'Masters', 'action' => 'unit'));
                                    $this->set('unitrecord', $this->unit->find('all'));
                                } else {
                                    $this->Session->setFlash(__('lblnotsavemsg'));
                                }
                            } else {
                                $this->Session->setFlash(__('lblduplicatemsg'));
                            }

                            if ($actiontype == 2) {
                                $this->set('hfupdateflag', 'Y');
                            }
                        }
                    }
                }
            }
            $this->set_csrf_token();
        } catch (Exception $ex) {
            $this->Session->setFlash(
                    __('Record Cannot be displayed. Error :' . $ex->getMessage())
            );
            return $this->redirect(array('controller' => 'Error', 'action' => 'exception_occurred'));
        }
        $this->set_csrf_token();
    }

    public function unit_delete($id = null) {
        // pr($id);exit;
        $this->autoRender = false;
        $this->loadModel('unit');
        try {
            if (isset($id) && is_numeric($id)) {
                //  if ($type = 'constructiontype') {
                $this->unit->unit_id = $id;
                if ($this->unit->delete($id)) {
                    $this->Session->setFlash(
                            __('lbldeletemsg')
                    );
                    return $this->redirect(array('action' => 'unit'));
                }
                // }
            }
        } catch (exception $ex) {
            // pr($ex);exit;
        }
    }

}
